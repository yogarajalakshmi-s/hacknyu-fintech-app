{"version":3,"names":[],"sources":["GestureButtonsProps.ts"],"sourcesContent":["import * as React from 'react';\nimport {\n  AccessibilityProps,\n  ColorValue,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport type { NativeViewGestureHandlerProps } from '../handlers/NativeViewGestureHandler';\n\nexport interface RawButtonProps\n  extends NativeViewGestureHandlerProps,\n    AccessibilityProps {\n  /**\n   * Defines if more than one button could be pressed simultaneously. By default\n   * set true.\n   */\n  exclusive?: boolean;\n  // TODO: we should transform props in `createNativeWrapper`\n  /**\n   * Android only.\n   *\n   * Defines color of native ripple animation used since API level 21.\n   */\n  rippleColor?: number | ColorValue | null;\n\n  /**\n   * Android only.\n   *\n   * Defines radius of native ripple animation used since API level 21.\n   */\n  rippleRadius?: number | null;\n\n  /**\n   * Android only.\n   *\n   * Set this to true if you want the ripple animation to render outside the view bounds.\n   */\n  borderless?: boolean;\n\n  /**\n   * Android only.\n   *\n   * Defines whether the ripple animation should be drawn on the foreground of the view.\n   */\n  foreground?: boolean;\n\n  /**\n   * Android only.\n   *\n   * Set this to true if you don't want the system to play sound when the button is pressed.\n   */\n  touchSoundDisabled?: boolean;\n\n  /**\n   * Style object, use it to set additional styles.\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * Used for testing-library compatibility, not passed to the native component.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  testOnly_onPress?: Function | null;\n\n  /**\n   * Used for testing-library compatibility, not passed to the native component.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  testOnly_onPressIn?: Function | null;\n\n  /**\n   * Used for testing-library compatibility, not passed to the native component.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  testOnly_onPressOut?: Function | null;\n\n  /**\n   * Used for testing-library compatibility, not passed to the native component.\n   */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  testOnly_onLongPress?: Function | null;\n}\ninterface ButtonWithRefProps {\n  innerRef?: React.ForwardedRef<React.ComponentType<any>>;\n}\n\nexport interface BaseButtonProps extends RawButtonProps {\n  /**\n   * Called when the button gets pressed (analogous to `onPress` in\n   * `TouchableHighlight` from RN core).\n   */\n  onPress?: (pointerInside: boolean) => void;\n\n  /**\n   * Called when the button gets pressed and is held for `delayLongPress`\n   * milliseconds.\n   */\n  onLongPress?: () => void;\n\n  /**\n   * Called when button changes from inactive to active and vice versa. It\n   * passes active state as a boolean variable as a first parameter for that\n   * method.\n   */\n  onActiveStateChange?: (active: boolean) => void;\n  style?: StyleProp<ViewStyle>;\n  testID?: string;\n\n  /**\n   * Delay, in milliseconds, after which the `onLongPress` callback gets called.\n   * Defaults to 600.\n   */\n  delayLongPress?: number;\n}\nexport interface BaseButtonWithRefProps\n  extends BaseButtonProps,\n    ButtonWithRefProps {}\n\nexport interface RectButtonProps extends BaseButtonProps {\n  /**\n   * Background color that will be dimmed when button is in active state.\n   */\n  underlayColor?: string;\n\n  /**\n   * iOS only.\n   *\n   * Opacity applied to the underlay when button is in active state.\n   */\n  activeOpacity?: number;\n}\nexport interface RectButtonWithRefProps\n  extends RectButtonProps,\n    ButtonWithRefProps {}\n\nexport interface BorderlessButtonProps extends BaseButtonProps {\n  /**\n   * iOS only.\n   *\n   * Opacity applied to the button when it is in an active state.\n   */\n  activeOpacity?: number;\n}\nexport interface BorderlessButtonWithRefProps\n  extends BorderlessButtonProps,\n    ButtonWithRefProps {}\n"],"mappings":"","ignoreList":[]}