"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Text = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _gestureObjects = require("../handlers/gestures/gestureObjects");
var _GestureDetector = require("../handlers/gestures/GestureDetector");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
const Text = exports.Text = /*#__PURE__*/(0, _react.forwardRef)((props, ref) => {
  const {
    onPress,
    onLongPress,
    ...rest
  } = props;
  const textRef = (0, _react.useRef)(null);
  const native = _gestureObjects.GestureObjects.Native().runOnJS(true);
  const refHandler = node => {
    textRef.current = node;
    if (ref === null) {
      return;
    }
    if (typeof ref === 'function') {
      ref(node);
    } else {
      ref.current = node;
    }
  };
  (0, _react.useEffect)(() => {
    if (_reactNative.Platform.OS !== 'web') {
      return;
    }
    const textElement = ref ? ref.current : textRef.current;

    // At this point we are sure that textElement is div in HTML tree
    textElement === null || textElement === void 0 || textElement.setAttribute('rnghtext', 'true');
  }, []);
  return onPress || onLongPress ? /*#__PURE__*/_react.default.createElement(_GestureDetector.GestureDetector, {
    gesture: native
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, _extends({
    onPress: onPress,
    onLongPress: onLongPress,
    ref: refHandler
  }, rest))) : /*#__PURE__*/_react.default.createElement(_reactNative.Text, _extends({
    ref: ref
  }, rest));
});
// eslint-disable-next-line @typescript-eslint/no-redeclare
//# sourceMappingURL=Text.js.map