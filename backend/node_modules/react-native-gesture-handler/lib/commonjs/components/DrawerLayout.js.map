{"version":3,"names":["_react","_interopRequireWildcard","require","React","_invariant","_interopRequireDefault","_reactNative","_PanGestureHandler","_TapGestureHandler","_State","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_defineProperty","_toPropertyKey","value","enumerable","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","DRAG_TOSS","IDLE","DRAGGING","SETTLING","DrawerLayout","Component","constructor","props","createRef","state","drawerPosition","drawerWidth","drawerType","dragX","dragXValue","touchX","touchXValue","drawerTranslation","containerWidth","Animated","multiply","Value","add","setValue","translationX","startPositionX","dragOffsetFromOnStartPosition","interpolate","inputRange","outputRange","openValue","extrapolate","gestureOptions","useNativeDriver","useNativeAnimations","onDrawerSlide","listener","ev","_this$props$onDrawerS","_this$props","Math","floor","abs","nativeEvent","position","onGestureEvent","event","x","setState","layout","width","newState","drawerWillShow","_this$props$onDrawerS2","_this$props2","onDrawerStateChanged","oldState","State","ACTIVE","handleRelease","emitStateChanged","drawerState","keyboardDismissMode","Keyboard","dismiss","hideStatusBar","StatusBar","setHidden","statusBarAnimation","drawerShown","drawerLockMode","closeDrawer","velocityX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","animateDrawer","showing","_this$accessibilityIs","_this$pointerEventsVi","_this$panGestureHandl","accessibilityIsModalView","current","setNativeProps","accessibilityViewIsModal","pointerEventsView","pointerEvents","minSwipeDistance","edgeWidth","fromLeft","gestureOrientation","hitSlop","left","undefined","right","panGestureHandler","activeOffsetX","fromValue","toValue","velocity","speed","nextFramePosition","min","max","willShow","updateShowing","spring","bounciness","start","finished","drawerOpened","_this$props$onDrawerO","_this$props3","onDrawerOpen","_this$props$onDrawerC","_this$props4","onDrawerClose","options","forceUpdate","invariant","overlayOpacity","dynamicOverlayStyles","opacity","backgroundColor","overlayColor","createElement","TapGestureHandler","onHandlerStateChange","onTapHandlerStateChange","View","ref","style","styles","overlay","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","drawerSlide","containerSlide","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","containerTranslateX","transform","translateX","drawerTranslateX","closedDrawerOffset","drawerStyles","flexDirection","main","onLayout","handleContainerLayout","containerOnBack","containerInFront","importantForAccessibility","children","renderOverlay","drawerContainer","renderNavigationView","_this$props$onGesture","_this$props5","onGestureRef","updateAnimatedEvent","shouldComponentUpdate","render","PanGestureHandler","userSelect","activeCursor","mouseButton","enableContextMenu","setPanGestureRef","failOffsetY","openingHandlerStateChange","enableTrackpadTwoFingerGesture","enabled","renderDrawer","exports","Left","Right","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["DrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n//\n// It perhaps deserves to be put in a separate repo, but since it relies on\n// react-native-gesture-handler library which isn't very popular at the moment I\n// decided to keep it here for the time being. It will allow us to move faster\n// and fix issues that may arise in gesture handler library that could be found\n// when using the drawer component\n\nimport * as React from 'react';\nimport { Component } from 'react';\nimport invariant from 'invariant';\nimport {\n  Animated,\n  StyleSheet,\n  View,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  NativeSyntheticEvent,\n} from 'react-native';\n\nimport {\n  GestureEvent,\n  HandlerStateChangeEvent,\n  UserSelect,\n  ActiveCursor,\n  MouseButton,\n} from '../handlers/gestureHandlerCommon';\nimport { PanGestureHandler } from '../handlers/PanGestureHandler';\nimport type {\n  PanGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n} from '../handlers/GestureHandlerEventPayload';\nimport { TapGestureHandler } from '../handlers/TapGestureHandler';\nimport { State } from '../State';\n\nconst DRAG_TOSS = 0.05;\n\nconst IDLE: DrawerState = 'Idle';\nconst DRAGGING: DrawerState = 'Dragging';\nconst SETTLING: DrawerState = 'Settling';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerPosition = 'left' | 'right';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerState = 'Idle' | 'Dragging' | 'Settling';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerType = 'front' | 'back' | 'slide';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerLockMode = 'unlocked' | 'locked-closed' | 'locked-open';\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerKeyboardDismissMode = 'none' | 'on-drag';\n\n// Animated.AnimatedInterpolation has been converted to a generic type\n// in @types/react-native 0.70. This way we can maintain compatibility\n// with all versions of @types/react-native`\ntype AnimatedInterpolation = ReturnType<Animated.Value['interpolate']>;\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the standard implementation already and is one\n   * of the required params. Gesture handler version of DrawerLayout make it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: Animated.Value\n  ) => React.ReactNode;\n\n  drawerPosition?: DrawerPosition;\n\n  drawerWidth?: number;\n\n  drawerBackgroundColor?: string;\n\n  drawerLockMode?: DrawerLockMode;\n\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n  useNativeAnimations?: boolean;\n\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default black\n   *\n   * Color of a semi-transparent overlay to be displayed on top of the content\n   * view when drawer gets open. A solid color should be used as the opacity is\n   * added by the Drawer itself and the opacity of the overlay is animated (from\n   * 0% to 70%).\n   */\n  overlayColor?: string;\n\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  onGestureRef?: (ref: PanGestureHandler) => void;\n\n  // Implicit `children` prop has been removed in @types/react^18.0.0\n  children?:\n    | React.ReactNode\n    | ((openValue?: AnimatedInterpolation) => React.ReactNode);\n\n  /**\n   * @default 'none'\n   * Defines which userSelect property should be used.\n   * Values: 'none'|'text'|'auto'\n   */\n  userSelect?: UserSelect;\n\n  /**\n   * @default 'auto'\n   * Defines which cursor property should be used when gesture activates.\n   * Values: see CSS cursor values\n   */\n  activeCursor?: ActiveCursor;\n\n  /**\n   * @default 'MouseButton.LEFT'\n   * Allows to choose which mouse button should underlying pan handler react to.\n   */\n  mouseButton?: MouseButton;\n\n  /**\n   * @default 'false if MouseButton.RIGHT is specified'\n   * Allows to enable/disable context menu.\n   */\n  enableContextMenu?: boolean;\n}\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerLayoutState = {\n  dragX: Animated.Value;\n  touchX: Animated.Value;\n  drawerTranslation: Animated.Value;\n  containerWidth: number;\n  drawerState: DrawerState;\n  drawerOpened: boolean;\n};\n\n/**\n * @deprecated DrawerLayout is deprecated. Use Reanimated version of DrawerLayout instead.\n */\nexport type DrawerMovementOption = {\n  velocity?: number;\n  speed?: number;\n};\n\n/**\n * @deprecated use Reanimated version of DrawerLayout instead\n */\nexport default class DrawerLayout extends Component<\n  DrawerLayoutProps,\n  DrawerLayoutState\n> {\n  static defaultProps = {\n    drawerWidth: 200,\n    drawerPosition: 'left',\n    useNativeAnimations: true,\n    drawerType: 'front',\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: 'rgba(0, 0, 0, 0.7)',\n    drawerLockMode: 'unlocked',\n    enableTrackpadTwoFingerGesture: false,\n  };\n\n  constructor(props: DrawerLayoutProps) {\n    super(props);\n\n    const dragX = new Animated.Value(0);\n    const touchX = new Animated.Value(0);\n    const drawerTranslation = new Animated.Value(0);\n\n    this.state = {\n      dragX,\n      touchX,\n      drawerTranslation,\n      containerWidth: 0,\n      drawerState: IDLE,\n      drawerOpened: false,\n    };\n\n    this.updateAnimatedEvent(props, this.state);\n  }\n\n  shouldComponentUpdate(props: DrawerLayoutProps, state: DrawerLayoutState) {\n    if (\n      this.props.drawerPosition !== props.drawerPosition ||\n      this.props.drawerWidth !== props.drawerWidth ||\n      this.props.drawerType !== props.drawerType ||\n      this.state.containerWidth !== state.containerWidth\n    ) {\n      this.updateAnimatedEvent(props, state);\n    }\n\n    return true;\n  }\n\n  private openValue?: AnimatedInterpolation;\n  private onGestureEvent?: (\n    event: GestureEvent<PanGestureHandlerEventPayload>\n  ) => void;\n  private accessibilityIsModalView = React.createRef<View>();\n  private pointerEventsView = React.createRef<View>();\n  private panGestureHandler = React.createRef<PanGestureHandler | null>();\n  private drawerShown = false;\n\n  static positions = {\n    Left: 'left',\n    Right: 'right',\n  };\n\n  private updateAnimatedEvent = (\n    props: DrawerLayoutProps,\n    state: DrawerLayoutState\n  ) => {\n    // Event definition is based on\n    const { drawerPosition, drawerWidth, drawerType } = props;\n    const {\n      dragX: dragXValue,\n      touchX: touchXValue,\n      drawerTranslation,\n      containerWidth,\n    } = state;\n\n    let dragX = dragXValue;\n    let touchX = touchXValue;\n\n    if (drawerPosition !== 'left') {\n      // Most of the code is written in a way to handle left-side drawer. In\n      // order to handle right-side drawer the only thing we need to do is to\n      // reverse events coming from gesture handler in a way they emulate\n      // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n      // calulcated by subtracing real touchX from the width of the container\n      // (such that when touch happens at the right edge the value is simply 0)\n      dragX = Animated.multiply(\n        new Animated.Value(-1),\n        dragXValue\n      ) as Animated.Value; // TODO(TS): (for all \"as\" in this file) make sure we can map this\n      touchX = Animated.add(\n        new Animated.Value(containerWidth),\n        Animated.multiply(new Animated.Value(-1), touchXValue)\n      ) as Animated.Value; // TODO(TS): make sure we can map this;\n      touchXValue.setValue(containerWidth);\n    } else {\n      touchXValue.setValue(0);\n    }\n\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep\n    // start position of the gesture. Then we use that value to calculate how\n    // much we need to subtract from the dragX. If the gesture started on the\n    // greyed out area we take the distance from the edge of the drawer to the\n    // start position. Otherwise we don't subtract at all and the drawer be\n    // pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    //\n    let translationX = dragX;\n    if (drawerType === 'front') {\n      const startPositionX = Animated.add(\n        touchX,\n        Animated.multiply(new Animated.Value(-1), dragX)\n      );\n\n      const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n        inputRange: [drawerWidth! - 1, drawerWidth!, drawerWidth! + 1],\n        outputRange: [0, 0, 1],\n      });\n      translationX = Animated.add(\n        dragX,\n        dragOffsetFromOnStartPosition\n      ) as Animated.Value; // TODO: as above\n    }\n\n    this.openValue = Animated.add(translationX, drawerTranslation).interpolate({\n      inputRange: [0, drawerWidth!],\n      outputRange: [0, 1],\n      extrapolate: 'clamp',\n    });\n\n    const gestureOptions: {\n      useNativeDriver: boolean;\n      // TODO: make sure it is correct\n      listener?: (\n        ev: NativeSyntheticEvent<PanGestureHandlerEventPayload>\n      ) => void;\n    } = {\n      useNativeDriver: props.useNativeAnimations!,\n    };\n\n    if (this.props.onDrawerSlide) {\n      gestureOptions.listener = (ev) => {\n        const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n        const position = translationX / this.state.containerWidth;\n\n        this.props.onDrawerSlide?.(position);\n      };\n    }\n\n    this.onGestureEvent = Animated.event(\n      [{ nativeEvent: { translationX: dragXValue, x: touchXValue } }],\n      gestureOptions\n    );\n  };\n\n  private handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n    this.setState({ containerWidth: nativeEvent.layout.width });\n  };\n\n  private emitStateChanged = (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => {\n    this.props.onDrawerStateChanged?.(newState, drawerWillShow);\n  };\n\n  private openingHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    if (nativeEvent.oldState === State.ACTIVE) {\n      this.handleRelease({ nativeEvent });\n    } else if (nativeEvent.state === State.ACTIVE) {\n      this.emitStateChanged(DRAGGING, false);\n      this.setState({ drawerState: DRAGGING });\n      if (this.props.keyboardDismissMode === 'on-drag') {\n        Keyboard.dismiss();\n      }\n      if (this.props.hideStatusBar) {\n        StatusBar.setHidden(true, this.props.statusBarAnimation || 'slide');\n      }\n    }\n  };\n\n  private onTapHandlerStateChange = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<TapGestureHandlerEventPayload>) => {\n    if (\n      this.drawerShown &&\n      nativeEvent.oldState === State.ACTIVE &&\n      this.props.drawerLockMode !== 'locked-open'\n    ) {\n      this.closeDrawer();\n    }\n  };\n\n  private handleRelease = ({\n    nativeEvent,\n  }: HandlerStateChangeEvent<PanGestureHandlerEventPayload>) => {\n    const { drawerWidth, drawerPosition, drawerType } = this.props;\n    const { containerWidth } = this.state;\n    let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n\n    if (drawerPosition !== 'left') {\n      // See description in _updateAnimatedEvent about why events are flipped\n      // for right-side drawer\n      dragX = -dragX;\n      touchX = containerWidth - touchX;\n      velocityX = -velocityX;\n    }\n\n    const gestureStartX = touchX - dragX;\n    let dragOffsetBasedOnStart = 0;\n\n    if (drawerType === 'front') {\n      dragOffsetBasedOnStart =\n        gestureStartX > drawerWidth! ? gestureStartX - drawerWidth! : 0;\n    }\n\n    const startOffsetX =\n      dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth! : 0);\n    const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n    const shouldOpen = projOffsetX > drawerWidth! / 2;\n\n    if (shouldOpen) {\n      this.animateDrawer(startOffsetX, drawerWidth!, velocityX);\n    } else {\n      this.animateDrawer(startOffsetX, 0, velocityX);\n    }\n  };\n\n  private updateShowing = (showing: boolean) => {\n    this.drawerShown = showing;\n    this.accessibilityIsModalView.current?.setNativeProps({\n      accessibilityViewIsModal: showing,\n    });\n    this.pointerEventsView.current?.setNativeProps({\n      pointerEvents: showing ? 'auto' : 'none',\n    });\n    const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n    const fromLeft = drawerPosition === 'left';\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: showing ? undefined : edgeWidth }\n      : { right: 0, width: showing ? undefined : edgeWidth };\n    // @ts-ignore internal API, maybe could be fixed in handler types\n    this.panGestureHandler.current?.setNativeProps({\n      hitSlop,\n      activeOffsetX: gestureOrientation * minSwipeDistance!,\n    });\n  };\n\n  private animateDrawer = (\n    fromValue: number | null | undefined,\n    toValue: number,\n    velocity: number,\n    speed?: number\n  ) => {\n    this.state.dragX.setValue(0);\n    this.state.touchX.setValue(\n      this.props.drawerPosition === 'left' ? 0 : this.state.containerWidth\n    );\n\n    if (fromValue != null) {\n      let nextFramePosition = fromValue;\n      if (this.props.useNativeAnimations) {\n        // When using native driver, we predict the next position of the\n        // animation because it takes one frame of a roundtrip to pass RELEASE\n        // event from native driver to JS before we can start animating. Without\n        // it, it is more noticable that the frame is dropped.\n        if (fromValue < toValue && velocity > 0) {\n          nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n        } else if (fromValue > toValue && velocity < 0) {\n          nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n        }\n      }\n      this.state.drawerTranslation.setValue(nextFramePosition);\n    }\n\n    const willShow = toValue !== 0;\n    this.updateShowing(willShow);\n    this.emitStateChanged(SETTLING, willShow);\n    this.setState({ drawerState: SETTLING });\n    if (this.props.hideStatusBar) {\n      StatusBar.setHidden(willShow, this.props.statusBarAnimation || 'slide');\n    }\n    Animated.spring(this.state.drawerTranslation, {\n      velocity,\n      bounciness: 0,\n      toValue,\n      useNativeDriver: this.props.useNativeAnimations!,\n      speed: speed ?? undefined,\n    }).start(({ finished }) => {\n      if (finished) {\n        this.emitStateChanged(IDLE, willShow);\n        this.setState({ drawerOpened: willShow });\n        if (this.state.drawerState !== DRAGGING) {\n          // It's possilbe that user started drag while the drawer\n          // was settling, don't override state in this case\n          this.setState({ drawerState: IDLE });\n        }\n        if (willShow) {\n          this.props.onDrawerOpen?.();\n        } else {\n          this.props.onDrawerClose?.();\n        }\n      }\n    });\n  };\n\n  openDrawer = (options: DrawerMovementOption = {}) => {\n    this.animateDrawer(\n      // TODO: decide if it should be null or undefined is the proper value\n      undefined,\n      this.props.drawerWidth!,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would not be clickable\n    this.forceUpdate();\n  };\n\n  closeDrawer = (options: DrawerMovementOption = {}) => {\n    // TODO: decide if it should be null or undefined is the proper value\n    this.animateDrawer(\n      undefined,\n      0,\n      options.velocity ? options.velocity : 0,\n      options.speed\n    );\n\n    // We need to force the update, otherwise the overlay is not rerendered and\n    // it would be still clickable\n    this.forceUpdate();\n  };\n\n  private renderOverlay = () => {\n    /* Overlay styles */\n    invariant(this.openValue, 'should be set');\n    let overlayOpacity;\n\n    if (this.state.drawerState !== IDLE) {\n      overlayOpacity = this.openValue;\n    } else {\n      overlayOpacity = this.state.drawerOpened ? 1 : 0;\n    }\n\n    const dynamicOverlayStyles = {\n      opacity: overlayOpacity,\n      backgroundColor: this.props.overlayColor,\n    };\n\n    return (\n      <TapGestureHandler onHandlerStateChange={this.onTapHandlerStateChange}>\n        <Animated.View\n          pointerEvents={this.drawerShown ? 'auto' : 'none'}\n          ref={this.pointerEventsView}\n          style={[styles.overlay, dynamicOverlayStyles]}\n        />\n      </TapGestureHandler>\n    );\n  };\n\n  private renderDrawer = () => {\n    const {\n      drawerBackgroundColor,\n      drawerWidth,\n      drawerPosition,\n      drawerType,\n      drawerContainerStyle,\n      contentContainerStyle,\n    } = this.props;\n\n    const fromLeft = drawerPosition === 'left';\n    const drawerSlide = drawerType !== 'back';\n    const containerSlide = drawerType !== 'front';\n\n    // We rely on row and row-reverse flex directions to position the drawer\n    // properly. Apparently for RTL these are flipped which requires us to use\n    // the opposite setting for the drawer to appear from left or right\n    // according to the drawerPosition prop\n    const reverseContentDirection = I18nManager.isRTL ? fromLeft : !fromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n    const openValue = this.openValue;\n    invariant(openValue, 'should be set');\n\n    let containerStyles;\n    if (containerSlide) {\n      const containerTranslateX = openValue.interpolate({\n        inputRange: [0, 1],\n        outputRange: fromLeft ? [0, drawerWidth!] : [0, -drawerWidth!],\n        extrapolate: 'clamp',\n      });\n      containerStyles = {\n        transform: [{ translateX: containerTranslateX }],\n      };\n    }\n\n    let drawerTranslateX: number | AnimatedInterpolation = 0;\n    if (drawerSlide) {\n      const closedDrawerOffset = fromLeft ? -drawerWidth! : drawerWidth!;\n      if (this.state.drawerState !== IDLE) {\n        drawerTranslateX = openValue.interpolate({\n          inputRange: [0, 1],\n          outputRange: [closedDrawerOffset, 0],\n          extrapolate: 'clamp',\n        });\n      } else {\n        drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n      }\n    }\n    const drawerStyles: {\n      transform: { translateX: number | AnimatedInterpolation }[];\n      flexDirection: 'row-reverse' | 'row';\n    } = {\n      transform: [{ translateX: drawerTranslateX }],\n      flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n    };\n\n    return (\n      <Animated.View style={styles.main} onLayout={this.handleContainerLayout}>\n        <Animated.View\n          style={[\n            drawerType === 'front'\n              ? styles.containerOnBack\n              : styles.containerInFront,\n            containerStyles,\n            contentContainerStyle,\n          ]}\n          importantForAccessibility={\n            this.drawerShown ? 'no-hide-descendants' : 'yes'\n          }>\n          {typeof this.props.children === 'function'\n            ? this.props.children(this.openValue)\n            : this.props.children}\n          {this.renderOverlay()}\n        </Animated.View>\n        <Animated.View\n          pointerEvents=\"box-none\"\n          ref={this.accessibilityIsModalView}\n          accessibilityViewIsModal={this.drawerShown}\n          style={[styles.drawerContainer, drawerStyles, drawerContainerStyle]}>\n          <View style={dynamicDrawerStyles}>\n            {this.props.renderNavigationView(this.openValue as Animated.Value)}\n          </View>\n        </Animated.View>\n      </Animated.View>\n    );\n  };\n\n  private setPanGestureRef = (ref: PanGestureHandler) => {\n    // TODO(TS): make sure it is OK taken from\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n    (\n      this.panGestureHandler as React.MutableRefObject<PanGestureHandler>\n    ).current = ref;\n    this.props.onGestureRef?.(ref);\n  };\n\n  render() {\n    const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } =\n      this.props;\n\n    const fromLeft = drawerPosition === 'left';\n\n    // gestureOrientation is 1 if the expected gesture is from left to right and\n    // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n    // to right gesture, thus orientation will be 1.\n    const gestureOrientation =\n      (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1);\n\n    // When drawer is closed we want the hitSlop to be horizontally shorter than\n    // the container size by the value of SLOP. This will make it only activate\n    // when gesture happens not further than SLOP away from the edge\n    const hitSlop = fromLeft\n      ? { left: 0, width: this.drawerShown ? undefined : edgeWidth }\n      : { right: 0, width: this.drawerShown ? undefined : edgeWidth };\n\n    return (\n      <PanGestureHandler\n        // @ts-ignore could be fixed in handler types\n        userSelect={this.props.userSelect}\n        activeCursor={this.props.activeCursor}\n        mouseButton={this.props.mouseButton}\n        enableContextMenu={this.props.enableContextMenu}\n        ref={this.setPanGestureRef}\n        hitSlop={hitSlop}\n        activeOffsetX={gestureOrientation * minSwipeDistance!}\n        failOffsetY={[-15, 15]}\n        onGestureEvent={this.onGestureEvent}\n        onHandlerStateChange={this.openingHandlerStateChange}\n        enableTrackpadTwoFingerGesture={\n          this.props.enableTrackpadTwoFingerGesture\n        }\n        enabled={\n          drawerLockMode !== 'locked-closed' && drawerLockMode !== 'locked-open'\n        }>\n        {this.renderDrawer()}\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":"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","ignoreList":[]}