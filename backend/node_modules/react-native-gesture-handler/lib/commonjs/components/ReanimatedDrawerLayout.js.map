{"version":3,"names":["_react","_interopRequireWildcard","require","_reactNative","_reactNativeReanimated","_gestureObjects","_GestureDetector","_gestureHandlerCommon","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","DRAG_TOSS","DrawerPosition","exports","DrawerState","DrawerType","DrawerLockMode","DrawerKeyboardDismissMode","defaultProps","drawerWidth","drawerPosition","LEFT","drawerType","FRONT","edgeWidth","minSwipeDistance","overlayColor","drawerLockMode","UNLOCKED","enableTrackpadTwoFingerGesture","activeCursor","mouseButton","MouseButton","statusBarAnimation","DrawerLayout","forwardRef","props","ref","containerWidth","setContainerWidth","useState","drawerState","setDrawerState","IDLE","drawerOpened","setDrawerOpened","drawerBackgroundColor","drawerContainerStyle","contentContainerStyle","hideStatusBar","keyboardDismissMode","userSelect","enableContextMenu","renderNavigationView","onDrawerSlide","onDrawerClose","onDrawerOpen","onDrawerStateChanged","isFromLeft","sideCorrection","openValue","useSharedValue","useDerivedValue","runOnJS","value","isDrawerOpen","handleContainerLayout","nativeEvent","layout","width","emitStateChanged","useCallback","newState","drawerWillShow","_runOnJS","drawerAnimatedProps","useAnimatedProps","accessibilityViewIsModal","overlayAnimatedProps","pointerEvents","edgeHitSlop","setEdgeHitSlop","left","right","gestureOrientation","useMemo","useEffect","animateDrawer","toValue","initialVelocity","animationSpeed","willShow","SETTLING","StatusBar","setHidden","normalizedToValue","interpolate","Extrapolation","CLAMP","normalizedInitialVelocity","withSpring","overshootClamping","velocity","mass","damping","stiffness","finished","_runOnJS2","_runOnJS3","handleRelease","event","translationX","dragX","velocityX","x","touchX","gestureStartX","dragOffsetBasedOnStart","startOffsetX","projOffsetX","shouldOpen","openDrawer","options","_options$initialVeloc","closeDrawer","_options$initialVeloc2","overlayDismissGesture","Gesture","Tap","maxDistance","onEnd","LOCKED_OPEN","overlayAnimatedStyle","useAnimatedStyle","opacity","backgroundColor","fillHitSlop","panGesture","Pan","hitSlop","minDistance","activeOffsetX","failOffsetY","simultaneousWithExternalGesture","enabled","LOCKED_CLOSED","onStart","DRAGGING","ON_DRAG","Keyboard","dismiss","onUpdate","startedOutsideTranslation","startedInsideTranslation","adjustedTranslation","Math","max","reverseContentDirection","I18nManager","isRTL","dynamicDrawerStyles","containerStyles","transform","translateX","drawerAnimatedStyle","closedDrawerOffset","isBack","BACK","isIdle","flexDirection","containerAnimatedProps","importantForAccessibility","Platform","OS","undefined","children","useImperativeHandle","createElement","GestureDetector","gesture","View","style","styles","main","onLayout","containerOnBack","containerInFront","animatedProps","overlay","drawerContainer","_default","StyleSheet","create","absoluteFillObject","zIndex","flex","overflow"],"sources":["ReanimatedDrawerLayout.tsx"],"sourcesContent":["// This component is based on RN's DrawerLayoutAndroid API\n// It's cross-compatible with all platforms despite\n// `DrawerLayoutAndroid` only being available on android\n\nimport React, {\n  ReactNode,\n  forwardRef,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useState,\n} from 'react';\n\nimport {\n  StyleSheet,\n  Keyboard,\n  StatusBar,\n  I18nManager,\n  StatusBarAnimation,\n  StyleProp,\n  ViewStyle,\n  LayoutChangeEvent,\n  Platform,\n} from 'react-native';\n\nimport Animated, {\n  Extrapolation,\n  SharedValue,\n  interpolate,\n  runOnJS,\n  useAnimatedProps,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\n\nimport { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../handlers/gestures/GestureDetector';\nimport {\n  UserSelect,\n  ActiveCursor,\n  MouseButton,\n  HitSlop,\n  GestureStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport { PanGestureHandlerEventPayload } from '../handlers/GestureHandlerEventPayload';\n\nconst DRAG_TOSS = 0.05;\n\nexport enum DrawerPosition {\n  LEFT,\n  RIGHT,\n}\n\nexport enum DrawerState {\n  IDLE,\n  DRAGGING,\n  SETTLING,\n}\n\nexport enum DrawerType {\n  FRONT,\n  BACK,\n  SLIDE,\n}\n\nexport enum DrawerLockMode {\n  UNLOCKED,\n  LOCKED_CLOSED,\n  LOCKED_OPEN,\n}\n\nexport enum DrawerKeyboardDismissMode {\n  NONE,\n  ON_DRAG,\n}\n\nexport interface DrawerLayoutProps {\n  /**\n   * This attribute is present in the native android implementation already and is one\n   * of the required params. The gesture handler version of DrawerLayout makes it\n   * possible for the function passed as `renderNavigationView` to take an\n   * Animated value as a parameter that indicates the progress of drawer\n   * opening/closing animation (progress value is 0 when closed and 1 when\n   * opened). This can be used by the drawer component to animated its children\n   * while the drawer is opening or closing.\n   */\n  renderNavigationView: (\n    progressAnimatedValue: SharedValue<number>\n  ) => ReactNode;\n\n  /**\n   * Determines the side from which the drawer will open.\n   */\n  drawerPosition?: DrawerPosition;\n\n  /**\n   * Width of the drawer.\n   */\n  drawerWidth?: number;\n\n  /**\n   * Background color of the drawer.\n   */\n  drawerBackgroundColor?: string;\n\n  /**\n   * Specifies the lock mode of the drawer.\n   * Programatic opening/closing isn't affected by the lock mode. Defaults to `UNLOCKED`.\n   * - `UNLOCKED` - the drawer will respond to gestures.\n   * - `LOCKED_CLOSED` - the drawer will move freely until it settles in a closed position, then the gestures will be disabled.\n   * - `LOCKED_OPEN` - the drawer will move freely until it settles in an opened position, then the gestures will be disabled.\n   */\n  drawerLockMode?: DrawerLockMode;\n\n  /**\n   * Determines if system keyboard should be closed upon dragging the drawer.\n   */\n  keyboardDismissMode?: DrawerKeyboardDismissMode;\n\n  /**\n   * Called when the drawer is closed.\n   */\n  onDrawerClose?: () => void;\n\n  /**\n   * Called when the drawer is opened.\n   */\n  onDrawerOpen?: () => void;\n\n  /**\n   * Called when the status of the drawer changes.\n   */\n  onDrawerStateChanged?: (\n    newState: DrawerState,\n    drawerWillShow: boolean\n  ) => void;\n\n  /**\n   * Type of animation that will play when opening the drawer.\n   */\n  drawerType?: DrawerType;\n\n  /**\n   * Defines how far from the edge of the content view the gesture should\n   * activate.\n   */\n  edgeWidth?: number;\n\n  /**\n   * Minimal distance to swipe before the drawer starts moving.\n   */\n  minSwipeDistance?: number;\n\n  /**\n   * When set to true Drawer component will use\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} API to hide the OS\n   * status bar whenever the drawer is pulled or when its in an \"open\" state.\n   */\n  hideStatusBar?: boolean;\n\n  /**\n   * @default 'slide'\n   *\n   * Can be used when hideStatusBar is set to true and will select the animation\n   * used for hiding/showing the status bar. See\n   * {@link https://reactnative.dev/docs/statusbar StatusBar} documentation for\n   * more details\n   */\n  statusBarAnimation?: StatusBarAnimation;\n\n  /**\n   * @default 'rgba(0, 0, 0, 0.7)'\n   *\n   * Color of the background overlay.\n   * Animated from `0%` to `100%` as the drawer opens.\n   */\n  overlayColor?: string;\n\n  /**\n   * Style wrapping the content.\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Style wrapping the drawer.\n   */\n  drawerContainerStyle?: StyleProp<ViewStyle>;\n\n  /**\n   * Enables two-finger gestures on supported devices, for example iPads with\n   * trackpads. If not enabled the gesture will require click + drag, with\n   * `enableTrackpadTwoFingerGesture` swiping with two fingers will also trigger\n   * the gesture.\n   */\n  enableTrackpadTwoFingerGesture?: boolean;\n\n  onDrawerSlide?: (position: number) => void;\n\n  // Implicit `children` prop has been removed in @types/react^18.0.\n  /**\n   * Elements that will be rendered inside the content view.\n   */\n  children?: ReactNode | ((openValue?: SharedValue<number>) => ReactNode);\n\n  /**\n   * @default 'none'\n   * Sets whether the text inside both the drawer and the context window can be selected.\n   * Values: 'none' | 'text' | 'auto'\n   */\n  userSelect?: UserSelect;\n\n  /**\n   * @default 'auto'\n   * Sets the displayed cursor pictogram when the drawer is being dragged.\n   * Values: see CSS cursor values\n   */\n  activeCursor?: ActiveCursor;\n\n  /**\n   * @default 'MouseButton.LEFT'\n   * Allows to choose which mouse button should underlying pan handler react to.\n   */\n  mouseButton?: MouseButton;\n\n  /**\n   * @default 'false if MouseButton.RIGHT is specified'\n   * Allows to enable/disable context menu.\n   */\n  enableContextMenu?: boolean;\n}\n\nexport type DrawerMovementOption = {\n  initialVelocity?: number;\n  animationSpeed?: number;\n};\n\nexport interface DrawerLayoutMethods {\n  openDrawer: (options?: DrawerMovementOption) => void;\n  closeDrawer: (options?: DrawerMovementOption) => void;\n}\n\nconst defaultProps = {\n  drawerWidth: 200,\n  drawerPosition: DrawerPosition.LEFT,\n  drawerType: DrawerType.FRONT,\n  edgeWidth: 20,\n  minSwipeDistance: 3,\n  overlayColor: 'rgba(0, 0, 0, 0.7)',\n  drawerLockMode: DrawerLockMode.UNLOCKED,\n  enableTrackpadTwoFingerGesture: false,\n  activeCursor: 'auto' as ActiveCursor,\n  mouseButton: MouseButton.LEFT,\n  statusBarAnimation: 'slide' as StatusBarAnimation,\n};\n\nconst DrawerLayout = forwardRef<DrawerLayoutMethods, DrawerLayoutProps>(\n  function DrawerLayout(props: DrawerLayoutProps, ref) {\n    const [containerWidth, setContainerWidth] = useState(0);\n    const [drawerState, setDrawerState] = useState<DrawerState>(\n      DrawerState.IDLE\n    );\n    const [drawerOpened, setDrawerOpened] = useState(false);\n\n    const {\n      drawerPosition = defaultProps.drawerPosition,\n      drawerWidth = defaultProps.drawerWidth,\n      drawerType = defaultProps.drawerType,\n      drawerBackgroundColor,\n      drawerContainerStyle,\n      contentContainerStyle,\n      minSwipeDistance = defaultProps.minSwipeDistance,\n      edgeWidth = defaultProps.edgeWidth,\n      drawerLockMode = defaultProps.drawerLockMode,\n      overlayColor = defaultProps.overlayColor,\n      enableTrackpadTwoFingerGesture = defaultProps.enableTrackpadTwoFingerGesture,\n      activeCursor = defaultProps.activeCursor,\n      mouseButton = defaultProps.mouseButton,\n      statusBarAnimation = defaultProps.statusBarAnimation,\n      hideStatusBar,\n      keyboardDismissMode,\n      userSelect,\n      enableContextMenu,\n      renderNavigationView,\n      onDrawerSlide,\n      onDrawerClose,\n      onDrawerOpen,\n      onDrawerStateChanged,\n    } = props;\n\n    const isFromLeft = drawerPosition === DrawerPosition.LEFT;\n\n    const sideCorrection = isFromLeft ? 1 : -1;\n\n    // While closing the drawer when user starts gesture in the greyed out part of the window,\n    // we want the drawer to follow only once the finger reaches the edge of the drawer.\n    // See the diagram for reference. * = starting finger position, < = current finger position\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|..<*..|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n\n    const openValue = useSharedValue<number>(0);\n\n    useDerivedValue(() => {\n      onDrawerSlide && runOnJS(onDrawerSlide)(openValue.value);\n    }, []);\n\n    const isDrawerOpen = useSharedValue(false);\n\n    const handleContainerLayout = ({ nativeEvent }: LayoutChangeEvent) => {\n      setContainerWidth(nativeEvent.layout.width);\n    };\n\n    const emitStateChanged = useCallback(\n      (newState: DrawerState, drawerWillShow: boolean) => {\n        'worklet';\n        onDrawerStateChanged &&\n          runOnJS(onDrawerStateChanged)?.(newState, drawerWillShow);\n      },\n      [onDrawerStateChanged]\n    );\n\n    const drawerAnimatedProps = useAnimatedProps(() => ({\n      accessibilityViewIsModal: isDrawerOpen.value,\n    }));\n\n    const overlayAnimatedProps = useAnimatedProps(() => ({\n      pointerEvents: isDrawerOpen.value ? ('auto' as const) : ('none' as const),\n    }));\n\n    // While the drawer is hidden, it's hitSlop overflows onto the main view by edgeWidth\n    // This way it can be swiped open even when it's hidden\n    const [edgeHitSlop, setEdgeHitSlop] = useState<HitSlop>(\n      isFromLeft\n        ? { left: 0, width: edgeWidth }\n        : { right: 0, width: edgeWidth }\n    );\n\n    // gestureOrientation is 1 if the gesture is expected to move from left to right and -1 otherwise\n    const gestureOrientation = useMemo(\n      () => sideCorrection * (drawerOpened ? -1 : 1),\n      [sideCorrection, drawerOpened]\n    );\n\n    useEffect(() => {\n      setEdgeHitSlop(\n        isFromLeft\n          ? { left: 0, width: edgeWidth }\n          : { right: 0, width: edgeWidth }\n      );\n    }, [isFromLeft, edgeWidth]);\n\n    const animateDrawer = useCallback(\n      (toValue: number, initialVelocity: number, animationSpeed?: number) => {\n        'worklet';\n        const willShow = toValue !== 0;\n        isDrawerOpen.value = willShow;\n\n        emitStateChanged(DrawerState.SETTLING, willShow);\n        runOnJS(setDrawerState)(DrawerState.SETTLING);\n\n        if (hideStatusBar) {\n          runOnJS(StatusBar.setHidden)(willShow, statusBarAnimation);\n        }\n\n        const normalizedToValue = interpolate(\n          toValue,\n          [0, drawerWidth],\n          [0, 1],\n          Extrapolation.CLAMP\n        );\n\n        const normalizedInitialVelocity = interpolate(\n          initialVelocity,\n          [0, drawerWidth],\n          [0, 1],\n          Extrapolation.CLAMP\n        );\n\n        openValue.value = withSpring(\n          normalizedToValue,\n          {\n            overshootClamping: true,\n            velocity: normalizedInitialVelocity,\n            mass: animationSpeed ? 1 / animationSpeed : 1,\n            damping: 40,\n            stiffness: 500,\n          },\n          (finished) => {\n            if (finished) {\n              emitStateChanged(DrawerState.IDLE, willShow);\n              runOnJS(setDrawerOpened)(willShow);\n              runOnJS(setDrawerState)(DrawerState.IDLE);\n              if (willShow) {\n                onDrawerOpen && runOnJS(onDrawerOpen)?.();\n              } else {\n                onDrawerClose && runOnJS(onDrawerClose)?.();\n              }\n            }\n          }\n        );\n      },\n      [\n        openValue,\n        emitStateChanged,\n        isDrawerOpen,\n        hideStatusBar,\n        onDrawerClose,\n        onDrawerOpen,\n        drawerWidth,\n        statusBarAnimation,\n      ]\n    );\n\n    const handleRelease = useCallback(\n      (event: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {\n        'worklet';\n        let { translationX: dragX, velocityX, x: touchX } = event;\n\n        if (drawerPosition !== DrawerPosition.LEFT) {\n          // See description in _updateAnimatedEvent about why events are flipped\n          // for right-side drawer\n          dragX = -dragX;\n          touchX = containerWidth - touchX;\n          velocityX = -velocityX;\n        }\n\n        const gestureStartX = touchX - dragX;\n        let dragOffsetBasedOnStart = 0;\n\n        if (drawerType === DrawerType.FRONT) {\n          dragOffsetBasedOnStart =\n            gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n        }\n\n        const startOffsetX =\n          dragX +\n          dragOffsetBasedOnStart +\n          (isDrawerOpen.value ? drawerWidth : 0);\n\n        const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n\n        const shouldOpen = projOffsetX > drawerWidth / 2;\n\n        if (shouldOpen) {\n          animateDrawer(drawerWidth, velocityX);\n        } else {\n          animateDrawer(0, velocityX);\n        }\n      },\n      [\n        animateDrawer,\n        containerWidth,\n        drawerPosition,\n        drawerType,\n        drawerWidth,\n        isDrawerOpen,\n      ]\n    );\n\n    const openDrawer = useCallback(\n      (options: DrawerMovementOption = {}) => {\n        'worklet';\n        animateDrawer(\n          drawerWidth,\n          options.initialVelocity ?? 0,\n          options.animationSpeed\n        );\n      },\n      [animateDrawer, drawerWidth]\n    );\n\n    const closeDrawer = useCallback(\n      (options: DrawerMovementOption = {}) => {\n        'worklet';\n        animateDrawer(0, options.initialVelocity ?? 0, options.animationSpeed);\n      },\n      [animateDrawer]\n    );\n\n    const overlayDismissGesture = useMemo(\n      () =>\n        Gesture.Tap()\n          .maxDistance(25)\n          .onEnd(() => {\n            if (\n              isDrawerOpen.value &&\n              drawerLockMode !== DrawerLockMode.LOCKED_OPEN\n            ) {\n              closeDrawer();\n            }\n          }),\n      [closeDrawer, isDrawerOpen, drawerLockMode]\n    );\n\n    const overlayAnimatedStyle = useAnimatedStyle(() => ({\n      opacity: openValue.value,\n      backgroundColor: overlayColor,\n    }));\n\n    const fillHitSlop = useMemo(\n      () => (isFromLeft ? { left: drawerWidth } : { right: drawerWidth }),\n      [drawerWidth, isFromLeft]\n    );\n\n    const panGesture = useMemo(() => {\n      return Gesture.Pan()\n        .activeCursor(activeCursor)\n        .mouseButton(mouseButton)\n        .hitSlop(drawerOpened ? fillHitSlop : edgeHitSlop)\n        .minDistance(drawerOpened ? 100 : 0)\n        .activeOffsetX(gestureOrientation * minSwipeDistance)\n        .failOffsetY([-15, 15])\n        .simultaneousWithExternalGesture(overlayDismissGesture)\n        .enableTrackpadTwoFingerGesture(enableTrackpadTwoFingerGesture)\n        .enabled(\n          drawerState !== DrawerState.SETTLING &&\n            (drawerOpened\n              ? drawerLockMode !== DrawerLockMode.LOCKED_OPEN\n              : drawerLockMode !== DrawerLockMode.LOCKED_CLOSED)\n        )\n        .onStart(() => {\n          emitStateChanged(DrawerState.DRAGGING, false);\n          runOnJS(setDrawerState)(DrawerState.DRAGGING);\n          if (keyboardDismissMode === DrawerKeyboardDismissMode.ON_DRAG) {\n            runOnJS(Keyboard.dismiss)();\n          }\n          if (hideStatusBar) {\n            runOnJS(StatusBar.setHidden)(true, statusBarAnimation);\n          }\n        })\n        .onUpdate((event) => {\n          const startedOutsideTranslation = isFromLeft\n            ? interpolate(\n                event.x,\n                [0, drawerWidth, drawerWidth + 1],\n                [0, drawerWidth, drawerWidth]\n              )\n            : interpolate(\n                event.x - containerWidth,\n                [-drawerWidth - 1, -drawerWidth, 0],\n                [drawerWidth, drawerWidth, 0]\n              );\n\n          const startedInsideTranslation =\n            sideCorrection *\n            (event.translationX +\n              (drawerOpened ? drawerWidth * -gestureOrientation : 0));\n\n          const adjustedTranslation = Math.max(\n            drawerOpened ? startedOutsideTranslation : 0,\n            startedInsideTranslation\n          );\n\n          openValue.value = interpolate(\n            adjustedTranslation,\n            [-drawerWidth, 0, drawerWidth],\n            [1, 0, 1],\n            Extrapolation.CLAMP\n          );\n        })\n        .onEnd(handleRelease);\n    }, [\n      drawerLockMode,\n      openValue,\n      drawerWidth,\n      emitStateChanged,\n      gestureOrientation,\n      handleRelease,\n      edgeHitSlop,\n      fillHitSlop,\n      minSwipeDistance,\n      hideStatusBar,\n      keyboardDismissMode,\n      overlayDismissGesture,\n      drawerOpened,\n      isFromLeft,\n      containerWidth,\n      sideCorrection,\n      drawerState,\n      activeCursor,\n      enableTrackpadTwoFingerGesture,\n      mouseButton,\n      statusBarAnimation,\n    ]);\n\n    // When using RTL, row and row-reverse flex directions are flipped.\n    const reverseContentDirection = I18nManager.isRTL\n      ? isFromLeft\n      : !isFromLeft;\n\n    const dynamicDrawerStyles = {\n      backgroundColor: drawerBackgroundColor,\n      width: drawerWidth,\n    };\n\n    const containerStyles = useAnimatedStyle(() => {\n      if (drawerType === DrawerType.FRONT) {\n        return {};\n      }\n\n      return {\n        transform: [\n          {\n            translateX: interpolate(\n              openValue.value,\n              [0, 1],\n              [0, drawerWidth * sideCorrection],\n              Extrapolation.CLAMP\n            ),\n          },\n        ],\n      };\n    });\n\n    const drawerAnimatedStyle = useAnimatedStyle(() => {\n      const closedDrawerOffset = drawerWidth * -sideCorrection;\n      const isBack = drawerType === DrawerType.BACK;\n      const isIdle = drawerState === DrawerState.IDLE;\n\n      if (isBack) {\n        return {\n          transform: [{ translateX: 0 }],\n          flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n        };\n      }\n\n      let translateX = 0;\n\n      if (isIdle) {\n        translateX = drawerOpened ? 0 : closedDrawerOffset;\n      } else {\n        translateX = interpolate(\n          openValue.value,\n          [0, 1],\n          [closedDrawerOffset, 0],\n          Extrapolation.CLAMP\n        );\n      }\n\n      return {\n        transform: [{ translateX }],\n        flexDirection: reverseContentDirection ? 'row-reverse' : 'row',\n      };\n    });\n\n    const containerAnimatedProps = useAnimatedProps(() => ({\n      importantForAccessibility:\n        Platform.OS === 'android'\n          ? isDrawerOpen.value\n            ? ('no-hide-descendants' as const)\n            : ('yes' as const)\n          : undefined,\n    }));\n\n    const children =\n      typeof props.children === 'function'\n        ? props.children(openValue) // renderer function\n        : props.children;\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        openDrawer,\n        closeDrawer,\n      }),\n      [openDrawer, closeDrawer]\n    );\n\n    return (\n      <GestureDetector\n        gesture={panGesture}\n        userSelect={userSelect}\n        enableContextMenu={enableContextMenu}>\n        <Animated.View style={styles.main} onLayout={handleContainerLayout}>\n          <GestureDetector gesture={overlayDismissGesture}>\n            <Animated.View\n              style={[\n                drawerType === DrawerType.FRONT\n                  ? styles.containerOnBack\n                  : styles.containerInFront,\n                containerStyles,\n                contentContainerStyle,\n              ]}\n              animatedProps={containerAnimatedProps}>\n              {children}\n              <Animated.View\n                animatedProps={overlayAnimatedProps}\n                style={[styles.overlay, overlayAnimatedStyle]}\n              />\n            </Animated.View>\n          </GestureDetector>\n          <Animated.View\n            pointerEvents=\"box-none\"\n            animatedProps={drawerAnimatedProps}\n            style={[\n              styles.drawerContainer,\n              drawerAnimatedStyle,\n              drawerContainerStyle,\n            ]}>\n            <Animated.View style={dynamicDrawerStyles}>\n              {renderNavigationView(openValue)}\n            </Animated.View>\n          </Animated.View>\n        </Animated.View>\n      </GestureDetector>\n    );\n  }\n);\n\nexport default DrawerLayout;\n\nconst styles = StyleSheet.create({\n  drawerContainer: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1001,\n    flexDirection: 'row',\n  },\n  containerInFront: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1002,\n  },\n  containerOnBack: {\n    ...StyleSheet.absoluteFillObject,\n  },\n  main: {\n    flex: 1,\n    zIndex: 0,\n    overflow: 'hidden',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    zIndex: 1000,\n  },\n});\n"],"mappings":";;;;;;AAIA,IAAAA,MAAA,GAAAC,uBAAA,CAAAC,OAAA;AAUA,IAAAC,YAAA,GAAAD,OAAA;AAYA,IAAAE,sBAAA,GAAAH,uBAAA,CAAAC,OAAA;AAYA,IAAAG,eAAA,GAAAH,OAAA;AACA,IAAAI,gBAAA,GAAAJ,OAAA;AACA,IAAAK,qBAAA,GAAAL,OAAA;AAM0C,SAAAM,yBAAAC,CAAA,6BAAAC,OAAA,mBAAAC,CAAA,OAAAD,OAAA,IAAAE,CAAA,OAAAF,OAAA,YAAAF,wBAAA,YAAAA,CAAAC,CAAA,WAAAA,CAAA,GAAAG,CAAA,GAAAD,CAAA,KAAAF,CAAA;AAAA,SAAAR,wBAAAQ,CAAA,EAAAE,CAAA,SAAAA,CAAA,IAAAF,CAAA,IAAAA,CAAA,CAAAI,UAAA,SAAAJ,CAAA,eAAAA,CAAA,uBAAAA,CAAA,yBAAAA,CAAA,WAAAK,OAAA,EAAAL,CAAA,QAAAG,CAAA,GAAAJ,wBAAA,CAAAG,CAAA,OAAAC,CAAA,IAAAA,CAAA,CAAAG,GAAA,CAAAN,CAAA,UAAAG,CAAA,CAAAI,GAAA,CAAAP,CAAA,OAAAQ,CAAA,KAAAC,SAAA,UAAAC,CAAA,GAAAC,MAAA,CAAAC,cAAA,IAAAD,MAAA,CAAAE,wBAAA,WAAAC,CAAA,IAAAd,CAAA,oBAAAc,CAAA,OAAAC,cAAA,CAAAC,IAAA,CAAAhB,CAAA,EAAAc,CAAA,SAAAG,CAAA,GAAAP,CAAA,GAAAC,MAAA,CAAAE,wBAAA,CAAAb,CAAA,EAAAc,CAAA,UAAAG,CAAA,KAAAA,CAAA,CAAAV,GAAA,IAAAU,CAAA,CAAAC,GAAA,IAAAP,MAAA,CAAAC,cAAA,CAAAJ,CAAA,EAAAM,CAAA,EAAAG,CAAA,IAAAT,CAAA,CAAAM,CAAA,IAAAd,CAAA,CAAAc,CAAA,YAAAN,CAAA,CAAAH,OAAA,GAAAL,CAAA,EAAAG,CAAA,IAAAA,CAAA,CAAAe,GAAA,CAAAlB,CAAA,EAAAQ,CAAA,GAAAA,CAAA;AA9C1C;AACA;AACA;;AA+CA,MAAMW,SAAS,GAAG,IAAI;AAAC,IAEXC,cAAc,GAAAC,OAAA,CAAAD,cAAA,0BAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;AAAA,IAKdE,WAAW,GAAAD,OAAA,CAAAC,WAAA,0BAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAAA,IAMXC,UAAU,GAAAF,OAAA,CAAAE,UAAA,0BAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAVA,UAAU,CAAVA,UAAU;EAAA,OAAVA,UAAU;AAAA;AAAA,IAMVC,cAAc,GAAAH,OAAA,CAAAG,cAAA,0BAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAdA,cAAc,CAAdA,cAAc;EAAA,OAAdA,cAAc;AAAA;AAAA,IAMdC,yBAAyB,GAAAJ,OAAA,CAAAI,yBAAA,0BAAzBA,yBAAyB;EAAzBA,yBAAyB,CAAzBA,yBAAyB;EAAzBA,yBAAyB,CAAzBA,yBAAyB;EAAA,OAAzBA,yBAAyB;AAAA;AA0KrC,MAAMC,YAAY,GAAG;EACnBC,WAAW,EAAE,GAAG;EAChBC,cAAc,EAAER,cAAc,CAACS,IAAI;EACnCC,UAAU,EAAEP,UAAU,CAACQ,KAAK;EAC5BC,SAAS,EAAE,EAAE;EACbC,gBAAgB,EAAE,CAAC;EACnBC,YAAY,EAAE,oBAAoB;EAClCC,cAAc,EAAEX,cAAc,CAACY,QAAQ;EACvCC,8BAA8B,EAAE,KAAK;EACrCC,YAAY,EAAE,MAAsB;EACpCC,WAAW,EAAEC,iCAAW,CAACX,IAAI;EAC7BY,kBAAkB,EAAE;AACtB,CAAC;AAED,MAAMC,YAAY,gBAAG,IAAAC,iBAAU,EAC7B,SAASD,YAAYA,CAACE,KAAwB,EAAEC,GAAG,EAAE;EACnD,MAAM,CAACC,cAAc,EAAEC,iBAAiB,CAAC,GAAG,IAAAC,eAAQ,EAAC,CAAC,CAAC;EACvD,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAG,IAAAF,eAAQ,EAC5C1B,WAAW,CAAC6B,IACd,CAAC;EACD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAG,IAAAL,eAAQ,EAAC,KAAK,CAAC;EAEvD,MAAM;IACJpB,cAAc,GAAGF,YAAY,CAACE,cAAc;IAC5CD,WAAW,GAAGD,YAAY,CAACC,WAAW;IACtCG,UAAU,GAAGJ,YAAY,CAACI,UAAU;IACpCwB,qBAAqB;IACrBC,oBAAoB;IACpBC,qBAAqB;IACrBvB,gBAAgB,GAAGP,YAAY,CAACO,gBAAgB;IAChDD,SAAS,GAAGN,YAAY,CAACM,SAAS;IAClCG,cAAc,GAAGT,YAAY,CAACS,cAAc;IAC5CD,YAAY,GAAGR,YAAY,CAACQ,YAAY;IACxCG,8BAA8B,GAAGX,YAAY,CAACW,8BAA8B;IAC5EC,YAAY,GAAGZ,YAAY,CAACY,YAAY;IACxCC,WAAW,GAAGb,YAAY,CAACa,WAAW;IACtCE,kBAAkB,GAAGf,YAAY,CAACe,kBAAkB;IACpDgB,aAAa;IACbC,mBAAmB;IACnBC,UAAU;IACVC,iBAAiB;IACjBC,oBAAoB;IACpBC,aAAa;IACbC,aAAa;IACbC,YAAY;IACZC;EACF,CAAC,GAAGrB,KAAK;EAET,MAAMsB,UAAU,GAAGtC,cAAc,KAAKR,cAAc,CAACS,IAAI;EAEzD,MAAMsC,cAAc,GAAGD,UAAU,GAAG,CAAC,GAAG,CAAC,CAAC;;EAE1C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAME,SAAS,GAAG,IAAAC,qCAAc,EAAS,CAAC,CAAC;EAE3C,IAAAC,sCAAe,EAAC,MAAM;IACpBR,aAAa,IAAI,IAAAS,8BAAO,EAACT,aAAa,CAAC,CAACM,SAAS,CAACI,KAAK,CAAC;EAC1D,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAG,IAAAJ,qCAAc,EAAC,KAAK,CAAC;EAE1C,MAAMK,qBAAqB,GAAGA,CAAC;IAAEC;EAA+B,CAAC,KAAK;IACpE5B,iBAAiB,CAAC4B,WAAW,CAACC,MAAM,CAACC,KAAK,CAAC;EAC7C,CAAC;EAED,MAAMC,gBAAgB,GAAG,IAAAC,kBAAW,EAClC,CAACC,QAAqB,EAAEC,cAAuB,KAAK;IAClD,SAAS;;IAAC,IAAAC,QAAA;IACVjB,oBAAoB,MAAAiB,QAAA,GAClB,IAAAX,8BAAO,EAACN,oBAAoB,CAAC,cAAAiB,QAAA,uBAA7BA,QAAA,CAAgCF,QAAQ,EAAEC,cAAc,CAAC;EAC7D,CAAC,EACD,CAAChB,oBAAoB,CACvB,CAAC;EAED,MAAMkB,mBAAmB,GAAG,IAAAC,uCAAgB,EAAC,OAAO;IAClDC,wBAAwB,EAAEZ,YAAY,CAACD;EACzC,CAAC,CAAC,CAAC;EAEH,MAAMc,oBAAoB,GAAG,IAAAF,uCAAgB,EAAC,OAAO;IACnDG,aAAa,EAAEd,YAAY,CAACD,KAAK,GAAI,MAAM,GAAc;EAC3D,CAAC,CAAC,CAAC;;EAEH;EACA;EACA,MAAM,CAACgB,WAAW,EAAEC,cAAc,CAAC,GAAG,IAAAzC,eAAQ,EAC5CkB,UAAU,GACN;IAAEwB,IAAI,EAAE,CAAC;IAAEb,KAAK,EAAE7C;EAAU,CAAC,GAC7B;IAAE2D,KAAK,EAAE,CAAC;IAAEd,KAAK,EAAE7C;EAAU,CACnC,CAAC;;EAED;EACA,MAAM4D,kBAAkB,GAAG,IAAAC,cAAO,EAChC,MAAM1B,cAAc,IAAIf,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAC9C,CAACe,cAAc,EAAEf,YAAY,CAC/B,CAAC;EAED,IAAA0C,gBAAS,EAAC,MAAM;IACdL,cAAc,CACZvB,UAAU,GACN;MAAEwB,IAAI,EAAE,CAAC;MAAEb,KAAK,EAAE7C;IAAU,CAAC,GAC7B;MAAE2D,KAAK,EAAE,CAAC;MAAEd,KAAK,EAAE7C;IAAU,CACnC,CAAC;EACH,CAAC,EAAE,CAACkC,UAAU,EAAElC,SAAS,CAAC,CAAC;EAE3B,MAAM+D,aAAa,GAAG,IAAAhB,kBAAW,EAC/B,CAACiB,OAAe,EAAEC,eAAuB,EAAEC,cAAuB,KAAK;IACrE,SAAS;;IACT,MAAMC,QAAQ,GAAGH,OAAO,KAAK,CAAC;IAC9BvB,YAAY,CAACD,KAAK,GAAG2B,QAAQ;IAE7BrB,gBAAgB,CAACxD,WAAW,CAAC8E,QAAQ,EAAED,QAAQ,CAAC;IAChD,IAAA5B,8BAAO,EAACrB,cAAc,CAAC,CAAC5B,WAAW,CAAC8E,QAAQ,CAAC;IAE7C,IAAI3C,aAAa,EAAE;MACjB,IAAAc,8BAAO,EAAC8B,sBAAS,CAACC,SAAS,CAAC,CAACH,QAAQ,EAAE1D,kBAAkB,CAAC;IAC5D;IAEA,MAAM8D,iBAAiB,GAAG,IAAAC,kCAAW,EACnCR,OAAO,EACP,CAAC,CAAC,EAAErE,WAAW,CAAC,EAChB,CAAC,CAAC,EAAE,CAAC,CAAC,EACN8E,oCAAa,CAACC,KAChB,CAAC;IAED,MAAMC,yBAAyB,GAAG,IAAAH,kCAAW,EAC3CP,eAAe,EACf,CAAC,CAAC,EAAEtE,WAAW,CAAC,EAChB,CAAC,CAAC,EAAE,CAAC,CAAC,EACN8E,oCAAa,CAACC,KAChB,CAAC;IAEDtC,SAAS,CAACI,KAAK,GAAG,IAAAoC,iCAAU,EAC1BL,iBAAiB,EACjB;MACEM,iBAAiB,EAAE,IAAI;MACvBC,QAAQ,EAAEH,yBAAyB;MACnCI,IAAI,EAAEb,cAAc,GAAG,CAAC,GAAGA,cAAc,GAAG,CAAC;MAC7Cc,OAAO,EAAE,EAAE;MACXC,SAAS,EAAE;IACb,CAAC,EACAC,QAAQ,IAAK;MACZ,IAAIA,QAAQ,EAAE;QACZpC,gBAAgB,CAACxD,WAAW,CAAC6B,IAAI,EAAEgD,QAAQ,CAAC;QAC5C,IAAA5B,8BAAO,EAAClB,eAAe,CAAC,CAAC8C,QAAQ,CAAC;QAClC,IAAA5B,8BAAO,EAACrB,cAAc,CAAC,CAAC5B,WAAW,CAAC6B,IAAI,CAAC;QACzC,IAAIgD,QAAQ,EAAE;UAAA,IAAAgB,SAAA;UACZnD,YAAY,MAAAmD,SAAA,GAAI,IAAA5C,8BAAO,EAACP,YAAY,CAAC,cAAAmD,SAAA,uBAArBA,SAAA,CAAwB,CAAC;QAC3C,CAAC,MAAM;UAAA,IAAAC,SAAA;UACLrD,aAAa,MAAAqD,SAAA,GAAI,IAAA7C,8BAAO,EAACR,aAAa,CAAC,cAAAqD,SAAA,uBAAtBA,SAAA,CAAyB,CAAC;QAC7C;MACF;IACF,CACF,CAAC;EACH,CAAC,EACD,CACEhD,SAAS,EACTU,gBAAgB,EAChBL,YAAY,EACZhB,aAAa,EACbM,aAAa,EACbC,YAAY,EACZrC,WAAW,EACXc,kBAAkB,CAEtB,CAAC;EAED,MAAM4E,aAAa,GAAG,IAAAtC,kBAAW,EAC9BuC,KAA6D,IAAK;IACjE,SAAS;;IACT,IAAI;MAAEC,YAAY,EAAEC,KAAK;MAAEC,SAAS;MAAEC,CAAC,EAAEC;IAAO,CAAC,GAAGL,KAAK;IAEzD,IAAI1F,cAAc,KAAKR,cAAc,CAACS,IAAI,EAAE;MAC1C;MACA;MACA2F,KAAK,GAAG,CAACA,KAAK;MACdG,MAAM,GAAG7E,cAAc,GAAG6E,MAAM;MAChCF,SAAS,GAAG,CAACA,SAAS;IACxB;IAEA,MAAMG,aAAa,GAAGD,MAAM,GAAGH,KAAK;IACpC,IAAIK,sBAAsB,GAAG,CAAC;IAE9B,IAAI/F,UAAU,KAAKP,UAAU,CAACQ,KAAK,EAAE;MACnC8F,sBAAsB,GACpBD,aAAa,GAAGjG,WAAW,GAAGiG,aAAa,GAAGjG,WAAW,GAAG,CAAC;IACjE;IAEA,MAAMmG,YAAY,GAChBN,KAAK,GACLK,sBAAsB,IACrBpD,YAAY,CAACD,KAAK,GAAG7C,WAAW,GAAG,CAAC,CAAC;IAExC,MAAMoG,WAAW,GAAGD,YAAY,GAAG3G,SAAS,GAAGsG,SAAS;IAExD,MAAMO,UAAU,GAAGD,WAAW,GAAGpG,WAAW,GAAG,CAAC;IAEhD,IAAIqG,UAAU,EAAE;MACdjC,aAAa,CAACpE,WAAW,EAAE8F,SAAS,CAAC;IACvC,CAAC,MAAM;MACL1B,aAAa,CAAC,CAAC,EAAE0B,SAAS,CAAC;IAC7B;EACF,CAAC,EACD,CACE1B,aAAa,EACbjD,cAAc,EACdlB,cAAc,EACdE,UAAU,EACVH,WAAW,EACX8C,YAAY,CAEhB,CAAC;EAED,MAAMwD,UAAU,GAAG,IAAAlD,kBAAW,EAC5B,CAACmD,OAA6B,GAAG,CAAC,CAAC,KAAK;IACtC,SAAS;;IAAC,IAAAC,qBAAA;IACVpC,aAAa,CACXpE,WAAW,GAAAwG,qBAAA,GACXD,OAAO,CAACjC,eAAe,cAAAkC,qBAAA,cAAAA,qBAAA,GAAI,CAAC,EAC5BD,OAAO,CAAChC,cACV,CAAC;EACH,CAAC,EACD,CAACH,aAAa,EAAEpE,WAAW,CAC7B,CAAC;EAED,MAAMyG,WAAW,GAAG,IAAArD,kBAAW,EAC7B,CAACmD,OAA6B,GAAG,CAAC,CAAC,KAAK;IACtC,SAAS;;IAAC,IAAAG,sBAAA;IACVtC,aAAa,CAAC,CAAC,GAAAsC,sBAAA,GAAEH,OAAO,CAACjC,eAAe,cAAAoC,sBAAA,cAAAA,sBAAA,GAAI,CAAC,EAAEH,OAAO,CAAChC,cAAc,CAAC;EACxE,CAAC,EACD,CAACH,aAAa,CAChB,CAAC;EAED,MAAMuC,qBAAqB,GAAG,IAAAzC,cAAO,EACnC,MACE0C,8BAAO,CAACC,GAAG,CAAC,CAAC,CACVC,WAAW,CAAC,EAAE,CAAC,CACfC,KAAK,CAAC,MAAM;IACX,IACEjE,YAAY,CAACD,KAAK,IAClBrC,cAAc,KAAKX,cAAc,CAACmH,WAAW,EAC7C;MACAP,WAAW,CAAC,CAAC;IACf;EACF,CAAC,CAAC,EACN,CAACA,WAAW,EAAE3D,YAAY,EAAEtC,cAAc,CAC5C,CAAC;EAED,MAAMyG,oBAAoB,GAAG,IAAAC,uCAAgB,EAAC,OAAO;IACnDC,OAAO,EAAE1E,SAAS,CAACI,KAAK;IACxBuE,eAAe,EAAE7G;EACnB,CAAC,CAAC,CAAC;EAEH,MAAM8G,WAAW,GAAG,IAAAnD,cAAO,EACzB,MAAO3B,UAAU,GAAG;IAAEwB,IAAI,EAAE/D;EAAY,CAAC,GAAG;IAAEgE,KAAK,EAAEhE;EAAY,CAAE,EACnE,CAACA,WAAW,EAAEuC,UAAU,CAC1B,CAAC;EAED,MAAM+E,UAAU,GAAG,IAAApD,cAAO,EAAC,MAAM;IAC/B,OAAO0C,8BAAO,CAACW,GAAG,CAAC,CAAC,CACjB5G,YAAY,CAACA,YAAY,CAAC,CAC1BC,WAAW,CAACA,WAAW,CAAC,CACxB4G,OAAO,CAAC/F,YAAY,GAAG4F,WAAW,GAAGxD,WAAW,CAAC,CACjD4D,WAAW,CAAChG,YAAY,GAAG,GAAG,GAAG,CAAC,CAAC,CACnCiG,aAAa,CAACzD,kBAAkB,GAAG3D,gBAAgB,CAAC,CACpDqH,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CACtBC,+BAA+B,CAACjB,qBAAqB,CAAC,CACtDjG,8BAA8B,CAACA,8BAA8B,CAAC,CAC9DmH,OAAO,CACNvG,WAAW,KAAK3B,WAAW,CAAC8E,QAAQ,KACjChD,YAAY,GACTjB,cAAc,KAAKX,cAAc,CAACmH,WAAW,GAC7CxG,cAAc,KAAKX,cAAc,CAACiI,aAAa,CACvD,CAAC,CACAC,OAAO,CAAC,MAAM;MACb5E,gBAAgB,CAACxD,WAAW,CAACqI,QAAQ,EAAE,KAAK,CAAC;MAC7C,IAAApF,8BAAO,EAACrB,cAAc,CAAC,CAAC5B,WAAW,CAACqI,QAAQ,CAAC;MAC7C,IAAIjG,mBAAmB,KAAKjC,yBAAyB,CAACmI,OAAO,EAAE;QAC7D,IAAArF,8BAAO,EAACsF,qBAAQ,CAACC,OAAO,CAAC,CAAC,CAAC;MAC7B;MACA,IAAIrG,aAAa,EAAE;QACjB,IAAAc,8BAAO,EAAC8B,sBAAS,CAACC,SAAS,CAAC,CAAC,IAAI,EAAE7D,kBAAkB,CAAC;MACxD;IACF,CAAC,CAAC,CACDsH,QAAQ,CAAEzC,KAAK,IAAK;MACnB,MAAM0C,yBAAyB,GAAG9F,UAAU,GACxC,IAAAsC,kCAAW,EACTc,KAAK,CAACI,CAAC,EACP,CAAC,CAAC,EAAE/F,WAAW,EAAEA,WAAW,GAAG,CAAC,CAAC,EACjC,CAAC,CAAC,EAAEA,WAAW,EAAEA,WAAW,CAC9B,CAAC,GACD,IAAA6E,kCAAW,EACTc,KAAK,CAACI,CAAC,GAAG5E,cAAc,EACxB,CAAC,CAACnB,WAAW,GAAG,CAAC,EAAE,CAACA,WAAW,EAAE,CAAC,CAAC,EACnC,CAACA,WAAW,EAAEA,WAAW,EAAE,CAAC,CAC9B,CAAC;MAEL,MAAMsI,wBAAwB,GAC5B9F,cAAc,IACbmD,KAAK,CAACC,YAAY,IAChBnE,YAAY,GAAGzB,WAAW,GAAG,CAACiE,kBAAkB,GAAG,CAAC,CAAC,CAAC;MAE3D,MAAMsE,mBAAmB,GAAGC,IAAI,CAACC,GAAG,CAClChH,YAAY,GAAG4G,yBAAyB,GAAG,CAAC,EAC5CC,wBACF,CAAC;MAED7F,SAAS,CAACI,KAAK,GAAG,IAAAgC,kCAAW,EAC3B0D,mBAAmB,EACnB,CAAC,CAACvI,WAAW,EAAE,CAAC,EAAEA,WAAW,CAAC,EAC9B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EACT8E,oCAAa,CAACC,KAChB,CAAC;IACH,CAAC,CAAC,CACDgC,KAAK,CAACrB,aAAa,CAAC;EACzB,CAAC,EAAE,CACDlF,cAAc,EACdiC,SAAS,EACTzC,WAAW,EACXmD,gBAAgB,EAChBc,kBAAkB,EAClByB,aAAa,EACb7B,WAAW,EACXwD,WAAW,EACX/G,gBAAgB,EAChBwB,aAAa,EACbC,mBAAmB,EACnB4E,qBAAqB,EACrBlF,YAAY,EACZc,UAAU,EACVpB,cAAc,EACdqB,cAAc,EACdlB,WAAW,EACXX,YAAY,EACZD,8BAA8B,EAC9BE,WAAW,EACXE,kBAAkB,CACnB,CAAC;;EAEF;EACA,MAAM4H,uBAAuB,GAAGC,wBAAW,CAACC,KAAK,GAC7CrG,UAAU,GACV,CAACA,UAAU;EAEf,MAAMsG,mBAAmB,GAAG;IAC1BzB,eAAe,EAAEzF,qBAAqB;IACtCuB,KAAK,EAAElD;EACT,CAAC;EAED,MAAM8I,eAAe,GAAG,IAAA5B,uCAAgB,EAAC,MAAM;IAC7C,IAAI/G,UAAU,KAAKP,UAAU,CAACQ,KAAK,EAAE;MACnC,OAAO,CAAC,CAAC;IACX;IAEA,OAAO;MACL2I,SAAS,EAAE,CACT;QACEC,UAAU,EAAE,IAAAnE,kCAAW,EACrBpC,SAAS,CAACI,KAAK,EACf,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAAC,CAAC,EAAE7C,WAAW,GAAGwC,cAAc,CAAC,EACjCsC,oCAAa,CAACC,KAChB;MACF,CAAC;IAEL,CAAC;EACH,CAAC,CAAC;EAEF,MAAMkE,mBAAmB,GAAG,IAAA/B,uCAAgB,EAAC,MAAM;IACjD,MAAMgC,kBAAkB,GAAGlJ,WAAW,GAAG,CAACwC,cAAc;IACxD,MAAM2G,MAAM,GAAGhJ,UAAU,KAAKP,UAAU,CAACwJ,IAAI;IAC7C,MAAMC,MAAM,GAAG/H,WAAW,KAAK3B,WAAW,CAAC6B,IAAI;IAE/C,IAAI2H,MAAM,EAAE;MACV,OAAO;QACLJ,SAAS,EAAE,CAAC;UAAEC,UAAU,EAAE;QAAE,CAAC,CAAC;QAC9BM,aAAa,EAAEZ,uBAAuB,GAAG,aAAa,GAAG;MAC3D,CAAC;IACH;IAEA,IAAIM,UAAU,GAAG,CAAC;IAElB,IAAIK,MAAM,EAAE;MACVL,UAAU,GAAGvH,YAAY,GAAG,CAAC,GAAGyH,kBAAkB;IACpD,CAAC,MAAM;MACLF,UAAU,GAAG,IAAAnE,kCAAW,EACtBpC,SAAS,CAACI,KAAK,EACf,CAAC,CAAC,EAAE,CAAC,CAAC,EACN,CAACqG,kBAAkB,EAAE,CAAC,CAAC,EACvBpE,oCAAa,CAACC,KAChB,CAAC;IACH;IAEA,OAAO;MACLgE,SAAS,EAAE,CAAC;QAAEC;MAAW,CAAC,CAAC;MAC3BM,aAAa,EAAEZ,uBAAuB,GAAG,aAAa,GAAG;IAC3D,CAAC;EACH,CAAC,CAAC;EAEF,MAAMa,sBAAsB,GAAG,IAAA9F,uCAAgB,EAAC,OAAO;IACrD+F,yBAAyB,EACvBC,qBAAQ,CAACC,EAAE,KAAK,SAAS,GACrB5G,YAAY,CAACD,KAAK,GACf,qBAAqB,GACrB,KAAe,GAClB8G;EACR,CAAC,CAAC,CAAC;EAEH,MAAMC,QAAQ,GACZ,OAAO3I,KAAK,CAAC2I,QAAQ,KAAK,UAAU,GAChC3I,KAAK,CAAC2I,QAAQ,CAACnH,SAAS,CAAC,CAAC;EAAA,EAC1BxB,KAAK,CAAC2I,QAAQ;EAEpB,IAAAC,0BAAmB,EACjB3I,GAAG,EACH,OAAO;IACLoF,UAAU;IACVG;EACF,CAAC,CAAC,EACF,CAACH,UAAU,EAAEG,WAAW,CAC1B,CAAC;EAED,oBACE7I,MAAA,CAAAc,OAAA,CAAAoL,aAAA,CAAC5L,gBAAA,CAAA6L,eAAe;IACdC,OAAO,EAAE1C,UAAW;IACpBtF,UAAU,EAAEA,UAAW;IACvBC,iBAAiB,EAAEA;EAAkB,gBACrCrE,MAAA,CAAAc,OAAA,CAAAoL,aAAA,CAAC9L,sBAAA,CAAAU,OAAQ,CAACuL,IAAI;IAACC,KAAK,EAAEC,MAAM,CAACC,IAAK;IAACC,QAAQ,EAAEtH;EAAsB,gBACjEnF,MAAA,CAAAc,OAAA,CAAAoL,aAAA,CAAC5L,gBAAA,CAAA6L,eAAe;IAACC,OAAO,EAAErD;EAAsB,gBAC9C/I,MAAA,CAAAc,OAAA,CAAAoL,aAAA,CAAC9L,sBAAA,CAAAU,OAAQ,CAACuL,IAAI;IACZC,KAAK,EAAE,CACL/J,UAAU,KAAKP,UAAU,CAACQ,KAAK,GAC3B+J,MAAM,CAACG,eAAe,GACtBH,MAAM,CAACI,gBAAgB,EAC3BzB,eAAe,EACfjH,qBAAqB,CACrB;IACF2I,aAAa,EAAEjB;EAAuB,GACrCK,QAAQ,eACThM,MAAA,CAAAc,OAAA,CAAAoL,aAAA,CAAC9L,sBAAA,CAAAU,OAAQ,CAACuL,IAAI;IACZO,aAAa,EAAE7G,oBAAqB;IACpCuG,KAAK,EAAE,CAACC,MAAM,CAACM,OAAO,EAAExD,oBAAoB;EAAE,CAC/C,CACY,CACA,CAAC,eAClBrJ,MAAA,CAAAc,OAAA,CAAAoL,aAAA,CAAC9L,sBAAA,CAAAU,OAAQ,CAACuL,IAAI;IACZrG,aAAa,EAAC,UAAU;IACxB4G,aAAa,EAAEhH,mBAAoB;IACnC0G,KAAK,EAAE,CACLC,MAAM,CAACO,eAAe,EACtBzB,mBAAmB,EACnBrH,oBAAoB;EACpB,gBACFhE,MAAA,CAAAc,OAAA,CAAAoL,aAAA,CAAC9L,sBAAA,CAAAU,OAAQ,CAACuL,IAAI;IAACC,KAAK,EAAErB;EAAoB,GACvC3G,oBAAoB,CAACO,SAAS,CAClB,CACF,CACF,CACA,CAAC;AAEtB,CACF,CAAC;AAAC,IAAAkI,QAAA,GAAAjL,OAAA,CAAAhB,OAAA,GAEaqC,YAAY;AAE3B,MAAMoJ,MAAM,GAAGS,uBAAU,CAACC,MAAM,CAAC;EAC/BH,eAAe,EAAE;IACf,GAAGE,uBAAU,CAACE,kBAAkB;IAChCC,MAAM,EAAE,IAAI;IACZzB,aAAa,EAAE;EACjB,CAAC;EACDiB,gBAAgB,EAAE;IAChB,GAAGK,uBAAU,CAACE,kBAAkB;IAChCC,MAAM,EAAE;EACV,CAAC;EACDT,eAAe,EAAE;IACf,GAAGM,uBAAU,CAACE;EAChB,CAAC;EACDV,IAAI,EAAE;IACJY,IAAI,EAAE,CAAC;IACPD,MAAM,EAAE,CAAC;IACTE,QAAQ,EAAE;EACZ,CAAC;EACDR,OAAO,EAAE;IACP,GAAGG,uBAAU,CAACE,kBAAkB;IAChCC,MAAM,EAAE;EACV;AACF,CAAC,CAAC","ignoreList":[]}