{"version":3,"names":["_utils","require","handlerIDToTag","exports","gestures","Map","oldHandlers","testIDs","registerHandler","handlerTag","handler","testID","set","isTestEnv","registerOldGestureHandler","unregisterOldGestureHandler","delete","unregisterHandler","findHandler","get","findOldGestureHandler","findHandlerByTestID","undefined","_findHandler"],"sources":["handlersRegistry.ts"],"sourcesContent":["import { isTestEnv } from '../utils';\nimport { GestureType } from './gestures/gesture';\nimport { GestureEvent, HandlerStateChangeEvent } from './gestureHandlerCommon';\n\nexport const handlerIDToTag: Record<string, number> = {};\nconst gestures = new Map<number, GestureType>();\nconst oldHandlers = new Map<number, GestureHandlerCallbacks>();\nconst testIDs = new Map<string, number>();\n\nexport function registerHandler(\n  handlerTag: number,\n  handler: GestureType,\n  testID?: string\n) {\n  gestures.set(handlerTag, handler);\n  if (isTestEnv() && testID) {\n    testIDs.set(testID, handlerTag);\n  }\n}\n\nexport function registerOldGestureHandler(\n  handlerTag: number,\n  handler: GestureHandlerCallbacks\n) {\n  oldHandlers.set(handlerTag, handler);\n}\n\nexport function unregisterOldGestureHandler(handlerTag: number) {\n  oldHandlers.delete(handlerTag);\n}\n\nexport function unregisterHandler(handlerTag: number, testID?: string) {\n  gestures.delete(handlerTag);\n  if (isTestEnv() && testID) {\n    testIDs.delete(testID);\n  }\n}\n\nexport function findHandler(handlerTag: number) {\n  return gestures.get(handlerTag);\n}\n\nexport function findOldGestureHandler(handlerTag: number) {\n  return oldHandlers.get(handlerTag);\n}\n\nexport function findHandlerByTestID(testID: string) {\n  const handlerTag = testIDs.get(testID);\n  if (handlerTag !== undefined) {\n    return findHandler(handlerTag) ?? null;\n  }\n  return null;\n}\n\nexport interface GestureHandlerCallbacks {\n  onGestureEvent: (event: GestureEvent<any>) => void;\n  onGestureStateChange: (event: HandlerStateChangeEvent<any>) => void;\n}\n"],"mappings":";;;;;;;;;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAIO,MAAMC,cAAsC,GAAAC,OAAA,CAAAD,cAAA,GAAG,CAAC,CAAC;AACxD,MAAME,QAAQ,GAAG,IAAIC,GAAG,CAAsB,CAAC;AAC/C,MAAMC,WAAW,GAAG,IAAID,GAAG,CAAkC,CAAC;AAC9D,MAAME,OAAO,GAAG,IAAIF,GAAG,CAAiB,CAAC;AAElC,SAASG,eAAeA,CAC7BC,UAAkB,EAClBC,OAAoB,EACpBC,MAAe,EACf;EACAP,QAAQ,CAACQ,GAAG,CAACH,UAAU,EAAEC,OAAO,CAAC;EACjC,IAAI,IAAAG,gBAAS,EAAC,CAAC,IAAIF,MAAM,EAAE;IACzBJ,OAAO,CAACK,GAAG,CAACD,MAAM,EAAEF,UAAU,CAAC;EACjC;AACF;AAEO,SAASK,yBAAyBA,CACvCL,UAAkB,EAClBC,OAAgC,EAChC;EACAJ,WAAW,CAACM,GAAG,CAACH,UAAU,EAAEC,OAAO,CAAC;AACtC;AAEO,SAASK,2BAA2BA,CAACN,UAAkB,EAAE;EAC9DH,WAAW,CAACU,MAAM,CAACP,UAAU,CAAC;AAChC;AAEO,SAASQ,iBAAiBA,CAACR,UAAkB,EAAEE,MAAe,EAAE;EACrEP,QAAQ,CAACY,MAAM,CAACP,UAAU,CAAC;EAC3B,IAAI,IAAAI,gBAAS,EAAC,CAAC,IAAIF,MAAM,EAAE;IACzBJ,OAAO,CAACS,MAAM,CAACL,MAAM,CAAC;EACxB;AACF;AAEO,SAASO,WAAWA,CAACT,UAAkB,EAAE;EAC9C,OAAOL,QAAQ,CAACe,GAAG,CAACV,UAAU,CAAC;AACjC;AAEO,SAASW,qBAAqBA,CAACX,UAAkB,EAAE;EACxD,OAAOH,WAAW,CAACa,GAAG,CAACV,UAAU,CAAC;AACpC;AAEO,SAASY,mBAAmBA,CAACV,MAAc,EAAE;EAClD,MAAMF,UAAU,GAAGF,OAAO,CAACY,GAAG,CAACR,MAAM,CAAC;EACtC,IAAIF,UAAU,KAAKa,SAAS,EAAE;IAAA,IAAAC,YAAA;IAC5B,QAAAA,YAAA,GAAOL,WAAW,CAACT,UAAU,CAAC,cAAAc,YAAA,cAAAA,YAAA,GAAI,IAAI;EACxC;EACA,OAAO,IAAI;AACb","ignoreList":[]}