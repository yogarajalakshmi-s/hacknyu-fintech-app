"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ForceTouchGesture = void 0;
var _gesture = require("./gesture");
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function changeEventCalculator(current, previous) {
  'worklet';

  let changePayload;
  if (previous === undefined) {
    changePayload = {
      forceChange: current.force
    };
  } else {
    changePayload = {
      forceChange: current.force - previous.force
    };
  }
  return {
    ...current,
    ...changePayload
  };
}
class ForceTouchGesture extends _gesture.ContinousBaseGesture {
  constructor() {
    super();
    _defineProperty(this, "config", {});
    this.handlerName = 'ForceTouchGestureHandler';
  }

  /**
   * A minimal pressure that is required before gesture can activate.
   * Should be a value from range [0.0, 1.0]. Default is 0.2.
   * @param force
   */
  minForce(force) {
    this.config.minForce = force;
    return this;
  }

  /**
   * A maximal pressure that could be applied for gesture.
   * If the pressure is greater, gesture fails. Should be a value from range [0.0, 1.0].
   * @param force
   */
  maxForce(force) {
    this.config.maxForce = force;
    return this;
  }

  /**
   * Value defining if haptic feedback has to be performed on activation.
   * @param value
   */
  feedbackOnActivation(value) {
    this.config.feedbackOnActivation = value;
    return this;
  }
  onChange(callback) {
    // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record
    this.handlers.changeEventCalculator = changeEventCalculator;
    return super.onChange(callback);
  }
}
exports.ForceTouchGesture = ForceTouchGesture;
//# sourceMappingURL=forceTouchGesture.js.map