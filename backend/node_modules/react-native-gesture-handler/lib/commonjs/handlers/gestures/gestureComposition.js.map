{"version":3,"names":["_gesture","require","_defineProperty","e","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","extendRelation","currentRelation","extendWith","undefined","ComposedGesture","Gesture","constructor","gestures","prepareSingleGesture","gesture","simultaneousGestures","requireGesturesToFail","BaseGesture","newConfig","config","simultaneousWith","requireToFail","prepare","initialize","toGestureArray","flatMap","exports","SimultaneousGesture","simultaneousArrays","map","filter","x","length","ExclusiveGesture","gestureArrays","concat"],"sources":["gestureComposition.ts"],"sourcesContent":["import { BaseGesture, Gesture, GestureRef, GestureType } from './gesture';\n\nfunction extendRelation(\n  currentRelation: GestureRef[] | undefined,\n  extendWith: GestureType[]\n) {\n  if (currentRelation === undefined) {\n    return [...extendWith];\n  } else {\n    return [...currentRelation, ...extendWith];\n  }\n}\n\nexport class ComposedGesture extends Gesture {\n  protected gestures: Gesture[] = [];\n  protected simultaneousGestures: GestureType[] = [];\n  protected requireGesturesToFail: GestureType[] = [];\n\n  constructor(...gestures: Gesture[]) {\n    super();\n    this.gestures = gestures;\n  }\n\n  protected prepareSingleGesture(\n    gesture: Gesture,\n    simultaneousGestures: GestureType[],\n    requireGesturesToFail: GestureType[]\n  ) {\n    if (gesture instanceof BaseGesture) {\n      const newConfig = { ...gesture.config };\n\n      // No need to extend `blocksHandlers` here, because it's not changed in composition.\n      // The same effect is achieved by reversing the order of 2 gestures in `Exclusive`\n      newConfig.simultaneousWith = extendRelation(\n        newConfig.simultaneousWith,\n        simultaneousGestures\n      );\n      newConfig.requireToFail = extendRelation(\n        newConfig.requireToFail,\n        requireGesturesToFail\n      );\n\n      gesture.config = newConfig;\n    } else if (gesture instanceof ComposedGesture) {\n      gesture.simultaneousGestures = simultaneousGestures;\n      gesture.requireGesturesToFail = requireGesturesToFail;\n      gesture.prepare();\n    }\n  }\n\n  prepare() {\n    for (const gesture of this.gestures) {\n      this.prepareSingleGesture(\n        gesture,\n        this.simultaneousGestures,\n        this.requireGesturesToFail\n      );\n    }\n  }\n\n  initialize() {\n    for (const gesture of this.gestures) {\n      gesture.initialize();\n    }\n  }\n\n  toGestureArray(): GestureType[] {\n    return this.gestures.flatMap((gesture) => gesture.toGestureArray());\n  }\n}\n\nexport class SimultaneousGesture extends ComposedGesture {\n  prepare() {\n    // This piece of magic works something like this:\n    // for every gesture in the array\n    const simultaneousArrays = this.gestures.map((gesture) =>\n      // we take the array it's in\n      this.gestures\n        // and make a copy without it\n        .filter((x) => x !== gesture)\n        // then we flatmap the result to get list of raw (not composed) gestures\n        // this way we don't make the gestures simultaneous with themselves, which is\n        // important when the gesture is `ExclusiveGesture` - we don't want to make\n        // exclusive gestures simultaneous\n        .flatMap((x) => x.toGestureArray())\n    );\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        simultaneousArrays[i],\n        this.requireGesturesToFail\n      );\n    }\n  }\n}\n\nexport class ExclusiveGesture extends ComposedGesture {\n  prepare() {\n    // Transforms the array of gestures into array of grouped raw (not composed) gestures\n    // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n    const gestureArrays = this.gestures.map((gesture) =>\n      gesture.toGestureArray()\n    );\n\n    let requireToFail: GestureType[] = [];\n\n    for (let i = 0; i < this.gestures.length; i++) {\n      this.prepareSingleGesture(\n        this.gestures[i],\n        this.simultaneousGestures,\n        this.requireGesturesToFail.concat(requireToFail)\n      );\n\n      // Every group gets to wait for all groups before it\n      requireToFail = requireToFail.concat(gestureArrays[i]);\n    }\n  }\n}\n\nexport type ComposedGestureType = InstanceType<typeof ComposedGesture>;\nexport type RaceGestureType = ComposedGestureType;\nexport type SimultaneousGestureType = InstanceType<typeof SimultaneousGesture>;\nexport type ExclusiveGestureType = InstanceType<typeof ExclusiveGesture>;\n"],"mappings":"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","ignoreList":[]}