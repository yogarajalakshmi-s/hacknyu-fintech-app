{"version":3,"names":["_reanimatedWrapper","require","_State","_utils","warningMessage","tagMessage","REANIMATED_AVAILABLE","Reanimated","useSharedValue","undefined","setGestureState","create","handlerTag","begin","State","BEGAN","console","warn","activate","ACTIVE","fail","FAILED","end","END","GestureStateManager","exports"],"sources":["gestureStateManager.ts"],"sourcesContent":["import { Reanimated } from './reanimatedWrapper';\nimport { State } from '../../State';\nimport { tagMessage } from '../../utils';\n\nexport interface GestureStateManagerType {\n  begin: () => void;\n  activate: () => void;\n  fail: () => void;\n  end: () => void;\n}\n\nconst warningMessage = tagMessage(\n  'react-native-reanimated is required in order to use synchronous state management'\n);\n\n// Check if reanimated module is available, but look for useSharedValue as conditional\n// require of reanimated can sometimes return content of `utils.ts` file (?)\nconst REANIMATED_AVAILABLE = Reanimated?.useSharedValue !== undefined;\nconst setGestureState = Reanimated?.setGestureState;\n\nfunction create(handlerTag: number): GestureStateManagerType {\n  'worklet';\n  return {\n    begin: () => {\n      'worklet';\n      if (REANIMATED_AVAILABLE) {\n        // When Reanimated is available, setGestureState should be defined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        setGestureState!(handlerTag, State.BEGAN);\n      } else {\n        console.warn(warningMessage);\n      }\n    },\n\n    activate: () => {\n      'worklet';\n      if (REANIMATED_AVAILABLE) {\n        // When Reanimated is available, setGestureState should be defined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        setGestureState!(handlerTag, State.ACTIVE);\n      } else {\n        console.warn(warningMessage);\n      }\n    },\n\n    fail: () => {\n      'worklet';\n      if (REANIMATED_AVAILABLE) {\n        // When Reanimated is available, setGestureState should be defined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        setGestureState!(handlerTag, State.FAILED);\n      } else {\n        console.warn(warningMessage);\n      }\n    },\n\n    end: () => {\n      'worklet';\n      if (REANIMATED_AVAILABLE) {\n        // When Reanimated is available, setGestureState should be defined\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        setGestureState!(handlerTag, State.END);\n      } else {\n        console.warn(warningMessage);\n      }\n    },\n  };\n}\n\nexport const GestureStateManager = {\n  create,\n};\n"],"mappings":";;;;;;AAAA,IAAAA,kBAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AASA,MAAMG,cAAc,GAAG,IAAAC,iBAAU,EAC/B,kFACF,CAAC;;AAED;AACA;AACA,MAAMC,oBAAoB,GAAG,CAAAC,6BAAU,aAAVA,6BAAU,uBAAVA,6BAAU,CAAEC,cAAc,MAAKC,SAAS;AACrE,MAAMC,eAAe,GAAGH,6BAAU,aAAVA,6BAAU,uBAAVA,6BAAU,CAAEG,eAAe;AAEnD,SAASC,MAAMA,CAACC,UAAkB,EAA2B;EAC3D,SAAS;;EACT,OAAO;IACLC,KAAK,EAAEA,CAAA,KAAM;MACX,SAAS;;MACT,IAAIP,oBAAoB,EAAE;QACxB;QACA;QACAI,eAAe,CAAEE,UAAU,EAAEE,YAAK,CAACC,KAAK,CAAC;MAC3C,CAAC,MAAM;QACLC,OAAO,CAACC,IAAI,CAACb,cAAc,CAAC;MAC9B;IACF,CAAC;IAEDc,QAAQ,EAAEA,CAAA,KAAM;MACd,SAAS;;MACT,IAAIZ,oBAAoB,EAAE;QACxB;QACA;QACAI,eAAe,CAAEE,UAAU,EAAEE,YAAK,CAACK,MAAM,CAAC;MAC5C,CAAC,MAAM;QACLH,OAAO,CAACC,IAAI,CAACb,cAAc,CAAC;MAC9B;IACF,CAAC;IAEDgB,IAAI,EAAEA,CAAA,KAAM;MACV,SAAS;;MACT,IAAId,oBAAoB,EAAE;QACxB;QACA;QACAI,eAAe,CAAEE,UAAU,EAAEE,YAAK,CAACO,MAAM,CAAC;MAC5C,CAAC,MAAM;QACLL,OAAO,CAACC,IAAI,CAACb,cAAc,CAAC;MAC9B;IACF,CAAC;IAEDkB,GAAG,EAAEA,CAAA,KAAM;MACT,SAAS;;MACT,IAAIhB,oBAAoB,EAAE;QACxB;QACA;QACAI,eAAe,CAAEE,UAAU,EAAEE,YAAK,CAACS,GAAG,CAAC;MACzC,CAAC,MAAM;QACLP,OAAO,CAACC,IAAI,CAACb,cAAc,CAAC;MAC9B;IACF;EACF,CAAC;AACH;AAEO,MAAMoB,mBAAmB,GAAAC,OAAA,CAAAD,mBAAA,GAAG;EACjCb;AACF,CAAC","ignoreList":[]}