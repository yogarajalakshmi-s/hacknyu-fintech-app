{"version":3,"names":["_reactNative","require","_State","_TouchEventType","_handlersRegistry","_gestureStateManager","gestureHandlerEventSubscription","gestureHandlerStateChangeEventSubscription","gestureStateManagers","Map","lastUpdateEvent","isStateChangeEvent","event","oldState","isTouchEvent","eventType","onGestureHandlerEvent","_handler$handlers7","_handler$handlers7$on","_handler$handlers8","_handler$handlers8$on","_handler$handlers9","_handler$handlers9$on","_handler$handlers10","_handler$handlers10$o","handler","findHandler","handlerTag","State","UNDETERMINED","state","BEGAN","_handler$handlers$onB","_handler$handlers","handlers","onBegin","call","ACTIVE","_handler$handlers$onS","_handler$handlers2","onStart","END","_handler$handlers$onF","_handler$handlers4","_handler$handlers$onE","_handler$handlers3","onEnd","onFinalize","undefined","FAILED","CANCELLED","_handler$handlers$onF2","_handler$handlers6","_handler$handlers$onE2","_handler$handlers5","delete","has","set","GestureStateManager","create","manager","get","TouchEventType","TOUCHES_DOWN","onTouchesDown","TOUCHES_MOVE","onTouchesMove","TOUCHES_UP","onTouchesUp","TOUCHES_CANCELLED","onTouchesCancelled","_handler$handlers$onU","_handler$handlers11","onUpdate","onChange","changeEventCalculator","_handler$handlers$onC","_handler$handlers12","_handler$handlers$cha","_handler$handlers13","oldHandler","findOldGestureHandler","nativeEvent","onGestureStateChange","onGestureEvent","startListening","stopListening","DeviceEventEmitter","addListener","remove"],"sources":["eventReceiver.ts"],"sourcesContent":["import { DeviceEventEmitter, EmitterSubscription } from 'react-native';\nimport { State } from '../../State';\nimport { TouchEventType } from '../../TouchEventType';\nimport {\n  GestureTouchEvent,\n  GestureUpdateEvent,\n  GestureStateChangeEvent,\n} from '../gestureHandlerCommon';\nimport { findHandler, findOldGestureHandler } from '../handlersRegistry';\nimport { BaseGesture } from './gesture';\nimport {\n  GestureStateManager,\n  GestureStateManagerType,\n} from './gestureStateManager';\n\nlet gestureHandlerEventSubscription: EmitterSubscription | null = null;\nlet gestureHandlerStateChangeEventSubscription: EmitterSubscription | null =\n  null;\n\nconst gestureStateManagers: Map<number, GestureStateManagerType> = new Map<\n  number,\n  GestureStateManagerType\n>();\n\nconst lastUpdateEvent: (GestureUpdateEvent | undefined)[] = [];\n\nfunction isStateChangeEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureStateChangeEvent {\n  // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n  return event.oldState != null;\n}\n\nfunction isTouchEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n): event is GestureTouchEvent {\n  return event.eventType != null;\n}\n\nexport function onGestureHandlerEvent(\n  event: GestureUpdateEvent | GestureStateChangeEvent | GestureTouchEvent\n) {\n  const handler = findHandler(event.handlerTag) as BaseGesture<\n    Record<string, unknown>\n  >;\n\n  if (handler) {\n    if (isStateChangeEvent(event)) {\n      if (\n        event.oldState === State.UNDETERMINED &&\n        event.state === State.BEGAN\n      ) {\n        handler.handlers.onBegin?.(event);\n      } else if (\n        (event.oldState === State.BEGAN ||\n          event.oldState === State.UNDETERMINED) &&\n        event.state === State.ACTIVE\n      ) {\n        handler.handlers.onStart?.(event);\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      } else if (event.oldState !== event.state && event.state === State.END) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, true);\n        }\n        handler.handlers.onFinalize?.(event, true);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      } else if (\n        (event.state === State.FAILED || event.state === State.CANCELLED) &&\n        event.oldState !== event.state\n      ) {\n        if (event.oldState === State.ACTIVE) {\n          handler.handlers.onEnd?.(event, false);\n        }\n        handler.handlers.onFinalize?.(event, false);\n        gestureStateManagers.delete(event.handlerTag);\n        lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n      }\n    } else if (isTouchEvent(event)) {\n      if (!gestureStateManagers.has(event.handlerTag)) {\n        gestureStateManagers.set(\n          event.handlerTag,\n          GestureStateManager.create(event.handlerTag)\n        );\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      const manager = gestureStateManagers.get(event.handlerTag)!;\n\n      switch (event.eventType) {\n        case TouchEventType.TOUCHES_DOWN:\n          handler.handlers?.onTouchesDown?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_MOVE:\n          handler.handlers?.onTouchesMove?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_UP:\n          handler.handlers?.onTouchesUp?.(event, manager);\n          break;\n        case TouchEventType.TOUCHES_CANCELLED:\n          handler.handlers?.onTouchesCancelled?.(event, manager);\n          break;\n      }\n    } else {\n      handler.handlers.onUpdate?.(event);\n\n      if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n        handler.handlers.onChange?.(\n          handler.handlers.changeEventCalculator?.(\n            event,\n            lastUpdateEvent[handler.handlers.handlerTag]\n          )\n        );\n\n        lastUpdateEvent[handler.handlers.handlerTag] = event;\n      }\n    }\n  } else {\n    const oldHandler = findOldGestureHandler(event.handlerTag);\n    if (oldHandler) {\n      const nativeEvent = { nativeEvent: event };\n      if (isStateChangeEvent(event)) {\n        oldHandler.onGestureStateChange(nativeEvent);\n      } else {\n        oldHandler.onGestureEvent(nativeEvent);\n      }\n      return;\n    }\n  }\n}\n\nexport function startListening() {\n  stopListening();\n\n  gestureHandlerEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerEvent',\n    onGestureHandlerEvent\n  );\n\n  gestureHandlerStateChangeEventSubscription = DeviceEventEmitter.addListener(\n    'onGestureHandlerStateChange',\n    onGestureHandlerEvent\n  );\n}\n\nexport function stopListening() {\n  if (gestureHandlerEventSubscription) {\n    gestureHandlerEventSubscription.remove();\n    gestureHandlerEventSubscription = null;\n  }\n\n  if (gestureHandlerStateChangeEventSubscription) {\n    gestureHandlerStateChangeEventSubscription.remove();\n    gestureHandlerStateChangeEventSubscription = null;\n  }\n}\n"],"mappings":";;;;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,eAAA,GAAAF,OAAA;AAMA,IAAAG,iBAAA,GAAAH,OAAA;AAEA,IAAAI,oBAAA,GAAAJ,OAAA;AAKA,IAAIK,+BAA2D,GAAG,IAAI;AACtE,IAAIC,0CAAsE,GACxE,IAAI;AAEN,MAAMC,oBAA0D,GAAG,IAAIC,GAAG,CAGxE,CAAC;AAEH,MAAMC,eAAmD,GAAG,EAAE;AAE9D,SAASC,kBAAkBA,CACzBC,KAAuE,EACrC;EAClC;EACA,OAAOA,KAAK,CAACC,QAAQ,IAAI,IAAI;AAC/B;AAEA,SAASC,YAAYA,CACnBF,KAAuE,EAC3C;EAC5B,OAAOA,KAAK,CAACG,SAAS,IAAI,IAAI;AAChC;AAEO,SAASC,qBAAqBA,CACnCJ,KAAuE,EACvE;EAAA,IAAAK,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,kBAAA,EAAAC,qBAAA,EAAAC,mBAAA,EAAAC,qBAAA;EACA,MAAMC,OAAO,GAAG,IAAAC,6BAAW,EAACd,KAAK,CAACe,UAAU,CAE3C;EAED,IAAIF,OAAO,EAAE;IACX,IAAId,kBAAkB,CAACC,KAAK,CAAC,EAAE;MAC7B,IACEA,KAAK,CAACC,QAAQ,KAAKe,YAAK,CAACC,YAAY,IACrCjB,KAAK,CAACkB,KAAK,KAAKF,YAAK,CAACG,KAAK,EAC3B;QAAA,IAAAC,qBAAA,EAAAC,iBAAA;QACA,CAAAD,qBAAA,IAAAC,iBAAA,GAAAR,OAAO,CAACS,QAAQ,EAACC,OAAO,cAAAH,qBAAA,eAAxBA,qBAAA,CAAAI,IAAA,CAAAH,iBAAA,EAA2BrB,KAAK,CAAC;MACnC,CAAC,MAAM,IACL,CAACA,KAAK,CAACC,QAAQ,KAAKe,YAAK,CAACG,KAAK,IAC7BnB,KAAK,CAACC,QAAQ,KAAKe,YAAK,CAACC,YAAY,KACvCjB,KAAK,CAACkB,KAAK,KAAKF,YAAK,CAACS,MAAM,EAC5B;QAAA,IAAAC,qBAAA,EAAAC,kBAAA;QACA,CAAAD,qBAAA,IAAAC,kBAAA,GAAAd,OAAO,CAACS,QAAQ,EAACM,OAAO,cAAAF,qBAAA,eAAxBA,qBAAA,CAAAF,IAAA,CAAAG,kBAAA,EAA2B3B,KAAK,CAAC;QACjCF,eAAe,CAACe,OAAO,CAACS,QAAQ,CAACP,UAAU,CAAC,GAAGf,KAAK;MACtD,CAAC,MAAM,IAAIA,KAAK,CAACC,QAAQ,KAAKD,KAAK,CAACkB,KAAK,IAAIlB,KAAK,CAACkB,KAAK,KAAKF,YAAK,CAACa,GAAG,EAAE;QAAA,IAAAC,qBAAA,EAAAC,kBAAA;QACtE,IAAI/B,KAAK,CAACC,QAAQ,KAAKe,YAAK,CAACS,MAAM,EAAE;UAAA,IAAAO,qBAAA,EAAAC,kBAAA;UACnC,CAAAD,qBAAA,IAAAC,kBAAA,GAAApB,OAAO,CAACS,QAAQ,EAACY,KAAK,cAAAF,qBAAA,eAAtBA,qBAAA,CAAAR,IAAA,CAAAS,kBAAA,EAAyBjC,KAAK,EAAE,IAAI,CAAC;QACvC;QACA,CAAA8B,qBAAA,IAAAC,kBAAA,GAAAlB,OAAO,CAACS,QAAQ,EAACa,UAAU,cAAAL,qBAAA,eAA3BA,qBAAA,CAAAN,IAAA,CAAAO,kBAAA,EAA8B/B,KAAK,EAAE,IAAI,CAAC;QAC1CF,eAAe,CAACe,OAAO,CAACS,QAAQ,CAACP,UAAU,CAAC,GAAGqB,SAAS;MAC1D,CAAC,MAAM,IACL,CAACpC,KAAK,CAACkB,KAAK,KAAKF,YAAK,CAACqB,MAAM,IAAIrC,KAAK,CAACkB,KAAK,KAAKF,YAAK,CAACsB,SAAS,KAChEtC,KAAK,CAACC,QAAQ,KAAKD,KAAK,CAACkB,KAAK,EAC9B;QAAA,IAAAqB,sBAAA,EAAAC,kBAAA;QACA,IAAIxC,KAAK,CAACC,QAAQ,KAAKe,YAAK,CAACS,MAAM,EAAE;UAAA,IAAAgB,sBAAA,EAAAC,kBAAA;UACnC,CAAAD,sBAAA,IAAAC,kBAAA,GAAA7B,OAAO,CAACS,QAAQ,EAACY,KAAK,cAAAO,sBAAA,eAAtBA,sBAAA,CAAAjB,IAAA,CAAAkB,kBAAA,EAAyB1C,KAAK,EAAE,KAAK,CAAC;QACxC;QACA,CAAAuC,sBAAA,IAAAC,kBAAA,GAAA3B,OAAO,CAACS,QAAQ,EAACa,UAAU,cAAAI,sBAAA,eAA3BA,sBAAA,CAAAf,IAAA,CAAAgB,kBAAA,EAA8BxC,KAAK,EAAE,KAAK,CAAC;QAC3CJ,oBAAoB,CAAC+C,MAAM,CAAC3C,KAAK,CAACe,UAAU,CAAC;QAC7CjB,eAAe,CAACe,OAAO,CAACS,QAAQ,CAACP,UAAU,CAAC,GAAGqB,SAAS;MAC1D;IACF,CAAC,MAAM,IAAIlC,YAAY,CAACF,KAAK,CAAC,EAAE;MAC9B,IAAI,CAACJ,oBAAoB,CAACgD,GAAG,CAAC5C,KAAK,CAACe,UAAU,CAAC,EAAE;QAC/CnB,oBAAoB,CAACiD,GAAG,CACtB7C,KAAK,CAACe,UAAU,EAChB+B,wCAAmB,CAACC,MAAM,CAAC/C,KAAK,CAACe,UAAU,CAC7C,CAAC;MACH;;MAEA;MACA,MAAMiC,OAAO,GAAGpD,oBAAoB,CAACqD,GAAG,CAACjD,KAAK,CAACe,UAAU,CAAE;MAE3D,QAAQf,KAAK,CAACG,SAAS;QACrB,KAAK+C,8BAAc,CAACC,YAAY;UAC9B,CAAA9C,kBAAA,GAAAQ,OAAO,CAACS,QAAQ,cAAAjB,kBAAA,gBAAAC,qBAAA,GAAhBD,kBAAA,CAAkB+C,aAAa,cAAA9C,qBAAA,eAA/BA,qBAAA,CAAAkB,IAAA,CAAAnB,kBAAA,EAAkCL,KAAK,EAAEgD,OAAO,CAAC;UACjD;QACF,KAAKE,8BAAc,CAACG,YAAY;UAC9B,CAAA9C,kBAAA,GAAAM,OAAO,CAACS,QAAQ,cAAAf,kBAAA,gBAAAC,qBAAA,GAAhBD,kBAAA,CAAkB+C,aAAa,cAAA9C,qBAAA,eAA/BA,qBAAA,CAAAgB,IAAA,CAAAjB,kBAAA,EAAkCP,KAAK,EAAEgD,OAAO,CAAC;UACjD;QACF,KAAKE,8BAAc,CAACK,UAAU;UAC5B,CAAA9C,kBAAA,GAAAI,OAAO,CAACS,QAAQ,cAAAb,kBAAA,gBAAAC,qBAAA,GAAhBD,kBAAA,CAAkB+C,WAAW,cAAA9C,qBAAA,eAA7BA,qBAAA,CAAAc,IAAA,CAAAf,kBAAA,EAAgCT,KAAK,EAAEgD,OAAO,CAAC;UAC/C;QACF,KAAKE,8BAAc,CAACO,iBAAiB;UACnC,CAAA9C,mBAAA,GAAAE,OAAO,CAACS,QAAQ,cAAAX,mBAAA,gBAAAC,qBAAA,GAAhBD,mBAAA,CAAkB+C,kBAAkB,cAAA9C,qBAAA,eAApCA,qBAAA,CAAAY,IAAA,CAAAb,mBAAA,EAAuCX,KAAK,EAAEgD,OAAO,CAAC;UACtD;MACJ;IACF,CAAC,MAAM;MAAA,IAAAW,qBAAA,EAAAC,mBAAA;MACL,CAAAD,qBAAA,IAAAC,mBAAA,GAAA/C,OAAO,CAACS,QAAQ,EAACuC,QAAQ,cAAAF,qBAAA,eAAzBA,qBAAA,CAAAnC,IAAA,CAAAoC,mBAAA,EAA4B5D,KAAK,CAAC;MAElC,IAAIa,OAAO,CAACS,QAAQ,CAACwC,QAAQ,IAAIjD,OAAO,CAACS,QAAQ,CAACyC,qBAAqB,EAAE;QAAA,IAAAC,qBAAA,EAAAC,mBAAA,EAAAC,qBAAA,EAAAC,mBAAA;QACvE,CAAAH,qBAAA,IAAAC,mBAAA,GAAApD,OAAO,CAACS,QAAQ,EAACwC,QAAQ,cAAAE,qBAAA,eAAzBA,qBAAA,CAAAxC,IAAA,CAAAyC,mBAAA,GAAAC,qBAAA,GACE,CAAAC,mBAAA,GAAAtD,OAAO,CAACS,QAAQ,EAACyC,qBAAqB,cAAAG,qBAAA,uBAAtCA,qBAAA,CAAA1C,IAAA,CAAA2C,mBAAA,EACEnE,KAAK,EACLF,eAAe,CAACe,OAAO,CAACS,QAAQ,CAACP,UAAU,CAC7C,CACF,CAAC;QAEDjB,eAAe,CAACe,OAAO,CAACS,QAAQ,CAACP,UAAU,CAAC,GAAGf,KAAK;MACtD;IACF;EACF,CAAC,MAAM;IACL,MAAMoE,UAAU,GAAG,IAAAC,uCAAqB,EAACrE,KAAK,CAACe,UAAU,CAAC;IAC1D,IAAIqD,UAAU,EAAE;MACd,MAAME,WAAW,GAAG;QAAEA,WAAW,EAAEtE;MAAM,CAAC;MAC1C,IAAID,kBAAkB,CAACC,KAAK,CAAC,EAAE;QAC7BoE,UAAU,CAACG,oBAAoB,CAACD,WAAW,CAAC;MAC9C,CAAC,MAAM;QACLF,UAAU,CAACI,cAAc,CAACF,WAAW,CAAC;MACxC;MACA;IACF;EACF;AACF;AAEO,SAASG,cAAcA,CAAA,EAAG;EAC/BC,aAAa,CAAC,CAAC;EAEfhF,+BAA+B,GAAGiF,+BAAkB,CAACC,WAAW,CAC9D,uBAAuB,EACvBxE,qBACF,CAAC;EAEDT,0CAA0C,GAAGgF,+BAAkB,CAACC,WAAW,CACzE,6BAA6B,EAC7BxE,qBACF,CAAC;AACH;AAEO,SAASsE,aAAaA,CAAA,EAAG;EAC9B,IAAIhF,+BAA+B,EAAE;IACnCA,+BAA+B,CAACmF,MAAM,CAAC,CAAC;IACxCnF,+BAA+B,GAAG,IAAI;EACxC;EAEA,IAAIC,0CAA0C,EAAE;IAC9CA,0CAA0C,CAACkF,MAAM,CAAC,CAAC;IACnDlF,0CAA0C,GAAG,IAAI;EACnD;AACF","ignoreList":[]}