{"version":3,"names":["_utils","require","_getShadowNodeFromRef","_react","_findNodeHandle","_interopRequireDefault","e","__esModule","default","useViewRefHandler","state","updateAttachedGestures","refHandler","useCallback","ref","viewRef","previousViewTag","findNodeHandle","firstRender","__DEV__","isFabric","global","isViewFlatteningDisabled","node","getShadowNodeFromRef","console","error","tagMessage"],"sources":["useViewRefHandler.ts"],"sourcesContent":["import { isFabric, tagMessage } from '../../../utils';\nimport { getShadowNodeFromRef } from '../../../getShadowNodeFromRef';\n\nimport { GestureDetectorState } from './types';\nimport React, { useCallback } from 'react';\nimport findNodeHandle from '../../../findNodeHandle';\n\ndeclare const global: {\n  isViewFlatteningDisabled: (node: unknown) => boolean | null; // JSI function\n};\n\n// Ref handler for the Wrap component attached under the GestureDetector.\n// It's responsible for setting the viewRef on the state and triggering the reattaching of handlers\n// if the view has changed.\nexport function useViewRefHandler(\n  state: GestureDetectorState,\n  updateAttachedGestures: (skipConfigUpdate?: boolean) => void\n) {\n  const refHandler = useCallback(\n    (ref: React.Component | null) => {\n      if (ref === null) {\n        return;\n      }\n\n      state.viewRef = ref;\n\n      // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n      if (state.previousViewTag === -1) {\n        state.previousViewTag = findNodeHandle(state.viewRef) as number;\n      }\n\n      // Pass true as `skipConfigUpdate`. Here we only want to trigger the eventual reattaching of handlers\n      // in case the view has changed. If the view doesn't change, the update will be handled by detector.\n      if (!state.firstRender) {\n        updateAttachedGestures(true);\n      }\n\n      if (__DEV__ && isFabric() && global.isViewFlatteningDisabled) {\n        const node = getShadowNodeFromRef(ref);\n        if (global.isViewFlatteningDisabled(node) === false) {\n          console.error(\n            tagMessage(\n              'GestureDetector has received a child that may get view-flattened. ' +\n                '\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.'\n            )\n          );\n        }\n      }\n    },\n    [state, updateAttachedGestures]\n  );\n\n  return refHandler;\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,qBAAA,GAAAD,OAAA;AAGA,IAAAE,MAAA,GAAAF,OAAA;AACA,IAAAG,eAAA,GAAAC,sBAAA,CAAAJ,OAAA;AAAqD,SAAAI,uBAAAC,CAAA,WAAAA,CAAA,IAAAA,CAAA,CAAAC,UAAA,GAAAD,CAAA,KAAAE,OAAA,EAAAF,CAAA;AAMrD;AACA;AACA;AACO,SAASG,iBAAiBA,CAC/BC,KAA2B,EAC3BC,sBAA4D,EAC5D;EACA,MAAMC,UAAU,GAAG,IAAAC,kBAAW,EAC3BC,GAA2B,IAAK;IAC/B,IAAIA,GAAG,KAAK,IAAI,EAAE;MAChB;IACF;IAEAJ,KAAK,CAACK,OAAO,GAAGD,GAAG;;IAEnB;IACA,IAAIJ,KAAK,CAACM,eAAe,KAAK,CAAC,CAAC,EAAE;MAChCN,KAAK,CAACM,eAAe,GAAG,IAAAC,uBAAc,EAACP,KAAK,CAACK,OAAO,CAAW;IACjE;;IAEA;IACA;IACA,IAAI,CAACL,KAAK,CAACQ,WAAW,EAAE;MACtBP,sBAAsB,CAAC,IAAI,CAAC;IAC9B;IAEA,IAAIQ,OAAO,IAAI,IAAAC,eAAQ,EAAC,CAAC,IAAIC,MAAM,CAACC,wBAAwB,EAAE;MAC5D,MAAMC,IAAI,GAAG,IAAAC,0CAAoB,EAACV,GAAG,CAAC;MACtC,IAAIO,MAAM,CAACC,wBAAwB,CAACC,IAAI,CAAC,KAAK,KAAK,EAAE;QACnDE,OAAO,CAACC,KAAK,CACX,IAAAC,iBAAU,EACR,oEAAoE,GAClE,kGACJ,CACF,CAAC;MACH;IACF;EACF,CAAC,EACD,CAACjB,KAAK,EAAEC,sBAAsB,CAChC,CAAC;EAED,OAAOC,UAAU;AACnB","ignoreList":[]}