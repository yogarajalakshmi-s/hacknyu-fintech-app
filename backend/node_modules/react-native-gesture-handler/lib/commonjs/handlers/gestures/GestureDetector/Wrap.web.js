"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Wrap = exports.AnimatedWrap = void 0;
var _react = _interopRequireWildcard(require("react"));
var _utils = require("../../../utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const Wrap = exports.Wrap = /*#__PURE__*/(0, _react.forwardRef)(({
  children
}, ref) => {
  try {
    var _Object$getPrototypeO;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const child = _react.default.Children.only(children);
    const isRNSVGNode = ((_Object$getPrototypeO = Object.getPrototypeOf(child === null || child === void 0 ? void 0 : child.type)) === null || _Object$getPrototypeO === void 0 ? void 0 : _Object$getPrototypeO.name) === 'WebShape';
    if (isRNSVGNode) {
      const clone = /*#__PURE__*/_react.default.cloneElement(child, {
        ref
      },
      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
      child.props.children);
      return clone;
    }
    return /*#__PURE__*/_react.default.createElement("div", {
      ref: ref,
      style: {
        display: 'contents'
      }
    }, child);
  } catch (e) {
    throw new Error((0, _utils.tagMessage)(`GestureDetector got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));
  }
});

// On web we never take a path with Reanimated,
// therefore we can simply export Wrap
const AnimatedWrap = exports.AnimatedWrap = Wrap;
//# sourceMappingURL=Wrap.web.js.map