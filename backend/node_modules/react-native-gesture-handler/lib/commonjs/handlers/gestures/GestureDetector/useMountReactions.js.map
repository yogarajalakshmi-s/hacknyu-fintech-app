{"version":3,"names":["_utils","require","_mountRegistry","_react","shouldUpdateDetector","relation","gesture","undefined","tag","transformIntoHandlerTags","handlerTag","useMountReactions","updateDetector","state","useEffect","MountRegistry","addMountListener","attachedGesture","attachedGestures","blocksHandlers","config","requireToFail","simultaneousWith"],"sources":["useMountReactions.ts"],"sourcesContent":["import { transformIntoHandlerTags } from '../../utils';\nimport { MountRegistry } from '../../../mountRegistry';\nimport { AttachedGestureState } from './types';\nimport { useEffect } from 'react';\nimport { GestureRef } from '../gesture';\n\nfunction shouldUpdateDetector(\n  relation: GestureRef[] | undefined,\n  gesture: { handlerTag: number }\n) {\n  if (relation === undefined) {\n    return false;\n  }\n\n  for (const tag of transformIntoHandlerTags(relation)) {\n    if (tag === gesture.handlerTag) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function useMountReactions(\n  updateDetector: () => void,\n  state: AttachedGestureState\n) {\n  useEffect(() => {\n    return MountRegistry.addMountListener((gesture) => {\n      // At this point the ref in the gesture config should be updated, so we can check if one of the gestures\n      // set in a relation with the gesture got mounted. If so, we need to update the detector to propagate\n      // the changes to the native side.\n      for (const attachedGesture of state.attachedGestures) {\n        const blocksHandlers = attachedGesture.config.blocksHandlers;\n        const requireToFail = attachedGesture.config.requireToFail;\n        const simultaneousWith = attachedGesture.config.simultaneousWith;\n\n        if (\n          shouldUpdateDetector(blocksHandlers, gesture) ||\n          shouldUpdateDetector(requireToFail, gesture) ||\n          shouldUpdateDetector(simultaneousWith, gesture)\n        ) {\n          updateDetector();\n\n          // We can safely return here, if any other gestures should be updated, they will be by the above call\n          return;\n        }\n      }\n    });\n  }, [updateDetector, state]);\n}\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AACA,IAAAC,cAAA,GAAAD,OAAA;AAEA,IAAAE,MAAA,GAAAF,OAAA;AAGA,SAASG,oBAAoBA,CAC3BC,QAAkC,EAClCC,OAA+B,EAC/B;EACA,IAAID,QAAQ,KAAKE,SAAS,EAAE;IAC1B,OAAO,KAAK;EACd;EAEA,KAAK,MAAMC,GAAG,IAAI,IAAAC,+BAAwB,EAACJ,QAAQ,CAAC,EAAE;IACpD,IAAIG,GAAG,KAAKF,OAAO,CAACI,UAAU,EAAE;MAC9B,OAAO,IAAI;IACb;EACF;EAEA,OAAO,KAAK;AACd;AAEO,SAASC,iBAAiBA,CAC/BC,cAA0B,EAC1BC,KAA2B,EAC3B;EACA,IAAAC,gBAAS,EAAC,MAAM;IACd,OAAOC,4BAAa,CAACC,gBAAgB,CAAEV,OAAO,IAAK;MACjD;MACA;MACA;MACA,KAAK,MAAMW,eAAe,IAAIJ,KAAK,CAACK,gBAAgB,EAAE;QACpD,MAAMC,cAAc,GAAGF,eAAe,CAACG,MAAM,CAACD,cAAc;QAC5D,MAAME,aAAa,GAAGJ,eAAe,CAACG,MAAM,CAACC,aAAa;QAC1D,MAAMC,gBAAgB,GAAGL,eAAe,CAACG,MAAM,CAACE,gBAAgB;QAEhE,IACElB,oBAAoB,CAACe,cAAc,EAAEb,OAAO,CAAC,IAC7CF,oBAAoB,CAACiB,aAAa,EAAEf,OAAO,CAAC,IAC5CF,oBAAoB,CAACkB,gBAAgB,EAAEhB,OAAO,CAAC,EAC/C;UACAM,cAAc,CAAC,CAAC;;UAEhB;UACA;QACF;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,CAACA,cAAc,EAAEC,KAAK,CAAC,CAAC;AAC7B","ignoreList":[]}