{"version":3,"names":["React","_interopRequireWildcard","require","_reactNative","_customDirectEventTypes","_RNGestureHandlerModule","_interopRequireDefault","_State","_handlersRegistry","_getNextHandlerTag","_utils","_findNodeHandle","_utils2","_ActionType","_PressabilityDebugView","_GestureHandlerRootViewContext","_ghQueueMicrotask","_mountRegistry","_UIManagerAny$getView","_UIManagerAny$getView2","_UIManagerAny$getCons","e","__esModule","default","_getRequireWildcardCache","WeakMap","r","t","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_defineProperty","_toPropertyKey","value","enumerable","configurable","writable","_toPrimitive","Symbol","toPrimitive","TypeError","String","Number","UIManagerAny","UIManager","customDirectEventTypes","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","onGestureHandlerEvent","onGestureHandlerStateChange","isFabric","Platform","OS","genericDirectEventTypes","UIManagerConstants","getViewManagerConfig","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","RNGestureHandlerModule","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","DeviceEventEmitter","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","stateToPropMappings","State","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","ActionType","JS_FUNCTION_OLD_API","propsRef","registerOldGestureHandler","onGestureStateChange","actionType","_this$props5","_this$props6","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","scheduleFlushOperations","ghQueueMicrotask","MountRegistry","gestureHandlerWillMount","updateGestureHandler","getNextHandlerTag","createRef","isMountedRef","id","handlerIDToTag","Error","componentDidMount","inspectorToggleListener","setState","_","update","filterConfig","displayName","findNodeHandle","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","unregisterOldGestureHandler","dropGestureHandler","handlerID","gestureHandlerWillUnmount","remainingTries","deepEqual","setNativeProps","updates","mergedProps","render","_this$props$testID","context","isTestEnv","gestureEventHandler","gestureStateEventHandler","events","tagMessage","grandChildren","type","toArray","push","createElement","PressabilityDebugView","key","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","enabled","testID","GestureHandlerRootViewContext"],"sources":["createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  registerOldGestureHandler,\n  unregisterOldGestureHandler,\n} from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlerCommon';\nimport { filterConfig, scheduleFlushOperations } from './utils';\nimport findNodeHandle from '../findNodeHandle';\nimport { ValueOf } from '../typeUtils';\nimport { deepEqual, isFabric, isTestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nimport { MountRegistry } from '../mountRegistry';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    // no-op\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    // no-op\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>,\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      if (!this.viewNode) {\n        throw new Error(\n          `[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`\n        );\n      }\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      if (Platform.OS !== 'web') {\n        unregisterOldGestureHandler(this.handlerTag);\n      }\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n\n      MountRegistry.gestureHandlerWillUnmount(this);\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n\n      ghQueueMicrotask(() => {\n        MountRegistry.gestureHandlerWillMount(this);\n      });\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isTestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n                enabled: this.props.enabled,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]}