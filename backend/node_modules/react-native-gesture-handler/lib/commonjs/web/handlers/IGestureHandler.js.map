{"version":3,"names":[],"sources":["IGestureHandler.ts"],"sourcesContent":["import type { PointerType } from '../../PointerType';\nimport type { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport type { State } from '../../State';\nimport type { Config } from '../interfaces';\nimport type EventManager from '../tools/EventManager';\nimport type { GestureHandlerDelegate } from '../tools/GestureHandlerDelegate';\nimport type PointerTracker from '../tools/PointerTracker';\n\nexport default interface IGestureHandler {\n  active: boolean;\n  activationIndex: number;\n  awaiting: boolean;\n  handlerTag: number;\n  readonly config: Config;\n  readonly delegate: GestureHandlerDelegate<unknown, this>;\n  readonly tracker: PointerTracker;\n  state: State;\n  shouldCancelWhenOutside: boolean;\n  shouldResetProgress: boolean;\n  enabled: boolean;\n  pointerType: PointerType;\n\n  attachEventManager: (manager: EventManager<unknown>) => void;\n\n  isButtonInConfig: (\n    mouseButton: MouseButton | undefined\n  ) => boolean | number | undefined;\n\n  getTrackedPointersID: () => number[];\n\n  begin: () => void;\n  activate: (force: boolean) => void;\n  end: () => void;\n  fail: () => void;\n  cancel: () => void;\n\n  reset: () => void;\n\n  shouldWaitForHandlerFailure: (handler: IGestureHandler) => boolean;\n  shouldRequireToWaitForFailure: (handler: IGestureHandler) => boolean;\n  shouldRecognizeSimultaneously: (handler: IGestureHandler) => boolean;\n  shouldBeCancelledByOther: (handler: IGestureHandler) => boolean;\n\n  sendEvent: (newState: State, oldState: State) => void;\n\n  updateGestureConfig: (config: Config) => void;\n\n  isButton?: () => boolean;\n}\n"],"mappings":"","ignoreList":[]}