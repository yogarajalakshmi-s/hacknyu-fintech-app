"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _State = require("../../State");
var _GestureHandler = _interopRequireDefault(require("./GestureHandler"));
var _RotationGestureDetector = _interopRequireDefault(require("../detectors/RotationGestureDetector"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
const ROTATION_RECOGNITION_THRESHOLD = Math.PI / 36;
class RotationGestureHandler extends _GestureHandler.default {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "rotation", 0);
    _defineProperty(this, "velocity", 0);
    _defineProperty(this, "cachedAnchorX", 0);
    _defineProperty(this, "cachedAnchorY", 0);
    _defineProperty(this, "rotationGestureListener", {
      onRotationBegin: _detector => true,
      onRotation: detector => {
        const previousRotation = this.rotation;
        this.rotation += detector.rotation;
        const delta = detector.timeDelta;
        if (delta > 0) {
          this.velocity = (this.rotation - previousRotation) / delta;
        }
        if (Math.abs(this.rotation) >= ROTATION_RECOGNITION_THRESHOLD && this.state === _State.State.BEGAN) {
          this.activate();
        }
        return true;
      },
      onRotationEnd: _detector => {
        this.end();
      }
    });
    _defineProperty(this, "rotationGestureDetector", new _RotationGestureDetector.default(this.rotationGestureListener));
  }
  init(ref, propsRef) {
    super.init(ref, propsRef);
    this.shouldCancelWhenOutside = false;
  }
  transformNativeEvent() {
    return {
      rotation: this.rotation ? this.rotation : 0,
      anchorX: this.getAnchorX(),
      anchorY: this.getAnchorY(),
      velocity: this.velocity ? this.velocity : 0
    };
  }
  getAnchorX() {
    const anchorX = this.rotationGestureDetector.anchorX;
    return anchorX ? anchorX : this.cachedAnchorX;
  }
  getAnchorY() {
    const anchorY = this.rotationGestureDetector.anchorY;
    return anchorY ? anchorY : this.cachedAnchorY;
  }
  onPointerDown(event) {
    this.tracker.addToTracker(event);
    super.onPointerDown(event);
    this.tryToSendTouchEvent(event);
  }
  onPointerAdd(event) {
    this.tracker.addToTracker(event);
    super.onPointerAdd(event);
    this.tryBegin();
    this.rotationGestureDetector.onTouchEvent(event, this.tracker);
  }
  onPointerMove(event) {
    if (this.tracker.trackedPointersCount < 2) {
      return;
    }
    if (this.getAnchorX()) {
      this.cachedAnchorX = this.getAnchorX();
    }
    if (this.getAnchorY()) {
      this.cachedAnchorY = this.getAnchorY();
    }
    this.tracker.track(event);
    this.rotationGestureDetector.onTouchEvent(event, this.tracker);
    super.onPointerMove(event);
  }
  onPointerOutOfBounds(event) {
    if (this.tracker.trackedPointersCount < 2) {
      return;
    }
    if (this.getAnchorX()) {
      this.cachedAnchorX = this.getAnchorX();
    }
    if (this.getAnchorY()) {
      this.cachedAnchorY = this.getAnchorY();
    }
    this.tracker.track(event);
    this.rotationGestureDetector.onTouchEvent(event, this.tracker);
    super.onPointerOutOfBounds(event);
  }
  onPointerUp(event) {
    super.onPointerUp(event);
    this.tracker.removeFromTracker(event.pointerId);
    this.rotationGestureDetector.onTouchEvent(event, this.tracker);
    if (this.state !== _State.State.ACTIVE) {
      return;
    }
    if (this.state === _State.State.ACTIVE) {
      this.end();
    } else {
      this.fail();
    }
  }
  onPointerRemove(event) {
    super.onPointerRemove(event);
    this.rotationGestureDetector.onTouchEvent(event, this.tracker);
    this.tracker.removeFromTracker(event.pointerId);
  }
  tryBegin() {
    if (this.state !== _State.State.UNDETERMINED) {
      return;
    }
    this.begin();
  }
  onReset() {
    if (this.state === _State.State.ACTIVE) {
      return;
    }
    this.rotation = 0;
    this.velocity = 0;
    this.rotationGestureDetector.reset();
  }
}
exports.default = RotationGestureHandler;
//# sourceMappingURL=RotationGestureHandler.js.map