{"version":3,"names":["_VelocityTracker","_interopRequireDefault","require","e","__esModule","default","_defineProperty","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","MAX_POINTERS","PointerTracker","constructor","VelocityTracker","Map","x","y","lastMovedPointerId","NaN","touchEventsIds","set","addToTracker","event","trackedPointers","has","pointerId","newElement","abosoluteCoords","relativeCoords","offsetX","offsetY","timestamp","time","velocityX","velocityY","mapTouchEventId","cachedAbsoluteAverages","getAbsoluteCoordsAverage","cachedRelativeAverages","getRelativeCoordsAverage","removeFromTracker","delete","removeMappedTouchId","track","element","get","velocityTracker","add","velocity","id","mappedId","touchId","isNaN","getMappedTouchEventId","touchEventId","key","entries","getVelocity","_this$trackedPointers","_this$trackedPointers2","getLastAbsoluteCoords","_this$trackedPointers3","getLastRelativeCoords","_this$trackedPointers4","coordsSum","getAbsoluteCoordsSum","avgX","size","avgY","averages","getRelativeCoordsSum","ignoredPointer","sum","forEach","resetTracker","reset","clear","shareCommonPointers","stPointers","ndPointers","some","includes","trackedPointersCount","trackedPointersIDs","keys","_value","push","_trackedPointers","exports"],"sources":["PointerTracker.ts"],"sourcesContent":["import { AdaptedEvent, Point } from '../interfaces';\nimport VelocityTracker from './VelocityTracker';\n\nexport interface TrackerElement {\n  abosoluteCoords: Point;\n  relativeCoords: Point;\n  timestamp: number;\n  velocityX: number;\n  velocityY: number;\n}\n\nconst MAX_POINTERS = 20;\n\nexport default class PointerTracker {\n  private velocityTracker = new VelocityTracker();\n  private readonly _trackedPointers: Map<number, TrackerElement> = new Map<\n    number,\n    TrackerElement\n  >();\n\n  private touchEventsIds: Map<number, number> = new Map<number, number>();\n\n  private lastMovedPointerId: number;\n\n  private cachedAbsoluteAverages: Point = { x: 0, y: 0 };\n  private cachedRelativeAverages: Point = { x: 0, y: 0 };\n\n  public constructor() {\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public addToTracker(event: AdaptedEvent): void {\n    if (this.trackedPointers.has(event.pointerId)) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    const newElement: TrackerElement = {\n      abosoluteCoords: { x: event.x, y: event.y },\n      relativeCoords: { x: event.offsetX, y: event.offsetY },\n      timestamp: event.time,\n      velocityX: 0,\n      velocityY: 0,\n    };\n\n    this.trackedPointers.set(event.pointerId, newElement);\n    this.mapTouchEventId(event.pointerId);\n\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n\n  public removeFromTracker(pointerId: number): void {\n    this.trackedPointers.delete(pointerId);\n    this.removeMappedTouchId(pointerId);\n  }\n\n  public track(event: AdaptedEvent): void {\n    const element: TrackerElement = this.trackedPointers.get(\n      event.pointerId\n    ) as TrackerElement;\n\n    if (!element) {\n      return;\n    }\n\n    this.lastMovedPointerId = event.pointerId;\n\n    this.velocityTracker.add(event);\n    const [velocityX, velocityY] = this.velocityTracker.velocity;\n\n    element.velocityX = velocityX;\n    element.velocityY = velocityY;\n\n    element.abosoluteCoords = { x: event.x, y: event.y };\n    element.relativeCoords = { x: event.offsetX, y: event.offsetY };\n\n    this.trackedPointers.set(event.pointerId, element);\n\n    this.cachedAbsoluteAverages = this.getAbsoluteCoordsAverage();\n    this.cachedRelativeAverages = this.getRelativeCoordsAverage();\n  }\n\n  // Mapping TouchEvents ID\n  private mapTouchEventId(id: number): void {\n    for (const [mappedId, touchId] of this.touchEventsIds) {\n      if (isNaN(touchId)) {\n        this.touchEventsIds.set(mappedId, id);\n        break;\n      }\n    }\n  }\n\n  private removeMappedTouchId(id: number): void {\n    const mappedId: number = this.getMappedTouchEventId(id);\n    if (!isNaN(mappedId)) {\n      this.touchEventsIds.set(mappedId, NaN);\n    }\n  }\n\n  public getMappedTouchEventId(touchEventId: number): number {\n    for (const [key, value] of this.touchEventsIds.entries()) {\n      if (value === touchEventId) {\n        return key;\n      }\n    }\n\n    return NaN;\n  }\n\n  public getVelocity(pointerId: number) {\n    return {\n      x: this.trackedPointers.get(pointerId)?.velocityX as number,\n      y: this.trackedPointers.get(pointerId)?.velocityY as number,\n    };\n  }\n\n  public getLastAbsoluteCoords(pointerId?: number) {\n    return this.trackedPointers.get(pointerId ?? this.lastMovedPointerId)\n      ?.abosoluteCoords as Point;\n  }\n\n  public getLastRelativeCoords(pointerId?: number) {\n    return this.trackedPointers.get(pointerId ?? this.lastMovedPointerId)\n      ?.relativeCoords as Point;\n  }\n\n  // Some handlers use these methods to send average values in native event.\n  // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n  // In situation when NaN would be sent as a response, we return cached value.\n  // That prevents handlers from crashing\n\n  public getAbsoluteCoordsAverage() {\n    const coordsSum = this.getAbsoluteCoordsSum();\n\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n\n    const averages = {\n      x: isNaN(avgX) ? this.cachedAbsoluteAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedAbsoluteAverages.y : avgY,\n    };\n\n    return averages;\n  }\n\n  public getRelativeCoordsAverage() {\n    const coordsSum = this.getRelativeCoordsSum();\n\n    const avgX = coordsSum.x / this.trackedPointers.size;\n    const avgY = coordsSum.y / this.trackedPointers.size;\n\n    const averages = {\n      x: isNaN(avgX) ? this.cachedRelativeAverages.x : avgX,\n      y: isNaN(avgY) ? this.cachedRelativeAverages.y : avgY,\n    };\n\n    return averages;\n  }\n\n  public getAbsoluteCoordsSum(ignoredPointer?: number) {\n    const sum = { x: 0, y: 0 };\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.abosoluteCoords.x;\n        sum.y += value.abosoluteCoords.y;\n      }\n    });\n\n    return sum;\n  }\n\n  public getRelativeCoordsSum(ignoredPointer?: number) {\n    const sum = { x: 0, y: 0 };\n\n    this.trackedPointers.forEach((value, key) => {\n      if (key !== ignoredPointer) {\n        sum.x += value.relativeCoords.x;\n        sum.y += value.relativeCoords.y;\n      }\n    });\n\n    return sum;\n  }\n\n  public resetTracker(): void {\n    this.velocityTracker.reset();\n    this.trackedPointers.clear();\n    this.lastMovedPointerId = NaN;\n\n    for (let i = 0; i < MAX_POINTERS; ++i) {\n      this.touchEventsIds.set(i, NaN);\n    }\n  }\n\n  public static shareCommonPointers(\n    stPointers: number[],\n    ndPointers: number[]\n  ): boolean {\n    return stPointers.some((pointerId) => ndPointers.includes(pointerId));\n  }\n\n  public get trackedPointersCount(): number {\n    return this.trackedPointers.size;\n  }\n\n  public get trackedPointersIDs() {\n    const keys: number[] = [];\n\n    this.trackedPointers.forEach((_value, key) => {\n      keys.push(key);\n    });\n\n    return keys;\n  }\n\n  public get trackedPointers() {\n    return this._trackedPointers;\n  }\n}\n"],"mappings":"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","ignoreList":[]}