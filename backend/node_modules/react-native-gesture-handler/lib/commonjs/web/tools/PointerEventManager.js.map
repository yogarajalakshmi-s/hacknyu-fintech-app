{"version":3,"names":["_EventManager","_interopRequireDefault","require","_gestureHandlerCommon","_interfaces","_utils","_PointerType","e","__esModule","default","_defineProperty","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","POINTER_CAPTURE_EXCLUDE_LIST","Set","PointerEventManager","EventManager","constructor","view","Map","event","isPointerInBounds","x","clientX","y","clientY","adaptedEvent","mapEvent","EventTypes","DOWN","target","has","tagName","setPointerCapture","pointerId","markAsInBounds","trackedPointers","add","activePointersCounter","eventType","ADDITIONAL_POINTER_DOWN","onPointerAdd","onPointerDown","UP","releasePointerCapture","markAsOutOfBounds","delete","ADDITIONAL_POINTER_UP","onPointerRemove","onPointerUp","MOVE","hasPointerCapture","inBounds","pointerIndex","pointersInBounds","indexOf","ENTER","onPointerEnter","onPointerMove","LEAVE","onPointerLeave","onPointerOutOfBounds","lastPosition","CANCEL","onPointerCancel","clear","onPointerMoveOver","onPointerMoveOut","mouseButtonsMapper","set","MouseButton","LEFT","MIDDLE","RIGHT","BUTTON_4","BUTTON_5","Infinity","registerListeners","addEventListener","pointerDownCallback","pointerUpCallback","pointerMoveCallback","pointerCancelCallback","pointerEnterCallback","pointerLeaveCallback","lostPointerCaptureCallback","unregisterListeners","removeEventListener","_PointerTypeMapping$g","rect","getBoundingClientRect","scaleX","scaleY","calculateViewScale","offsetX","left","offsetY","top","pointerType","PointerTypeMapping","get","PointerType","OTHER","button","time","timeStamp","stylusData","tryExtractStylusData","resetManager","exports"],"sources":["PointerEventManager.ts"],"sourcesContent":["import EventManager from './EventManager';\nimport { MouseButton } from '../../handlers/gestureHandlerCommon';\nimport { AdaptedEvent, EventTypes, Point } from '../interfaces';\nimport {\n  PointerTypeMapping,\n  calculateViewScale,\n  tryExtractStylusData,\n  isPointerInBounds,\n} from '../utils';\nimport { PointerType } from '../../PointerType';\n\nconst POINTER_CAPTURE_EXCLUDE_LIST = new Set<string>(['SELECT', 'INPUT']);\n\nexport default class PointerEventManager extends EventManager<HTMLElement> {\n  private trackedPointers = new Set<number>();\n  private readonly mouseButtonsMapper = new Map<number, MouseButton>();\n  private lastPosition: Point;\n\n  constructor(view: HTMLElement) {\n    super(view);\n\n    this.mouseButtonsMapper.set(0, MouseButton.LEFT);\n    this.mouseButtonsMapper.set(1, MouseButton.MIDDLE);\n    this.mouseButtonsMapper.set(2, MouseButton.RIGHT);\n    this.mouseButtonsMapper.set(3, MouseButton.BUTTON_4);\n    this.mouseButtonsMapper.set(4, MouseButton.BUTTON_5);\n\n    this.lastPosition = {\n      x: -Infinity,\n      y: -Infinity,\n    };\n  }\n\n  private pointerDownCallback = (event: PointerEvent) => {\n    if (!isPointerInBounds(this.view, { x: event.clientX, y: event.clientY })) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.DOWN);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.setPointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsInBounds(adaptedEvent.pointerId);\n    this.trackedPointers.add(adaptedEvent.pointerId);\n\n    if (++this.activePointersCounter > 1) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_DOWN;\n      this.onPointerAdd(adaptedEvent);\n    } else {\n      this.onPointerDown(adaptedEvent);\n    }\n  };\n\n  private pointerUpCallback = (event: PointerEvent) => {\n    // When we call reset on gesture handlers, it also resets their event managers\n    // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n    // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n    // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n    if (this.activePointersCounter === 0) {\n      return;\n    }\n\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.UP);\n    const target = event.target as HTMLElement;\n\n    if (!POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)) {\n      target.releasePointerCapture(adaptedEvent.pointerId);\n    }\n\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.trackedPointers.delete(adaptedEvent.pointerId);\n\n    if (--this.activePointersCounter > 0) {\n      adaptedEvent.eventType = EventTypes.ADDITIONAL_POINTER_UP;\n      this.onPointerRemove(adaptedEvent);\n    } else {\n      this.onPointerUp(adaptedEvent);\n    }\n  };\n\n  private pointerMoveCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.MOVE);\n    const target = event.target as HTMLElement;\n\n    // You may be wondering why are we setting pointer capture here, when we\n    // already set it in `pointerdown` handler. Well, that's a great question,\n    // for which I don't have an answer. Specification (https://www.w3.org/TR/pointerevents2/#dom-element-setpointercapture)\n    // says that the requirement for `setPointerCapture` to work is that pointer\n    // must be in 'active buttons state`, otherwise it will fail silently, which\n    // is lovely. Obviously, when `pointerdown` is fired, one of the buttons\n    // (when using mouse) is pressed, but that doesn't mean that `setPointerCapture`\n    // will succeed, for some reason. Since it fails silently, we don't actually know\n    // if it worked or not (there's `gotpointercapture` event, but the complexity of\n    // incorporating it here seems stupid), so we just call it again here, every time\n    // pointer moves until it succeeds.\n    // God, I do love web development.\n    if (\n      !target.hasPointerCapture(event.pointerId) &&\n      !POINTER_CAPTURE_EXCLUDE_LIST.has(target.tagName)\n    ) {\n      target.setPointerCapture(event.pointerId);\n    }\n\n    const inBounds: boolean = isPointerInBounds(this.view, {\n      x: adaptedEvent.x,\n      y: adaptedEvent.y,\n    });\n\n    const pointerIndex: number = this.pointersInBounds.indexOf(\n      adaptedEvent.pointerId\n    );\n\n    if (inBounds) {\n      if (pointerIndex < 0) {\n        adaptedEvent.eventType = EventTypes.ENTER;\n        this.onPointerEnter(adaptedEvent);\n        this.markAsInBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerMove(adaptedEvent);\n      }\n    } else {\n      if (pointerIndex >= 0) {\n        adaptedEvent.eventType = EventTypes.LEAVE;\n        this.onPointerLeave(adaptedEvent);\n        this.markAsOutOfBounds(adaptedEvent.pointerId);\n      } else {\n        this.onPointerOutOfBounds(adaptedEvent);\n      }\n    }\n\n    this.lastPosition.x = event.x;\n    this.lastPosition.y = event.y;\n  };\n\n  private pointerCancelCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    this.onPointerCancel(adaptedEvent);\n    this.markAsOutOfBounds(adaptedEvent.pointerId);\n    this.activePointersCounter = 0;\n    this.trackedPointers.clear();\n  };\n\n  private pointerEnterCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.ENTER);\n\n    this.onPointerMoveOver(adaptedEvent);\n  };\n\n  private pointerLeaveCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.LEAVE);\n\n    this.onPointerMoveOut(adaptedEvent);\n  };\n\n  private lostPointerCaptureCallback = (event: PointerEvent) => {\n    const adaptedEvent: AdaptedEvent = this.mapEvent(event, EventTypes.CANCEL);\n\n    if (this.trackedPointers.has(adaptedEvent.pointerId)) {\n      // In some cases the `pointerup` event is not fired, but `lostpointercapture` is.\n      // Here we simulate the `pointercancel` event to make sure the gesture handler stops tracking it.\n      this.onPointerCancel(adaptedEvent);\n\n      this.activePointersCounter = 0;\n      this.trackedPointers.clear();\n    }\n  };\n\n  public registerListeners(): void {\n    this.view.addEventListener('pointerdown', this.pointerDownCallback);\n    this.view.addEventListener('pointerup', this.pointerUpCallback);\n    this.view.addEventListener('pointermove', this.pointerMoveCallback);\n    this.view.addEventListener('pointercancel', this.pointerCancelCallback);\n\n    // onPointerEnter and onPointerLeave are triggered by a custom logic responsible for\n    // handling shouldCancelWhenOutside flag, and are unreliable unless the pointer is down.\n    // We therefore use pointerenter and pointerleave events to handle the hover gesture,\n    // mapping them to onPointerMoveOver and onPointerMoveOut respectively.\n    this.view.addEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.addEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.addEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  public unregisterListeners(): void {\n    this.view.removeEventListener('pointerdown', this.pointerDownCallback);\n    this.view.removeEventListener('pointerup', this.pointerUpCallback);\n    this.view.removeEventListener('pointermove', this.pointerMoveCallback);\n    this.view.removeEventListener('pointercancel', this.pointerCancelCallback);\n    this.view.removeEventListener('pointerenter', this.pointerEnterCallback);\n    this.view.removeEventListener('pointerleave', this.pointerLeaveCallback);\n    this.view.removeEventListener(\n      'lostpointercapture',\n      this.lostPointerCaptureCallback\n    );\n  }\n\n  protected mapEvent(event: PointerEvent, eventType: EventTypes): AdaptedEvent {\n    const rect = this.view.getBoundingClientRect();\n    const { scaleX, scaleY } = calculateViewScale(this.view);\n\n    return {\n      x: event.clientX,\n      y: event.clientY,\n      offsetX: (event.clientX - rect.left) / scaleX,\n      offsetY: (event.clientY - rect.top) / scaleY,\n      pointerId: event.pointerId,\n      eventType: eventType,\n      pointerType:\n        PointerTypeMapping.get(event.pointerType) ?? PointerType.OTHER,\n      button: this.mouseButtonsMapper.get(event.button),\n      time: event.timeStamp,\n      stylusData: tryExtractStylusData(event),\n    };\n  }\n\n  public resetManager(): void {\n    super.resetManager();\n    this.trackedPointers.clear();\n  }\n}\n"],"mappings":"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","ignoreList":[]}