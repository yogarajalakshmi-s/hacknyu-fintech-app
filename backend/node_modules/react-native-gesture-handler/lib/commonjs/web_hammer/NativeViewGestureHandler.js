"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _DiscreteGestureHandler = _interopRequireDefault(require("./DiscreteGestureHandler"));
var NodeManager = _interopRequireWildcard(require("./NodeManager"));
var _PressGestureHandler = _interopRequireDefault(require("./PressGestureHandler"));
var _utils = require("./utils");
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
class NativeViewGestureHandler extends _PressGestureHandler.default {
  get isNative() {
    return true;
  }
  onRawEvent(ev) {
    super.onRawEvent(ev);
    if (!ev.isFinal) {
      // if (this.ref instanceof ScrollView) {
      if ((0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({
        x: ev.deltaX,
        y: ev.deltaY
      }), 10)) {
        // @ts-ignore FIXME(TS) config type
        if (this.config.disallowInterruption) {
          const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {
            const {
              handlerTag,
              view,
              isGestureRunning
            } = gesture;
            return (
              // Check if this gesture isn't self
              handlerTag !== this.handlerTag &&
              // Ensure the gesture needs to be cancelled
              isGestureRunning &&
              // ScrollView can cancel discrete gestures like taps and presses
              gesture instanceof _DiscreteGestureHandler.default &&
              // Ensure a view exists and is a child of the current view
              view &&
              // @ts-ignore FIXME(TS) view type
              this.view.contains(view)
            );
          });
          // Cancel all of the gestures that passed the filter
          for (const gesture of gestures) {
            // TODO: Bacon: Send some cached event.
            gesture.forceInvalidate(ev);
          }
        }
      }
    }
  }
}
var _default = exports.default = NativeViewGestureHandler;
//# sourceMappingURL=NativeViewGestureHandler.js.map