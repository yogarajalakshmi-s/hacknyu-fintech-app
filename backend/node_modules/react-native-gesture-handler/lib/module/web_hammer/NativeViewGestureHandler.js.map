{"version":3,"names":["DiscreteGestureHandler","NodeManager","PressGestureHandler","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","NativeViewGestureHandler","isNative","onRawEvent","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","getNodes","filter","gesture","handlerTag","view","isGestureRunning","contains","forceInvalidate"],"sources":["NativeViewGestureHandler.ts"],"sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  get isNative() {\n    return true;\n  }\n\n  onRawEvent(ev: HammerInputExt) {\n    super.onRawEvent(ev);\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\n        // @ts-ignore FIXME(TS) config type\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(\n            (gesture) => {\n              const { handlerTag, view, isGestureRunning } = gesture;\n              return (\n                // Check if this gesture isn't self\n                handlerTag !== this.handlerTag &&\n                // Ensure the gesture needs to be cancelled\n                isGestureRunning &&\n                // ScrollView can cancel discrete gestures like taps and presses\n                gesture instanceof DiscreteGestureHandler &&\n                // Ensure a view exists and is a child of the current view\n                view &&\n                // @ts-ignore FIXME(TS) view type\n                this.view.contains(view)\n              );\n            }\n          );\n          // Cancel all of the gestures that passed the filter\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n}\n\nexport default NativeViewGestureHandler;\n"],"mappings":"AAAA,OAAOA,sBAAsB,MAAM,0BAA0B;AAE7D,OAAO,KAAKC,WAAW,MAAM,eAAe;AAC5C,OAAOC,mBAAmB,MAAM,uBAAuB;AACvD,SAASC,mBAAmB,EAAEC,UAAU,QAAQ,SAAS;AAEzD,MAAMC,wBAAwB,SAASH,mBAAmB,CAAC;EACzD,IAAII,QAAQA,CAAA,EAAG;IACb,OAAO,IAAI;EACb;EAEAC,UAAUA,CAACC,EAAkB,EAAE;IAC7B,KAAK,CAACD,UAAU,CAACC,EAAE,CAAC;IACpB,IAAI,CAACA,EAAE,CAACC,OAAO,EAAE;MACf;MACA,IAAIN,mBAAmB,CAACC,UAAU,CAAC;QAAEM,CAAC,EAAEF,EAAE,CAACG,MAAM;QAAEC,CAAC,EAAEJ,EAAE,CAACK;MAAO,CAAC,CAAC,EAAE,EAAE,CAAC,EAAE;QACvE;QACA,IAAI,IAAI,CAACC,MAAM,CAACC,oBAAoB,EAAE;UACpC,MAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAM,CAACjB,WAAW,CAACkB,QAAQ,CAAC,CAAC,CAAC,CAACC,MAAM,CAC1DC,OAAO,IAAK;YACX,MAAM;cAAEC,UAAU;cAAEC,IAAI;cAAEC;YAAiB,CAAC,GAAGH,OAAO;YACtD;cACE;cACAC,UAAU,KAAK,IAAI,CAACA,UAAU;cAC9B;cACAE,gBAAgB;cAChB;cACAH,OAAO,YAAYrB,sBAAsB;cACzC;cACAuB,IAAI;cACJ;cACA,IAAI,CAACA,IAAI,CAACE,QAAQ,CAACF,IAAI;YAAC;UAE5B,CACF,CAAC;UACD;UACA,KAAK,MAAMF,OAAO,IAAIL,QAAQ,EAAE;YAC9B;YACAK,OAAO,CAACK,eAAe,CAAClB,EAAE,CAAC;UAC7B;QACF;MACF;IACF;EACF;AACF;AAEA,eAAeH,wBAAwB","ignoreList":[]}