{"version":3,"names":["Hammer","DiscreteGestureHandler","isnan","TapGestureHandler","constructor","args","_defineProperty","ev","_getPendingGestures","length","_shouldFireEndEvent","eventType","INPUT_END","sendEvent","INPUT_MOVE","isFinal","onGestureEnded","name","NativeGestureClass","Tap","maxDelayMs","config","simulateCancelEvent","inputData","isGestureRunning","cancelEvent","onGestureActivated","onSuccessfulTap","onRawEvent","hasGestureFailed","gesture","hammer","get","options","enable","clearTimeout","_multiTapTimer","onStart","maxPointers","setTimeout","_timer","getHammerConfig","event","taps","numberOfTaps","interval","time","maxDurationMs","updateGestureConfig","shouldCancelWhenOutside","maxDeltaX","Number","NaN","maxDeltaY","minDurationMs","maxDist","minPointers","props","onWaitingEnded","_gesture"],"sources":["TapGestureHandler.ts"],"sourcesContent":["import Hammer from '@egjs/hammerjs';\n\nimport DiscreteGestureHandler from './DiscreteGestureHandler';\nimport { HammerInputExt } from './GestureHandler';\nimport { isnan } from './utils';\n\nclass TapGestureHandler extends DiscreteGestureHandler {\n  private _shouldFireEndEvent: HammerInputExt | null = null;\n  private _timer: any;\n  private _multiTapTimer: any; // TODO unused?\n  get name() {\n    return 'tap';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Tap;\n  }\n\n  get maxDelayMs() {\n    // @ts-ignore TODO(TS) trace down config\n    return isnan(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n  }\n\n  simulateCancelEvent(inputData: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.cancelEvent(inputData);\n    }\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.onSuccessfulTap(ev);\n    }\n  }\n\n  onSuccessfulTap = (ev: HammerInputExt) => {\n    if (this._getPendingGestures().length) {\n      this._shouldFireEndEvent = ev;\n      return;\n    }\n    if (ev.eventType === Hammer.INPUT_END) {\n      this.sendEvent({ ...ev, eventType: Hammer.INPUT_MOVE });\n    }\n    // When handler gets activated it will turn into State.END immediately.\n    this.sendEvent({ ...ev, isFinal: true });\n    this.onGestureEnded(ev);\n  };\n\n  onRawEvent(ev: HammerInput) {\n    super.onRawEvent(ev);\n\n    // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n    if (\n      !this.hasGestureFailed &&\n      !this.isGestureRunning &&\n      // Prevent multi-pointer events from misfiring.\n      !ev.isFinal\n    ) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n    if (ev.isFinal && ev.maxPointers > 1) {\n      setTimeout(() => {\n        // Handle case where one finger presses slightly\n        // after the first finger on a multi-tap event\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    }\n\n    if (this.hasGestureFailed) {\n      return;\n    }\n    // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n    if (ev.isFinal) {\n      // Handle case where one finger presses slightly\n      // after the first finger on a multi-tap event\n      if (ev.maxPointers > 1) {\n        setTimeout(() => {\n          if (this.isGestureRunning) {\n            this.cancelEvent(ev);\n          }\n        });\n      }\n\n      // Clear last timer\n      clearTimeout(this._timer);\n      // Create time out for multi-taps.\n      this._timer = setTimeout(() => {\n        this.hasGestureFailed = true;\n        this.cancelEvent(ev);\n      }, this.maxDelayMs);\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer!.get(this.name);\n      // @ts-ignore TODO(TS) trace down config\n      if (gesture.options.enable(gesture, ev)) {\n        clearTimeout(this._multiTapTimer);\n\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      ...super.getHammerConfig(),\n      event: this.name,\n      // @ts-ignore TODO(TS) trace down config\n      taps: isnan(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n      interval: this.maxDelayMs,\n      time:\n        // @ts-ignore TODO(TS) trace down config\n        isnan(this.config.maxDurationMs) || this.config.maxDurationMs == null\n          ? 250\n          : // @ts-ignore TODO(TS) trace down config\n            this.config.maxDurationMs,\n    };\n  }\n\n  updateGestureConfig({\n    shouldCancelWhenOutside = true,\n    maxDeltaX = Number.NaN,\n    maxDeltaY = Number.NaN,\n    numberOfTaps = 1,\n    minDurationMs = 525,\n    maxDelayMs = Number.NaN,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN,\n    maxDist = 2,\n    minPointers = 1,\n    maxPointers = 1,\n    ...props\n  }) {\n    return super.updateGestureConfig({\n      shouldCancelWhenOutside,\n      numberOfTaps,\n      maxDeltaX,\n      maxDeltaY,\n      minDurationMs,\n      maxDelayMs,\n      maxDist,\n      minPointers,\n      maxPointers,\n      ...props,\n    });\n  }\n\n  onGestureEnded(...props: any) {\n    clearTimeout(this._timer);\n    // @ts-ignore TODO(TS) check how onGestureEnded works\n    super.onGestureEnded(...props);\n  }\n\n  onWaitingEnded(_gesture: any) {\n    if (this._shouldFireEndEvent) {\n      this.onSuccessfulTap(this._shouldFireEndEvent);\n      this._shouldFireEndEvent = null;\n    }\n  }\n}\nexport default TapGestureHandler;\n"],"mappings":"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","ignoreList":[]}