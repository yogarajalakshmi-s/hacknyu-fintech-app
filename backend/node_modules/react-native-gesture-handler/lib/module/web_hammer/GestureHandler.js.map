{"version":3,"names":["Hammer","findNodeHandle","State","EventMap","NodeManager","ghQueueMicrotask","gestureInstances","GestureHandler","id","name","gestureInstance","isNative","isDiscrete","shouldEnableGestureOnSetup","Error","constructor","_defineProperty","UNDETERMINED","Array","isArray","config","waitFor","gesture","removePendingGesture","clearSelfAsPending","hammer","stop","destroy","x","y","rect","view","getBoundingClientRect","pointerInside","left","right","top","bottom","nativeEvent","onGestureHandlerEvent","onGestureHandlerStateChange","propsRef","current","event","transformEventData","invokeNullableMethod","lastSentState","state","get","enable","recognizer","inputData","enabled","isGestureRunning","hasGestureFailed","options","maxPointers","_stillWaiting","_getPendingGestures","length","hasCustomActivationCriteria","deltaRotation","initialRotation","rotation","success","failed","isGestureEnabledForEvent","getConfig","simulateCancelEvent","params","getHammerConfig","set","onWaitingEnded","_gesture","pendingGestures","addPendingGesture","_config","_recognizer","_event","NativeGestureClass","updateHasCustomActivationCriteria","updateGestureConfig","props","ensureConfig","sync","getState","type","eventType","numberOfPointers","changedTouch","changedPointers","isPointInView","clientX","clientY","previousState","oldState","transformNativeEvent","handlerTag","target","ref","undefined","timeStamp","Date","now","cancelPendingGestures","Object","values","cancelEvent","notifyPendingGestures","onGestureEnded","forceInvalidate","sendEvent","INPUT_CANCEL","isFinal","onRawEvent","isFirst","shouldUseTouchEvents","_config$simultaneousH","_config$simultaneousH2","simultaneousHandlers","some","handler","setView","SUPPORTS_TOUCH","window","Manager","inputClass","TouchInput","add","on","ev","setTimeout","setupEvents","onStart","onGestureActivated","deltaX","deltaY","__initialX","__initialY","onSuccess","stillWaiting","filter","pointers","minPointers","_inputData","minDist","minDistSq","minVelocity","minVelocitySq","maxDist","maxDistSq","asArray","map","getHandler","v","configProps","forEach","prop","Number","NaN","method","__getHandler","argMapping","__nodeConfig","index","key","value","entries","nativeValue","setValue"],"sources":["GestureHandler.ts"],"sourcesContent":["/* eslint-disable eslint-comments/no-unlimited-disable */\n/* eslint-disable */\nimport Hammer from '@egjs/hammerjs';\nimport { findNodeHandle } from 'react-native';\n\nimport { State } from '../State';\nimport { EventMap } from './constants';\nimport * as NodeManager from './NodeManager';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\n\n// TODO(TS) Replace with HammerInput if https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438/files is merged\nexport type HammerInputExt = Omit<HammerInput, 'destroy' | 'handler' | 'init'>;\n\nexport type Config = Partial<{\n  enabled: boolean;\n  minPointers: number;\n  maxPointers: number;\n  minDist: number;\n  minDistSq: number;\n  minVelocity: number;\n  minVelocitySq: number;\n  maxDist: number;\n  maxDistSq: number;\n  failOffsetXStart: number;\n  failOffsetYStart: number;\n  failOffsetXEnd: number;\n  failOffsetYEnd: number;\n  activeOffsetXStart: number;\n  activeOffsetXEnd: number;\n  activeOffsetYStart: number;\n  activeOffsetYEnd: number;\n  waitFor: any[] | null;\n  simultaneousHandlers: any[] | null;\n}>;\n\ntype NativeEvent = ReturnType<GestureHandler['transformEventData']>;\n\nlet gestureInstances = 0;\n\nabstract class GestureHandler {\n  public handlerTag: any;\n  public isGestureRunning = false;\n  public view: number | null = null;\n  protected hasCustomActivationCriteria: boolean;\n  protected hasGestureFailed = false;\n  protected hammer: HammerManager | null = null;\n  protected initialRotation: number | null = null;\n  protected __initialX: any;\n  protected __initialY: any;\n  protected config: Config = {};\n  protected previousState: State = State.UNDETERMINED;\n  private pendingGestures: Record<string, this> = {};\n  private oldState: State = State.UNDETERMINED;\n  private lastSentState: State | null = null;\n  private gestureInstance: number;\n  private _stillWaiting: any;\n  private propsRef: any;\n  private ref: any;\n\n  abstract get name(): string;\n\n  get id() {\n    return `${this.name}${this.gestureInstance}`;\n  }\n\n  // a simple way to check if GestureHandler is NativeViewGestureHandler, since importing it\n  // here to use instanceof would cause import cycle\n  get isNative() {\n    return false;\n  }\n\n  get isDiscrete() {\n    return false;\n  }\n\n  get shouldEnableGestureOnSetup(): boolean {\n    throw new Error('Must override GestureHandler.shouldEnableGestureOnSetup');\n  }\n\n  constructor() {\n    this.gestureInstance = gestureInstances++;\n    this.hasCustomActivationCriteria = false;\n  }\n\n  getConfig() {\n    return this.config;\n  }\n\n  onWaitingEnded(_gesture: this) {}\n\n  removePendingGesture(id: string) {\n    delete this.pendingGestures[id];\n  }\n\n  addPendingGesture(gesture: this) {\n    this.pendingGestures[gesture.id] = gesture;\n  }\n\n  isGestureEnabledForEvent(\n    _config: any,\n    _recognizer: any,\n    _event: any\n  ): { failed?: boolean; success?: boolean } {\n    return { success: true };\n  }\n\n  get NativeGestureClass(): RecognizerStatic {\n    throw new Error('Must override GestureHandler.NativeGestureClass');\n  }\n\n  updateHasCustomActivationCriteria(_config: Config) {\n    return true;\n  }\n\n  clearSelfAsPending = () => {\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.removePendingGesture(this.id);\n      }\n    }\n  };\n\n  updateGestureConfig({ enabled = true, ...props }) {\n    this.clearSelfAsPending();\n\n    this.config = this.ensureConfig({ enabled, ...props });\n    this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(\n      this.config\n    );\n    if (Array.isArray(this.config.waitFor)) {\n      for (const gesture of this.config.waitFor) {\n        gesture.addPendingGesture(this);\n      }\n    }\n\n    if (this.hammer) {\n      this.sync();\n    }\n    return this.config;\n  }\n\n  destroy = () => {\n    this.clearSelfAsPending();\n\n    if (this.hammer) {\n      this.hammer.stop(false);\n      this.hammer.destroy();\n    }\n    this.hammer = null;\n  };\n\n  isPointInView = ({ x, y }: { x: number; y: number }) => {\n    // @ts-ignore FIXME(TS)\n    const rect = this.view!.getBoundingClientRect();\n    const pointerInside =\n      x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    return pointerInside;\n  };\n\n  getState(type: keyof typeof EventMap): State {\n    // @ts-ignore TODO(TS) check if this is needed\n    if (type == 0) {\n      return 0;\n    }\n    return EventMap[type];\n  }\n\n  transformEventData(event: HammerInputExt) {\n    const { eventType, maxPointers: numberOfPointers } = event;\n    // const direction = DirectionMap[ev.direction];\n    const changedTouch = event.changedPointers[0];\n    const pointerInside = this.isPointInView({\n      x: changedTouch.clientX,\n      y: changedTouch.clientY,\n    });\n\n    // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n    const state = this.getState(eventType as 1 | 2 | 4 | 8);\n    if (state !== this.previousState) {\n      this.oldState = this.previousState;\n      this.previousState = state;\n    }\n\n    return {\n      nativeEvent: {\n        numberOfPointers,\n        state,\n        pointerInside,\n        ...this.transformNativeEvent(event),\n        // onHandlerStateChange only\n        handlerTag: this.handlerTag,\n        target: this.ref,\n        // send oldState only when the state was changed, or is different than ACTIVE\n        // GestureDetector relies on the presence of `oldState` to differentiate between\n        // update events and state change events\n        oldState:\n          state !== this.previousState || state != 4\n            ? this.oldState\n            : undefined,\n      },\n      timeStamp: Date.now(),\n    };\n  }\n\n  transformNativeEvent(_event: HammerInputExt) {\n    return {};\n  }\n\n  sendEvent = (nativeEvent: HammerInputExt) => {\n    const { onGestureHandlerEvent, onGestureHandlerStateChange } =\n      this.propsRef.current;\n\n    const event = this.transformEventData(nativeEvent);\n\n    invokeNullableMethod(onGestureHandlerEvent, event);\n    if (this.lastSentState !== event.nativeEvent.state) {\n      this.lastSentState = event.nativeEvent.state as State;\n      invokeNullableMethod(onGestureHandlerStateChange, event);\n    }\n  };\n\n  cancelPendingGestures(event: HammerInputExt) {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture && gesture.isGestureRunning) {\n        gesture.hasGestureFailed = true;\n        gesture.cancelEvent(event);\n      }\n    }\n  }\n\n  notifyPendingGestures() {\n    for (const gesture of Object.values(this.pendingGestures)) {\n      if (gesture) {\n        gesture.onWaitingEnded(this);\n      }\n    }\n  }\n\n  // FIXME event is undefined in runtime when firstly invoked (see Draggable example), check other functions taking event as input\n  onGestureEnded(event: HammerInputExt) {\n    this.isGestureRunning = false;\n    this.cancelPendingGestures(event);\n  }\n\n  forceInvalidate(event: HammerInputExt) {\n    if (this.isGestureRunning) {\n      this.hasGestureFailed = true;\n      this.cancelEvent(event);\n    }\n  }\n\n  cancelEvent(event: HammerInputExt) {\n    this.notifyPendingGestures();\n    this.sendEvent({\n      ...event,\n      eventType: Hammer.INPUT_CANCEL,\n      isFinal: true,\n    });\n    this.onGestureEnded(event);\n  }\n\n  onRawEvent({ isFirst }: HammerInputExt) {\n    if (isFirst) {\n      this.hasGestureFailed = false;\n    }\n  }\n\n  shouldUseTouchEvents(config: Config) {\n    return (\n      config.simultaneousHandlers?.some((handler) => handler.isNative) ?? false\n    );\n  }\n\n  setView(ref: Parameters<typeof findNodeHandle>['0'], propsRef: any) {\n    if (ref == null) {\n      this.destroy();\n      this.view = null;\n      return;\n    }\n\n    // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n    const SUPPORTS_TOUCH = 'ontouchstart' in window;\n    this.propsRef = propsRef;\n    this.ref = ref;\n\n    this.view = findNodeHandle(ref);\n\n    // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n    // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n    // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n    this.hammer =\n      SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config)\n        ? new Hammer.Manager(this.view as any, {\n            inputClass: Hammer.TouchInput,\n          })\n        : new Hammer.Manager(this.view as any);\n\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    const { NativeGestureClass } = this;\n    // @ts-ignore TODO(TS)\n    const gesture = new NativeGestureClass(this.getHammerConfig());\n    this.hammer.add(gesture);\n\n    this.hammer.on('hammer.input', (ev: HammerInput) => {\n      if (!this.config.enabled) {\n        this.hasGestureFailed = false;\n        this.isGestureRunning = false;\n        return;\n      }\n\n      this.onRawEvent(ev as unknown as HammerInputExt);\n\n      // TODO: Bacon: Check against something other than null\n      // The isFirst value is not called when the first rotation is calculated.\n      if (this.initialRotation === null && ev.rotation !== 0) {\n        this.initialRotation = ev.rotation;\n      }\n      if (ev.isFinal) {\n        // in favor of a willFail otherwise the last frame of the gesture will be captured.\n        setTimeout(() => {\n          this.initialRotation = null;\n          this.hasGestureFailed = false;\n        });\n      }\n    });\n\n    this.setupEvents();\n    this.sync();\n  }\n\n  setupEvents() {\n    // TODO(TS) Hammer types aren't exactly that what we get in runtime\n    if (!this.isDiscrete) {\n      this.hammer!.on(`${this.name}start`, (event: HammerInput) =>\n        this.onStart(event as unknown as HammerInputExt)\n      );\n      this.hammer!.on(\n        `${this.name}end ${this.name}cancel`,\n        (event: HammerInput) => {\n          this.onGestureEnded(event as unknown as HammerInputExt);\n        }\n      );\n    }\n    this.hammer!.on(this.name, (ev: HammerInput) =>\n      this.onGestureActivated(ev as unknown as HammerInputExt)\n    ); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n  }\n\n  onStart({ deltaX, deltaY, rotation }: HammerInputExt) {\n    // Reset the state for the next gesture\n    this.oldState = State.UNDETERMINED;\n    this.previousState = State.UNDETERMINED;\n    this.lastSentState = null;\n\n    this.isGestureRunning = true;\n    this.__initialX = deltaX;\n    this.__initialY = deltaY;\n    this.initialRotation = rotation;\n  }\n\n  onGestureActivated(ev: HammerInputExt) {\n    this.sendEvent(ev);\n  }\n\n  onSuccess() {}\n\n  _getPendingGestures() {\n    if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n      // Get the list of gestures that this gesture is still waiting for.\n      // Use `=== false` in case a ref that isn't a gesture handler is used.\n      const stillWaiting = this.config.waitFor.filter(\n        ({ hasGestureFailed }) => hasGestureFailed === false\n      );\n      return stillWaiting;\n    }\n    return [];\n  }\n\n  getHammerConfig() {\n    const pointers =\n      this.config.minPointers === this.config.maxPointers\n        ? this.config.minPointers\n        : 0;\n    return {\n      pointers,\n    };\n  }\n\n  sync = () => {\n    const gesture = this.hammer!.get(this.name);\n    if (!gesture) return;\n\n    const enable = (recognizer: any, inputData: any) => {\n      if (!this.config.enabled) {\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        return false;\n      }\n\n      // Prevent events before the system is ready.\n      if (\n        !inputData ||\n        !recognizer.options ||\n        typeof inputData.maxPointers === 'undefined'\n      ) {\n        return this.shouldEnableGestureOnSetup;\n      }\n\n      if (this.hasGestureFailed) {\n        return false;\n      }\n\n      if (!this.isDiscrete) {\n        if (this.isGestureRunning) {\n          return true;\n        }\n        // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n        // Only process if there are views to wait for.\n        this._stillWaiting = this._getPendingGestures();\n        // This gesture should continue waiting.\n        if (this._stillWaiting.length) {\n          // Check to see if one of the gestures you're waiting for has started.\n          // If it has then the gesture should fail.\n          for (const gesture of this._stillWaiting) {\n            // When the target gesture has started, this gesture must force fail.\n            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n              this.hasGestureFailed = true;\n              this.isGestureRunning = false;\n              return false;\n            }\n          }\n          // This gesture shouldn't start until the others have finished.\n          return false;\n        }\n      }\n\n      // Use default behaviour\n      if (!this.hasCustomActivationCriteria) {\n        return true;\n      }\n\n      const deltaRotation =\n        this.initialRotation == null\n          ? 0\n          : inputData.rotation - this.initialRotation;\n      // @ts-ignore FIXME(TS)\n      const { success, failed } = this.isGestureEnabledForEvent(\n        this.getConfig(),\n        recognizer,\n        {\n          ...inputData,\n          deltaRotation,\n        }\n      );\n\n      if (failed) {\n        this.simulateCancelEvent(inputData);\n        this.hasGestureFailed = true;\n      }\n      return success;\n    };\n\n    const params = this.getHammerConfig();\n    // @ts-ignore FIXME(TS)\n    gesture.set({ ...params, enable });\n  };\n\n  simulateCancelEvent(_inputData: any) {}\n\n  // Validate the props\n  ensureConfig(config: Config): Required<Config> {\n    const props = { ...config };\n\n    // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n    if ('minDist' in config) {\n      props.minDist = config.minDist;\n      props.minDistSq = props.minDist! * props.minDist!;\n    }\n    if ('minVelocity' in config) {\n      props.minVelocity = config.minVelocity;\n      props.minVelocitySq = props.minVelocity! * props.minVelocity!;\n    }\n    if ('maxDist' in config) {\n      props.maxDist = config.maxDist;\n      props.maxDistSq = config.maxDist! * config.maxDist!;\n    }\n    if ('waitFor' in config) {\n      props.waitFor = asArray(config.waitFor)\n        .map(({ handlerTag }: { handlerTag: number }) =>\n          NodeManager.getHandler(handlerTag)\n        )\n        .filter((v) => v);\n    } else {\n      props.waitFor = null;\n    }\n    if ('simultaneousHandlers' in config) {\n      const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n      props.simultaneousHandlers = asArray(config.simultaneousHandlers)\n        .map((handler: number | GestureHandler) => {\n          if (typeof handler === 'number') {\n            return NodeManager.getHandler(handler);\n          } else {\n            return NodeManager.getHandler(handler.handlerTag);\n          }\n        })\n        .filter((v) => v);\n\n      if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n        ghQueueMicrotask(() => {\n          // if the undelying event API needs to be changed, we need to unmount and mount\n          // the hammer instance again.\n          this.destroy();\n          this.setView(this.ref, this.propsRef);\n        });\n      }\n    } else {\n      props.simultaneousHandlers = null;\n    }\n\n    const configProps = [\n      'minPointers',\n      'maxPointers',\n      'minDist',\n      'maxDist',\n      'maxDistSq',\n      'minVelocitySq',\n      'minDistSq',\n      'minVelocity',\n      'failOffsetXStart',\n      'failOffsetYStart',\n      'failOffsetXEnd',\n      'failOffsetYEnd',\n      'activeOffsetXStart',\n      'activeOffsetXEnd',\n      'activeOffsetYStart',\n      'activeOffsetYEnd',\n    ] as const;\n    configProps.forEach((prop: (typeof configProps)[number]) => {\n      if (typeof props[prop] === 'undefined') {\n        props[prop] = Number.NaN;\n      }\n    });\n    return props as Required<Config>; // TODO(TS) how to convince TS that props are filled?\n  }\n}\n\n// TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(\n  method:\n    | ((event: NativeEvent) => void)\n    | { __getHandler: () => (event: NativeEvent) => void }\n    | { __nodeConfig: { argMapping: any } },\n  event: NativeEvent\n) {\n  if (method) {\n    if (typeof method === 'function') {\n      method(event);\n    } else {\n      // For use with reanimated's AnimatedEvent\n      if (\n        '__getHandler' in method &&\n        typeof method.__getHandler === 'function'\n      ) {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n      } else {\n        if ('__nodeConfig' in method) {\n          const { argMapping } = method.__nodeConfig;\n          if (Array.isArray(argMapping)) {\n            for (const [index, [key, value]] of argMapping.entries()) {\n              if (key in event.nativeEvent) {\n                // @ts-ignore fix method type\n                const nativeValue = event.nativeEvent[key];\n                if (value && value.setValue) {\n                  // Reanimated API\n                  value.setValue(nativeValue);\n                } else {\n                  // RN Animated API\n                  method.__nodeConfig.argMapping[index] = [key, nativeValue];\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\nfunction asArray<T>(value: T | T[]) {\n  // TODO(TS) use config.waitFor type\n  return value == null ? [] : Array.isArray(value) ? value : [value];\n}\n\nexport default GestureHandler;\n"],"mappings":"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","ignoreList":[]}