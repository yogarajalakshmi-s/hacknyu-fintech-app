{"version":3,"names":["BaseGesture","NativeGesture","constructor","_defineProperty","handlerName","shouldActivateOnStart","value","config","disallowInterruption"],"sources":["nativeGesture.ts"],"sourcesContent":["import { BaseGestureConfig, BaseGesture } from './gesture';\nimport { NativeViewGestureConfig } from '../NativeViewGestureHandler';\nimport type { NativeViewGestureHandlerPayload } from '../GestureHandlerEventPayload';\n\nexport class NativeGesture extends BaseGesture<NativeViewGestureHandlerPayload> {\n  public config: BaseGestureConfig & NativeViewGestureConfig = {};\n\n  constructor() {\n    super();\n\n    this.handlerName = 'NativeViewGestureHandler';\n  }\n\n  /**\n   * When true, underlying handler will activate unconditionally when in `BEGAN` or `UNDETERMINED` state.\n   * @param value\n   */\n  shouldActivateOnStart(value: boolean) {\n    this.config.shouldActivateOnStart = value;\n    return this;\n  }\n\n  /**\n   * When true, cancels all other gesture handlers when this `NativeViewGestureHandler` receives an `ACTIVE` state event.\n   * @param value\n   */\n  disallowInterruption(value: boolean) {\n    this.config.disallowInterruption = value;\n    return this;\n  }\n}\n\nexport type NativeGestureType = InstanceType<typeof NativeGesture>;\n"],"mappings":";;;AAAA,SAA4BA,WAAW,QAAQ,WAAW;AAI1D,OAAO,MAAMC,aAAa,SAASD,WAAW,CAAkC;EAG9EE,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IAACC,eAAA,iBAHmD,CAAC,CAAC;IAK7D,IAAI,CAACC,WAAW,GAAG,0BAA0B;EAC/C;;EAEA;AACF;AACA;AACA;EACEC,qBAAqBA,CAACC,KAAc,EAAE;IACpC,IAAI,CAACC,MAAM,CAACF,qBAAqB,GAAGC,KAAK;IACzC,OAAO,IAAI;EACb;;EAEA;AACF;AACA;AACA;EACEE,oBAAoBA,CAACF,KAAc,EAAE;IACnC,IAAI,CAACC,MAAM,CAACC,oBAAoB,GAAGF,KAAK;IACxC,OAAO,IAAI;EACb;AACF","ignoreList":[]}