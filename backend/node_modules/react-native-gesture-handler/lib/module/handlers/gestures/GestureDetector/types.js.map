{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import { GestureType, HandlerCallbacks } from '../gesture';\nimport { SharedValue } from '../reanimatedWrapper';\nimport { HandlerStateChangeEvent } from '../../gestureHandlerCommon';\n\nexport interface AttachedGestureState {\n  // Array of gestures that should be attached to the view under that gesture detector\n  attachedGestures: GestureType[];\n  // Event handler for the gesture, returned by `useEvent` from Reanimated\n  animatedEventHandler: unknown;\n  // Shared value that's responsible for transferring the callbacks to the UI thread handler\n  animatedHandlers: SharedValue<\n    HandlerCallbacks<Record<string, unknown>>[] | null\n  > | null;\n  // Whether `useAnimatedGesture` should be called inside detector\n  shouldUseReanimated: boolean;\n  // Whether the GestureDetector is mounted\n  isMounted: boolean;\n}\n\nexport interface GestureDetectorState {\n  firstRender: boolean;\n  viewRef: React.Component | null;\n  previousViewTag: number;\n  forceRebuildReanimatedEvent: boolean;\n}\n\nexport interface WebEventHandler {\n  onGestureHandlerEvent: (event: HandlerStateChangeEvent<unknown>) => void;\n  onGestureHandlerStateChange?: (\n    event: HandlerStateChangeEvent<unknown>\n  ) => void;\n}\n"],"mappings":"","ignoreList":[]}