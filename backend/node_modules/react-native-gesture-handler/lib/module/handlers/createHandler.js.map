{"version":3,"names":["React","Platform","UIManager","DeviceEventEmitter","customDirectEventTypes","RNGestureHandlerModule","State","handlerIDToTag","registerOldGestureHandler","unregisterOldGestureHandler","getNextHandlerTag","filterConfig","scheduleFlushOperations","findNodeHandle","deepEqual","isFabric","isTestEnv","tagMessage","ActionType","PressabilityDebugView","GestureHandlerRootViewContext","ghQueueMicrotask","MountRegistry","UIManagerAny","topGestureHandlerEvent","registrationName","customGHEventsConfigFabricAndroid","topOnGestureHandlerEvent","topOnGestureHandlerStateChange","customGHEventsConfig","onGestureHandlerEvent","onGestureHandlerStateChange","OS","genericDirectEventTypes","UIManagerConstants","_UIManagerAny$getView","_UIManagerAny$getView2","getViewManagerConfig","call","_UIManagerAny$getCons","getConstants","setJSResponder","oldSetJSResponder","clearJSResponder","oldClearJSResponder","tag","blockNativeResponder","handleSetJSResponder","handleClearJSResponder","allowTouches","DEV_ON_ANDROID","__DEV__","addListener","hasUnresolvedRefs","props","extract","refs","Array","isArray","current","some","r","stateToPropMappings","UNDETERMINED","undefined","BEGAN","FAILED","CANCELLED","ACTIVE","END","UNRESOLVED_REFS_RETRY_LIMIT","createHandler","name","allowedProps","config","transformProps","customNativeProps","Handler","Component","constructor","_defineProperty","event","nativeEvent","handlerTag","onGestureEvent","_this$props$onGesture","_this$props","_this$props$onGesture2","_this$props2","onHandlerStateChange","_this$props$onHandler","_this$props3","state","stateEventName","eventHandler","_this$props$onGesture3","_this$props4","node","viewNode","child","Children","only","children","ref","newConfig","createGestureHandler","newViewTag","viewTag","attachGestureHandler","JS_FUNCTION_OLD_API","propsRef","onGestureStateChange","actionType","_this$props5","_this$props6","isGestureHandlerWorklet","isStateChangeHandlerWorklet","isReanimatedHandler","REANIMATED_WORKLET","NATIVE_ANIMATED_EVENT","gestureHandlerWillMount","updateGestureHandler","createRef","isMountedRef","id","Error","componentDidMount","inspectorToggleListener","setState","_","update","displayName","componentDidUpdate","componentWillUnmount","_this$inspectorToggle","remove","dropGestureHandler","handlerID","gestureHandlerWillUnmount","remainingTries","setNativeProps","updates","mergedProps","render","_this$props$testID","context","gestureEventHandler","gestureStateEventHandler","events","e","grandChildren","type","toArray","push","createElement","key","color","hitSlop","cloneElement","refHandler","collapsable","handlerType","enabled","testID"],"sources":["createHandler.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Platform,\n  UIManager,\n  DeviceEventEmitter,\n  EmitterSubscription,\n} from 'react-native';\nimport { customDirectEventTypes } from './customDirectEventTypes';\nimport RNGestureHandlerModule from '../RNGestureHandlerModule';\nimport { State } from '../State';\nimport {\n  handlerIDToTag,\n  registerOldGestureHandler,\n  unregisterOldGestureHandler,\n} from './handlersRegistry';\nimport { getNextHandlerTag } from './getNextHandlerTag';\n\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from './gestureHandlerCommon';\nimport { filterConfig, scheduleFlushOperations } from './utils';\nimport findNodeHandle from '../findNodeHandle';\nimport { ValueOf } from '../typeUtils';\nimport { deepEqual, isFabric, isTestEnv, tagMessage } from '../utils';\nimport { ActionType } from '../ActionType';\nimport { PressabilityDebugView } from './PressabilityDebugView';\nimport GestureHandlerRootViewContext from '../GestureHandlerRootViewContext';\nimport { ghQueueMicrotask } from '../ghQueueMicrotask';\nimport { MountRegistry } from '../mountRegistry';\n\nconst UIManagerAny = UIManager as any;\n\ncustomDirectEventTypes.topGestureHandlerEvent = {\n  registrationName: 'onGestureHandlerEvent',\n};\n\nconst customGHEventsConfigFabricAndroid = {\n  topOnGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  topOnGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n};\n\nconst customGHEventsConfig = {\n  onGestureHandlerEvent: { registrationName: 'onGestureHandlerEvent' },\n  onGestureHandlerStateChange: {\n    registrationName: 'onGestureHandlerStateChange',\n  },\n\n  // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n  // on Android with Fabric enabled, the native part still sends the native events to JS\n  // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n  // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n  // That's why we need to register another pair of event names.\n  // The incoming events will be queued but never handled.\n  // Without this piece of code below, you'll get the following JS error:\n  // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n  ...(isFabric() &&\n    Platform.OS === 'android' &&\n    customGHEventsConfigFabricAndroid),\n};\n\n// Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n  ...UIManagerAny.genericDirectEventTypes,\n  ...customGHEventsConfig,\n};\n// In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants =\n  UIManagerAny.getViewManagerConfig?.('getConstants') ??\n  UIManagerAny.getConstants?.();\n\nif (UIManagerConstants) {\n  UIManagerConstants.genericDirectEventTypes = {\n    ...UIManagerConstants.genericDirectEventTypes,\n    ...customGHEventsConfig,\n  };\n}\n\n// Wrap JS responder calls and notify gesture handler manager\nconst {\n  setJSResponder: oldSetJSResponder = () => {\n    // no-op\n  },\n  clearJSResponder: oldClearJSResponder = () => {\n    // no-op\n  },\n} = UIManagerAny;\nUIManagerAny.setJSResponder = (tag: number, blockNativeResponder: boolean) => {\n  RNGestureHandlerModule.handleSetJSResponder(tag, blockNativeResponder);\n  oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = () => {\n  RNGestureHandlerModule.handleClearJSResponder();\n  oldClearJSResponder();\n};\n\nlet allowTouches = true;\nconst DEV_ON_ANDROID = __DEV__ && Platform.OS === 'android';\n// Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n  DeviceEventEmitter.addListener('toggleElementInspector', () => {\n    allowTouches = !allowTouches;\n  });\n}\n\ntype HandlerProps<T extends Record<string, unknown>> = Readonly<\n  React.PropsWithChildren<BaseGestureHandlerProps<T>>\n>;\nfunction hasUnresolvedRefs<T extends Record<string, unknown>>(\n  props: HandlerProps<T>\n) {\n  // TODO(TS) - add type for extract arg\n  const extract = (refs: any | any[]) => {\n    if (!Array.isArray(refs)) {\n      return refs && refs.current === null;\n    }\n    return refs.some((r) => r && r.current === null);\n  };\n  return extract(props['simultaneousHandlers']) || extract(props['waitFor']);\n}\n\nconst stateToPropMappings = {\n  [State.UNDETERMINED]: undefined,\n  [State.BEGAN]: 'onBegan',\n  [State.FAILED]: 'onFailed',\n  [State.CANCELLED]: 'onCancelled',\n  [State.ACTIVE]: 'onActivated',\n  [State.END]: 'onEnded',\n} as const;\n\ntype CreateHandlerArgs<HandlerPropsT extends Record<string, unknown>> =\n  Readonly<{\n    name: string;\n    allowedProps: Readonly<Extract<keyof HandlerPropsT, string>[]>;\n    config: Readonly<Record<string, unknown>>;\n    transformProps?: (props: HandlerPropsT) => HandlerPropsT;\n    customNativeProps?: Readonly<string[]>;\n  }>;\n\n// TODO(TS) fix event types\ntype InternalEventHandlers = {\n  onGestureHandlerEvent?: (event: any) => void;\n  onGestureHandlerStateChange?: (event: any) => void;\n};\n\ntype AttachGestureHandlerWeb = (\n  handlerTag: number,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  newView: any,\n  _actionType: ActionType,\n  propsRef: React.RefObject<unknown>\n) => void;\n\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1;\n\n// TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nexport default function createHandler<\n  T extends BaseGestureHandlerProps<U>,\n  U extends Record<string, unknown>,\n>({\n  name,\n  allowedProps = [],\n  config = {},\n  transformProps,\n  customNativeProps = [],\n}: CreateHandlerArgs<T>): React.ComponentType<T & React.RefAttributes<any>> {\n  interface HandlerState {\n    allowTouches: boolean;\n  }\n  class Handler extends React.Component<\n    T & InternalEventHandlers,\n    HandlerState\n  > {\n    static displayName = name;\n    static contextType = GestureHandlerRootViewContext;\n\n    private handlerTag: number;\n    private config: Record<string, unknown>;\n    private propsRef: React.MutableRefObject<unknown>;\n    private isMountedRef: React.MutableRefObject<boolean | null>;\n    private viewNode: any;\n    private viewTag?: number;\n    private inspectorToggleListener?: EmitterSubscription;\n\n    constructor(props: T & InternalEventHandlers) {\n      super(props);\n      this.handlerTag = getNextHandlerTag();\n      this.config = {};\n      this.propsRef = React.createRef();\n      this.isMountedRef = React.createRef();\n      this.state = { allowTouches };\n      if (props.id) {\n        if (handlerIDToTag[props.id] !== undefined) {\n          throw new Error(`Handler with ID \"${props.id}\" already registered`);\n        }\n        handlerIDToTag[props.id] = this.handlerTag;\n      }\n    }\n\n    componentDidMount() {\n      const props: HandlerProps<U> = this.props;\n      this.isMountedRef.current = true;\n\n      if (DEV_ON_ANDROID) {\n        this.inspectorToggleListener = DeviceEventEmitter.addListener(\n          'toggleElementInspector',\n          () => {\n            this.setState((_) => ({ allowTouches }));\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n          }\n        );\n      }\n      if (hasUnresolvedRefs(props)) {\n        // If there are unresolved refs (e.g. \".current\" has not yet been set)\n        // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n        // _update method that will try to update native handler props using\n        // queueMicrotask. This makes it so update() function gets called after all\n        // react components are mounted and we expect the missing ref object to\n        // be resolved by then.\n        ghQueueMicrotask(() => {\n          this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        });\n      }\n\n      this.createGestureHandler(\n        filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        )\n      );\n\n      if (!this.viewNode) {\n        throw new Error(\n          `[Gesture Handler] Failed to obtain view for ${Handler.displayName}. Note that old API doesn't support functional components.`\n        );\n      }\n\n      this.attachGestureHandler(findNodeHandle(this.viewNode) as number); // TODO(TS) - check if this can be null\n    }\n\n    componentDidUpdate() {\n      const viewTag = findNodeHandle(this.viewNode);\n      if (this.viewTag !== viewTag) {\n        this.attachGestureHandler(viewTag as number); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n      }\n      this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n    }\n\n    componentWillUnmount() {\n      this.inspectorToggleListener?.remove();\n      this.isMountedRef.current = false;\n      if (Platform.OS !== 'web') {\n        unregisterOldGestureHandler(this.handlerTag);\n      }\n      RNGestureHandlerModule.dropGestureHandler(this.handlerTag);\n      scheduleFlushOperations();\n      // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n      const handlerID: string | undefined = this.props.id;\n      if (handlerID) {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete handlerIDToTag[handlerID];\n      }\n\n      MountRegistry.gestureHandlerWillUnmount(this);\n    }\n\n    private onGestureHandlerEvent = (event: GestureEvent<U>) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onGestureEvent === 'function') {\n          this.props.onGestureEvent?.(event);\n        }\n      } else {\n        this.props.onGestureHandlerEvent?.(event);\n      }\n    };\n\n    // TODO(TS) - make sure this is right type for event\n    private onGestureHandlerStateChange = (\n      event: HandlerStateChangeEvent<U>\n    ) => {\n      if (event.nativeEvent.handlerTag === this.handlerTag) {\n        if (typeof this.props.onHandlerStateChange === 'function') {\n          this.props.onHandlerStateChange?.(event);\n        }\n\n        const state: ValueOf<typeof State> = event.nativeEvent.state;\n        const stateEventName = stateToPropMappings[state];\n        const eventHandler = stateEventName && this.props[stateEventName];\n        if (eventHandler && typeof eventHandler === 'function') {\n          eventHandler(event);\n        }\n      } else {\n        this.props.onGestureHandlerStateChange?.(event);\n      }\n    };\n\n    private refHandler = (node: any) => {\n      this.viewNode = node;\n\n      const child = React.Children.only(this.props.children);\n      // TODO(TS) fix ref type\n      const { ref }: any = child;\n      if (ref !== null) {\n        if (typeof ref === 'function') {\n          ref(node);\n        } else {\n          ref.current = node;\n        }\n      }\n    };\n\n    private createGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.createGestureHandler(\n        name,\n        this.handlerTag,\n        newConfig\n      );\n    };\n\n    private attachGestureHandler = (newViewTag: number) => {\n      this.viewTag = newViewTag;\n\n      if (Platform.OS === 'web') {\n        // Typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n        (\n          RNGestureHandlerModule.attachGestureHandler as AttachGestureHandlerWeb\n        )(\n          this.handlerTag,\n          newViewTag,\n          ActionType.JS_FUNCTION_OLD_API, // ignored on web\n          this.propsRef\n        );\n      } else {\n        registerOldGestureHandler(this.handlerTag, {\n          onGestureEvent: this.onGestureHandlerEvent,\n          onGestureStateChange: this.onGestureHandlerStateChange,\n        });\n\n        const actionType = (() => {\n          const onGestureEvent = this.props?.onGestureEvent;\n          const isGestureHandlerWorklet =\n            onGestureEvent &&\n            ('current' in onGestureEvent ||\n              'workletEventHandler' in onGestureEvent);\n          const onHandlerStateChange = this.props?.onHandlerStateChange;\n          const isStateChangeHandlerWorklet =\n            onHandlerStateChange &&\n            ('current' in onHandlerStateChange ||\n              'workletEventHandler' in onHandlerStateChange);\n          const isReanimatedHandler =\n            isGestureHandlerWorklet || isStateChangeHandlerWorklet;\n          if (isReanimatedHandler) {\n            // Reanimated worklet\n            return ActionType.REANIMATED_WORKLET;\n          } else if (onGestureEvent && '__isNative' in onGestureEvent) {\n            // Animated.event with useNativeDriver: true\n            return ActionType.NATIVE_ANIMATED_EVENT;\n          } else {\n            // JS callback or Animated.event with useNativeDriver: false\n            return ActionType.JS_FUNCTION_OLD_API;\n          }\n        })();\n\n        RNGestureHandlerModule.attachGestureHandler(\n          this.handlerTag,\n          newViewTag,\n          actionType\n        );\n      }\n\n      scheduleFlushOperations();\n\n      ghQueueMicrotask(() => {\n        MountRegistry.gestureHandlerWillMount(this);\n      });\n    };\n\n    private updateGestureHandler = (\n      newConfig: Readonly<Record<string, unknown>>\n    ) => {\n      this.config = newConfig;\n\n      RNGestureHandlerModule.updateGestureHandler(this.handlerTag, newConfig);\n      scheduleFlushOperations();\n    };\n\n    private update(remainingTries: number) {\n      if (!this.isMountedRef.current) {\n        return;\n      }\n\n      const props: HandlerProps<U> = this.props;\n\n      // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n      // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n      // again is easy enough fix.\n      if (hasUnresolvedRefs(props) && remainingTries > 0) {\n        ghQueueMicrotask(() => {\n          this.update(remainingTries - 1);\n        });\n      } else {\n        const newConfig = filterConfig(\n          transformProps ? transformProps(this.props) : this.props,\n          [...allowedProps, ...customNativeProps],\n          config\n        );\n        if (!deepEqual(this.config, newConfig)) {\n          this.updateGestureHandler(newConfig);\n        }\n      }\n    }\n\n    setNativeProps(updates: any) {\n      const mergedProps = { ...this.props, ...updates };\n      const newConfig = filterConfig(\n        transformProps ? transformProps(mergedProps) : mergedProps,\n        [...allowedProps, ...customNativeProps],\n        config\n      );\n      this.updateGestureHandler(newConfig);\n    }\n\n    render() {\n      if (__DEV__ && !this.context && !isTestEnv() && Platform.OS !== 'web') {\n        throw new Error(\n          name +\n            ' must be used as a descendant of GestureHandlerRootView. Otherwise the gestures will not be recognized. See https://docs.swmansion.com/react-native-gesture-handler/docs/installation for more details.'\n        );\n      }\n\n      let gestureEventHandler = this.onGestureHandlerEvent;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureEventHandlers = {\n        onGestureEvent?: BaseGestureHandlerProps<U>['onGestureEvent'];\n        onGestureHandlerEvent?: InternalEventHandlers['onGestureHandlerEvent'];\n      };\n      const { onGestureEvent, onGestureHandlerEvent }: OnGestureEventHandlers =\n        this.props;\n      if (onGestureEvent && typeof onGestureEvent !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerEvent) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureEventHandler = onGestureEvent;\n      } else {\n        if (\n          onGestureHandlerEvent &&\n          typeof onGestureHandlerEvent !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n\n      let gestureStateEventHandler = this.onGestureHandlerStateChange;\n      // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n      type OnGestureStateChangeHandlers = {\n        onHandlerStateChange?: BaseGestureHandlerProps<U>['onHandlerStateChange'];\n        onGestureHandlerStateChange?: InternalEventHandlers['onGestureHandlerStateChange'];\n      };\n      const {\n        onHandlerStateChange,\n        onGestureHandlerStateChange,\n      }: OnGestureStateChangeHandlers = this.props;\n      if (onHandlerStateChange && typeof onHandlerStateChange !== 'function') {\n        // If it's not a method it should be an native Animated.event\n        // object. We set it directly as the handler for the view\n        // In this case nested handlers are not going to be supported\n        if (onGestureHandlerStateChange) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n        gestureStateEventHandler = onHandlerStateChange;\n      } else {\n        if (\n          onGestureHandlerStateChange &&\n          typeof onGestureHandlerStateChange !== 'function'\n        ) {\n          throw new Error(\n            'Nesting touch handlers with native animated driver is not supported yet'\n          );\n        }\n      }\n      const events = {\n        onGestureHandlerEvent: this.state.allowTouches\n          ? gestureEventHandler\n          : undefined,\n        onGestureHandlerStateChange: this.state.allowTouches\n          ? gestureStateEventHandler\n          : undefined,\n      };\n\n      this.propsRef.current = events;\n\n      let child: any = null;\n      try {\n        child = React.Children.only(this.props.children);\n      } catch (e) {\n        throw new Error(\n          tagMessage(\n            `${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`\n          )\n        );\n      }\n\n      let grandChildren = child.props.children;\n      if (\n        __DEV__ &&\n        child.type &&\n        (child.type === 'RNGestureHandlerButton' ||\n          child.type.name === 'View' ||\n          child.type.displayName === 'View')\n      ) {\n        grandChildren = React.Children.toArray(grandChildren);\n        grandChildren.push(\n          <PressabilityDebugView\n            key=\"pressabilityDebugView\"\n            color=\"mediumspringgreen\"\n            hitSlop={child.props.hitSlop}\n          />\n        );\n      }\n\n      return React.cloneElement(\n        child,\n        {\n          ref: this.refHandler,\n          collapsable: false,\n          ...(isTestEnv()\n            ? {\n                handlerType: name,\n                handlerTag: this.handlerTag,\n                enabled: this.props.enabled,\n              }\n            : {}),\n          testID: this.props.testID ?? child.props.testID,\n          ...events,\n        },\n        grandChildren\n      );\n    }\n  }\n  return Handler;\n}\n"],"mappings":"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","ignoreList":[]}