{"version":3,"names":["EventTypes","RotationGestureDetector","constructor","callbacks","_defineProperty","NaN","onRotationBegin","onRotation","onRotationEnd","updateCurrent","event","tracker","previousTime","currentTime","time","firstPointerID","secondPointerID","keyPointers","firstPointerCoords","getLastAbsoluteCoords","secondPointerCoords","vectorX","x","vectorY","y","_anchorX","_anchorY","angle","Math","atan2","_rotation","Number","isNaN","previousAngle","rotation","PI","finish","isInProgress","setKeyPointers","pointerIDs","trackedPointers","keys","next","value","onTouchEvent","eventType","DOWN","ADDITIONAL_POINTER_DOWN","MOVE","ADDITIONAL_POINTER_UP","indexOf","pointerId","UP","reset","anchorX","anchorY","timeDelta"],"sources":["RotationGestureDetector.ts"],"sourcesContent":["import { AdaptedEvent, EventTypes } from '../interfaces';\nimport PointerTracker from '../tools/PointerTracker';\n\nexport interface RotationGestureListener {\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n}\n\nexport default class RotationGestureDetector\n  implements RotationGestureListener\n{\n  onRotationBegin: (detector: RotationGestureDetector) => boolean;\n  onRotation: (detector: RotationGestureDetector) => boolean;\n  onRotationEnd: (detector: RotationGestureDetector) => void;\n\n  private currentTime = 0;\n  private previousTime = 0;\n\n  private previousAngle = 0;\n  private _rotation = 0;\n\n  private _anchorX = 0;\n  private _anchorY = 0;\n\n  private isInProgress = false;\n\n  private keyPointers: number[] = [NaN, NaN];\n\n  constructor(callbacks: RotationGestureListener) {\n    this.onRotationBegin = callbacks.onRotationBegin;\n    this.onRotation = callbacks.onRotation;\n    this.onRotationEnd = callbacks.onRotationEnd;\n  }\n\n  private updateCurrent(event: AdaptedEvent, tracker: PointerTracker): void {\n    this.previousTime = this.currentTime;\n    this.currentTime = event.time;\n\n    const [firstPointerID, secondPointerID] = this.keyPointers;\n\n    const firstPointerCoords = tracker.getLastAbsoluteCoords(firstPointerID);\n    const secondPointerCoords = tracker.getLastAbsoluteCoords(secondPointerID);\n\n    const vectorX: number = secondPointerCoords.x - firstPointerCoords.x;\n    const vectorY: number = secondPointerCoords.y - firstPointerCoords.y;\n\n    this._anchorX = (firstPointerCoords.x + secondPointerCoords.x) / 2;\n    this._anchorY = (firstPointerCoords.y + secondPointerCoords.y) / 2;\n\n    // Angle diff should be positive when rotating in clockwise direction\n    const angle: number = -Math.atan2(vectorY, vectorX);\n\n    this._rotation = Number.isNaN(this.previousAngle)\n      ? 0\n      : this.previousAngle - angle;\n\n    this.previousAngle = angle;\n\n    if (this.rotation > Math.PI) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI) {\n      this._rotation += Math.PI;\n    }\n\n    if (this.rotation > Math.PI / 2) {\n      this._rotation -= Math.PI;\n    } else if (this.rotation < -Math.PI / 2) {\n      this._rotation += Math.PI;\n    }\n  }\n\n  private finish(): void {\n    if (!this.isInProgress) {\n      return;\n    }\n\n    this.isInProgress = false;\n    this.keyPointers = [NaN, NaN];\n    this.onRotationEnd(this);\n  }\n\n  private setKeyPointers(tracker: PointerTracker): void {\n    if (this.keyPointers[0] && this.keyPointers[1]) {\n      return;\n    }\n\n    const pointerIDs: IterableIterator<number> = tracker.trackedPointers.keys();\n\n    this.keyPointers[0] = pointerIDs.next().value as number;\n    this.keyPointers[1] = pointerIDs.next().value as number;\n  }\n\n  public onTouchEvent(event: AdaptedEvent, tracker: PointerTracker): boolean {\n    switch (event.eventType) {\n      case EventTypes.DOWN:\n        this.isInProgress = false;\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_DOWN:\n        if (this.isInProgress) {\n          break;\n        }\n        this.isInProgress = true;\n\n        this.previousTime = event.time;\n        this.previousAngle = NaN;\n\n        this.setKeyPointers(tracker);\n\n        this.updateCurrent(event, tracker);\n        this.onRotationBegin(this);\n        break;\n\n      case EventTypes.MOVE:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        this.updateCurrent(event, tracker);\n        this.onRotation(this);\n\n        break;\n\n      case EventTypes.ADDITIONAL_POINTER_UP:\n        if (!this.isInProgress) {\n          break;\n        }\n\n        if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n          this.finish();\n        }\n\n        break;\n\n      case EventTypes.UP:\n        if (this.isInProgress) {\n          this.finish();\n        }\n        break;\n    }\n\n    return true;\n  }\n\n  public reset(): void {\n    this.keyPointers = [NaN, NaN];\n    this.isInProgress = false;\n  }\n\n  public get anchorX() {\n    return this._anchorX;\n  }\n\n  public get anchorY() {\n    return this._anchorY;\n  }\n\n  public get rotation() {\n    return this._rotation;\n  }\n\n  public get timeDelta() {\n    return this.currentTime + this.previousTime;\n  }\n}\n"],"mappings":";;;AAAA,SAAuBA,UAAU,QAAQ,eAAe;AASxD,eAAe,MAAMC,uBAAuB,CAE5C;EAkBEC,WAAWA,CAACC,SAAkC,EAAE;IAAAC,eAAA;IAAAA,eAAA;IAAAA,eAAA;IAAAA,eAAA,sBAb1B,CAAC;IAAAA,eAAA,uBACA,CAAC;IAAAA,eAAA,wBAEA,CAAC;IAAAA,eAAA,oBACL,CAAC;IAAAA,eAAA,mBAEF,CAAC;IAAAA,eAAA,mBACD,CAAC;IAAAA,eAAA,uBAEG,KAAK;IAAAA,eAAA,sBAEI,CAACC,GAAG,EAAEA,GAAG,CAAC;IAGxC,IAAI,CAACC,eAAe,GAAGH,SAAS,CAACG,eAAe;IAChD,IAAI,CAACC,UAAU,GAAGJ,SAAS,CAACI,UAAU;IACtC,IAAI,CAACC,aAAa,GAAGL,SAAS,CAACK,aAAa;EAC9C;EAEQC,aAAaA,CAACC,KAAmB,EAAEC,OAAuB,EAAQ;IACxE,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,WAAW;IACpC,IAAI,CAACA,WAAW,GAAGH,KAAK,CAACI,IAAI;IAE7B,MAAM,CAACC,cAAc,EAAEC,eAAe,CAAC,GAAG,IAAI,CAACC,WAAW;IAE1D,MAAMC,kBAAkB,GAAGP,OAAO,CAACQ,qBAAqB,CAACJ,cAAc,CAAC;IACxE,MAAMK,mBAAmB,GAAGT,OAAO,CAACQ,qBAAqB,CAACH,eAAe,CAAC;IAE1E,MAAMK,OAAe,GAAGD,mBAAmB,CAACE,CAAC,GAAGJ,kBAAkB,CAACI,CAAC;IACpE,MAAMC,OAAe,GAAGH,mBAAmB,CAACI,CAAC,GAAGN,kBAAkB,CAACM,CAAC;IAEpE,IAAI,CAACC,QAAQ,GAAG,CAACP,kBAAkB,CAACI,CAAC,GAAGF,mBAAmB,CAACE,CAAC,IAAI,CAAC;IAClE,IAAI,CAACI,QAAQ,GAAG,CAACR,kBAAkB,CAACM,CAAC,GAAGJ,mBAAmB,CAACI,CAAC,IAAI,CAAC;;IAElE;IACA,MAAMG,KAAa,GAAG,CAACC,IAAI,CAACC,KAAK,CAACN,OAAO,EAAEF,OAAO,CAAC;IAEnD,IAAI,CAACS,SAAS,GAAGC,MAAM,CAACC,KAAK,CAAC,IAAI,CAACC,aAAa,CAAC,GAC7C,CAAC,GACD,IAAI,CAACA,aAAa,GAAGN,KAAK;IAE9B,IAAI,CAACM,aAAa,GAAGN,KAAK;IAE1B,IAAI,IAAI,CAACO,QAAQ,GAAGN,IAAI,CAACO,EAAE,EAAE;MAC3B,IAAI,CAACL,SAAS,IAAIF,IAAI,CAACO,EAAE;IAC3B,CAAC,MAAM,IAAI,IAAI,CAACD,QAAQ,GAAG,CAACN,IAAI,CAACO,EAAE,EAAE;MACnC,IAAI,CAACL,SAAS,IAAIF,IAAI,CAACO,EAAE;IAC3B;IAEA,IAAI,IAAI,CAACD,QAAQ,GAAGN,IAAI,CAACO,EAAE,GAAG,CAAC,EAAE;MAC/B,IAAI,CAACL,SAAS,IAAIF,IAAI,CAACO,EAAE;IAC3B,CAAC,MAAM,IAAI,IAAI,CAACD,QAAQ,GAAG,CAACN,IAAI,CAACO,EAAE,GAAG,CAAC,EAAE;MACvC,IAAI,CAACL,SAAS,IAAIF,IAAI,CAACO,EAAE;IAC3B;EACF;EAEQC,MAAMA,CAAA,EAAS;IACrB,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MACtB;IACF;IAEA,IAAI,CAACA,YAAY,GAAG,KAAK;IACzB,IAAI,CAACpB,WAAW,GAAG,CAACZ,GAAG,EAAEA,GAAG,CAAC;IAC7B,IAAI,CAACG,aAAa,CAAC,IAAI,CAAC;EAC1B;EAEQ8B,cAAcA,CAAC3B,OAAuB,EAAQ;IACpD,IAAI,IAAI,CAACM,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAACA,WAAW,CAAC,CAAC,CAAC,EAAE;MAC9C;IACF;IAEA,MAAMsB,UAAoC,GAAG5B,OAAO,CAAC6B,eAAe,CAACC,IAAI,CAAC,CAAC;IAE3E,IAAI,CAACxB,WAAW,CAAC,CAAC,CAAC,GAAGsB,UAAU,CAACG,IAAI,CAAC,CAAC,CAACC,KAAe;IACvD,IAAI,CAAC1B,WAAW,CAAC,CAAC,CAAC,GAAGsB,UAAU,CAACG,IAAI,CAAC,CAAC,CAACC,KAAe;EACzD;EAEOC,YAAYA,CAAClC,KAAmB,EAAEC,OAAuB,EAAW;IACzE,QAAQD,KAAK,CAACmC,SAAS;MACrB,KAAK7C,UAAU,CAAC8C,IAAI;QAClB,IAAI,CAACT,YAAY,GAAG,KAAK;QACzB;MAEF,KAAKrC,UAAU,CAAC+C,uBAAuB;QACrC,IAAI,IAAI,CAACV,YAAY,EAAE;UACrB;QACF;QACA,IAAI,CAACA,YAAY,GAAG,IAAI;QAExB,IAAI,CAACzB,YAAY,GAAGF,KAAK,CAACI,IAAI;QAC9B,IAAI,CAACmB,aAAa,GAAG5B,GAAG;QAExB,IAAI,CAACiC,cAAc,CAAC3B,OAAO,CAAC;QAE5B,IAAI,CAACF,aAAa,CAACC,KAAK,EAAEC,OAAO,CAAC;QAClC,IAAI,CAACL,eAAe,CAAC,IAAI,CAAC;QAC1B;MAEF,KAAKN,UAAU,CAACgD,IAAI;QAClB,IAAI,CAAC,IAAI,CAACX,YAAY,EAAE;UACtB;QACF;QAEA,IAAI,CAAC5B,aAAa,CAACC,KAAK,EAAEC,OAAO,CAAC;QAClC,IAAI,CAACJ,UAAU,CAAC,IAAI,CAAC;QAErB;MAEF,KAAKP,UAAU,CAACiD,qBAAqB;QACnC,IAAI,CAAC,IAAI,CAACZ,YAAY,EAAE;UACtB;QACF;QAEA,IAAI,IAAI,CAACpB,WAAW,CAACiC,OAAO,CAACxC,KAAK,CAACyC,SAAS,CAAC,IAAI,CAAC,EAAE;UAClD,IAAI,CAACf,MAAM,CAAC,CAAC;QACf;QAEA;MAEF,KAAKpC,UAAU,CAACoD,EAAE;QAChB,IAAI,IAAI,CAACf,YAAY,EAAE;UACrB,IAAI,CAACD,MAAM,CAAC,CAAC;QACf;QACA;IACJ;IAEA,OAAO,IAAI;EACb;EAEOiB,KAAKA,CAAA,EAAS;IACnB,IAAI,CAACpC,WAAW,GAAG,CAACZ,GAAG,EAAEA,GAAG,CAAC;IAC7B,IAAI,CAACgC,YAAY,GAAG,KAAK;EAC3B;EAEA,IAAWiB,OAAOA,CAAA,EAAG;IACnB,OAAO,IAAI,CAAC7B,QAAQ;EACtB;EAEA,IAAW8B,OAAOA,CAAA,EAAG;IACnB,OAAO,IAAI,CAAC7B,QAAQ;EACtB;EAEA,IAAWQ,QAAQA,CAAA,EAAG;IACpB,OAAO,IAAI,CAACJ,SAAS;EACvB;EAEA,IAAW0B,SAASA,CAAA,EAAG;IACrB,OAAO,IAAI,CAAC3C,WAAW,GAAG,IAAI,CAACD,YAAY;EAC7C;AACF","ignoreList":[]}