function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import EventManager from './EventManager';
import { EventTypes } from '../interfaces';
import { PointerType } from '../../PointerType';
export default class WheelEventManager extends EventManager {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "wheelDelta", {
      x: 0,
      y: 0
    });
    _defineProperty(this, "resetDelta", _event => {
      this.wheelDelta = {
        x: 0,
        y: 0
      };
    });
    _defineProperty(this, "wheelCallback", event => {
      this.wheelDelta.x += event.deltaX;
      this.wheelDelta.y += event.deltaY;
      const adaptedEvent = this.mapEvent(event);
      this.onWheel(adaptedEvent);
    });
  }
  registerListeners() {
    this.view.addEventListener('pointermove', this.resetDelta);
    this.view.addEventListener('wheel', this.wheelCallback);
  }
  unregisterListeners() {
    this.view.removeEventListener('pointermove', this.resetDelta);
    this.view.removeEventListener('wheel', this.wheelCallback);
  }
  mapEvent(event) {
    return {
      x: event.clientX + this.wheelDelta.x,
      y: event.clientY + this.wheelDelta.y,
      offsetX: event.offsetX - event.deltaX,
      offsetY: event.offsetY - event.deltaY,
      pointerId: -1,
      eventType: EventTypes.MOVE,
      pointerType: PointerType.OTHER,
      time: event.timeStamp,
      // @ts-ignore It does exist, but it's deprecated
      wheelDeltaY: event.wheelDeltaY
    };
  }
  resetManager() {
    super.resetManager();
  }
}
//# sourceMappingURL=WheelEventManager.js.map