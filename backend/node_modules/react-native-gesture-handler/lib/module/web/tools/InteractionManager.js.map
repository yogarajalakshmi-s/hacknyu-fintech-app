{"version":3,"names":["State","InteractionManager","constructor","_defineProperty","Map","configureInteractions","handler","config","dropRelationsForHandlerWithTag","handlerTag","waitFor","forEach","otherHandler","push","waitForRelations","set","simultaneousHandlers","simultaneousRelations","blocksHandlers","blocksHandlersRelations","shouldWaitForHandlerFailure","get","find","tag","undefined","shouldRecognizeSimultaneously","shouldRequireHandlerToWaitForFailure","shouldHandlerBeCancelledBy","_handler","_otherHandler$isButto","isNativeHandler","name","isActive","state","ACTIVE","isButton","call","delete","reset","clear","instance","_instance","_InteractionManager"],"sources":["InteractionManager.ts"],"sourcesContent":["import type IGestureHandler from '../handlers/IGestureHandler';\nimport { State } from '../../State';\nimport { Config, Handler } from '../interfaces';\n\nexport default class InteractionManager {\n  private static _instance: InteractionManager;\n  private readonly waitForRelations: Map<number, number[]> = new Map();\n  private readonly simultaneousRelations: Map<number, number[]> = new Map();\n  private readonly blocksHandlersRelations: Map<number, number[]> = new Map();\n\n  // Private becaues of singleton\n  // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n  private constructor() {}\n\n  public configureInteractions(handler: IGestureHandler, config: Config) {\n    this.dropRelationsForHandlerWithTag(handler.handlerTag);\n\n    if (config.waitFor) {\n      const waitFor: number[] = [];\n      config.waitFor.forEach((otherHandler: Handler): void => {\n        // New API reference\n        if (typeof otherHandler === 'number') {\n          waitFor.push(otherHandler);\n        } else {\n          // Old API reference\n          waitFor.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.waitForRelations.set(handler.handlerTag, waitFor);\n    }\n\n    if (config.simultaneousHandlers) {\n      const simultaneousHandlers: number[] = [];\n      config.simultaneousHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          simultaneousHandlers.push(otherHandler);\n        } else {\n          simultaneousHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.simultaneousRelations.set(handler.handlerTag, simultaneousHandlers);\n    }\n\n    if (config.blocksHandlers) {\n      const blocksHandlers: number[] = [];\n      config.blocksHandlers.forEach((otherHandler: Handler): void => {\n        if (typeof otherHandler === 'number') {\n          blocksHandlers.push(otherHandler);\n        } else {\n          blocksHandlers.push(otherHandler.handlerTag);\n        }\n      });\n\n      this.blocksHandlersRelations.set(handler.handlerTag, blocksHandlers);\n    }\n  }\n\n  public shouldWaitForHandlerFailure(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.waitForRelations.get(\n      handler.handlerTag\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.handlerTag;\n      }) !== undefined\n    );\n  }\n\n  public shouldRecognizeSimultaneously(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const simultaneousHandlers: number[] | undefined =\n      this.simultaneousRelations.get(handler.handlerTag);\n\n    return (\n      simultaneousHandlers?.find((tag: number) => {\n        return tag === otherHandler.handlerTag;\n      }) !== undefined\n    );\n  }\n\n  public shouldRequireHandlerToWaitForFailure(\n    handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    const waitFor: number[] | undefined = this.blocksHandlersRelations.get(\n      handler.handlerTag\n    );\n\n    return (\n      waitFor?.find((tag: number) => {\n        return tag === otherHandler.handlerTag;\n      }) !== undefined\n    );\n  }\n\n  public shouldHandlerBeCancelledBy(\n    _handler: IGestureHandler,\n    otherHandler: IGestureHandler\n  ): boolean {\n    // We check constructor name instead of using `instanceof` in order do avoid circular dependencies\n    const isNativeHandler =\n      otherHandler.constructor.name === 'NativeViewGestureHandler';\n    const isActive = otherHandler.state === State.ACTIVE;\n    const isButton = otherHandler.isButton?.() === true;\n\n    return isNativeHandler && isActive && !isButton;\n  }\n\n  public dropRelationsForHandlerWithTag(handlerTag: number): void {\n    this.waitForRelations.delete(handlerTag);\n    this.simultaneousRelations.delete(handlerTag);\n    this.blocksHandlersRelations.delete(handlerTag);\n  }\n\n  public reset() {\n    this.waitForRelations.clear();\n    this.simultaneousRelations.clear();\n    this.blocksHandlersRelations.clear();\n  }\n\n  public static get instance(): InteractionManager {\n    if (!this._instance) {\n      this._instance = new InteractionManager();\n    }\n\n    return this._instance;\n  }\n}\n"],"mappings":";;;;AACA,SAASA,KAAK,QAAQ,aAAa;AAGnC,eAAe,MAAMC,kBAAkB,CAAC;EAMtC;EACA;EACQC,WAAWA,CAAA,EAAG;IAAAC,eAAA,2BANqC,IAAIC,GAAG,CAAC,CAAC;IAAAD,eAAA,gCACJ,IAAIC,GAAG,CAAC,CAAC;IAAAD,eAAA,kCACP,IAAIC,GAAG,CAAC,CAAC;EAIpD;EAEhBC,qBAAqBA,CAACC,OAAwB,EAAEC,MAAc,EAAE;IACrE,IAAI,CAACC,8BAA8B,CAACF,OAAO,CAACG,UAAU,CAAC;IAEvD,IAAIF,MAAM,CAACG,OAAO,EAAE;MAClB,MAAMA,OAAiB,GAAG,EAAE;MAC5BH,MAAM,CAACG,OAAO,CAACC,OAAO,CAAEC,YAAqB,IAAW;QACtD;QACA,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;UACpCF,OAAO,CAACG,IAAI,CAACD,YAAY,CAAC;QAC5B,CAAC,MAAM;UACL;UACAF,OAAO,CAACG,IAAI,CAACD,YAAY,CAACH,UAAU,CAAC;QACvC;MACF,CAAC,CAAC;MAEF,IAAI,CAACK,gBAAgB,CAACC,GAAG,CAACT,OAAO,CAACG,UAAU,EAAEC,OAAO,CAAC;IACxD;IAEA,IAAIH,MAAM,CAACS,oBAAoB,EAAE;MAC/B,MAAMA,oBAA8B,GAAG,EAAE;MACzCT,MAAM,CAACS,oBAAoB,CAACL,OAAO,CAAEC,YAAqB,IAAW;QACnE,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;UACpCI,oBAAoB,CAACH,IAAI,CAACD,YAAY,CAAC;QACzC,CAAC,MAAM;UACLI,oBAAoB,CAACH,IAAI,CAACD,YAAY,CAACH,UAAU,CAAC;QACpD;MACF,CAAC,CAAC;MAEF,IAAI,CAACQ,qBAAqB,CAACF,GAAG,CAACT,OAAO,CAACG,UAAU,EAAEO,oBAAoB,CAAC;IAC1E;IAEA,IAAIT,MAAM,CAACW,cAAc,EAAE;MACzB,MAAMA,cAAwB,GAAG,EAAE;MACnCX,MAAM,CAACW,cAAc,CAACP,OAAO,CAAEC,YAAqB,IAAW;QAC7D,IAAI,OAAOA,YAAY,KAAK,QAAQ,EAAE;UACpCM,cAAc,CAACL,IAAI,CAACD,YAAY,CAAC;QACnC,CAAC,MAAM;UACLM,cAAc,CAACL,IAAI,CAACD,YAAY,CAACH,UAAU,CAAC;QAC9C;MACF,CAAC,CAAC;MAEF,IAAI,CAACU,uBAAuB,CAACJ,GAAG,CAACT,OAAO,CAACG,UAAU,EAAES,cAAc,CAAC;IACtE;EACF;EAEOE,2BAA2BA,CAChCd,OAAwB,EACxBM,YAA6B,EACpB;IACT,MAAMF,OAA6B,GAAG,IAAI,CAACI,gBAAgB,CAACO,GAAG,CAC7Df,OAAO,CAACG,UACV,CAAC;IAED,OACE,CAAAC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEY,IAAI,CAAEC,GAAW,IAAK;MAC7B,OAAOA,GAAG,KAAKX,YAAY,CAACH,UAAU;IACxC,CAAC,CAAC,MAAKe,SAAS;EAEpB;EAEOC,6BAA6BA,CAClCnB,OAAwB,EACxBM,YAA6B,EACpB;IACT,MAAMI,oBAA0C,GAC9C,IAAI,CAACC,qBAAqB,CAACI,GAAG,CAACf,OAAO,CAACG,UAAU,CAAC;IAEpD,OACE,CAAAO,oBAAoB,aAApBA,oBAAoB,uBAApBA,oBAAoB,CAAEM,IAAI,CAAEC,GAAW,IAAK;MAC1C,OAAOA,GAAG,KAAKX,YAAY,CAACH,UAAU;IACxC,CAAC,CAAC,MAAKe,SAAS;EAEpB;EAEOE,oCAAoCA,CACzCpB,OAAwB,EACxBM,YAA6B,EACpB;IACT,MAAMF,OAA6B,GAAG,IAAI,CAACS,uBAAuB,CAACE,GAAG,CACpEf,OAAO,CAACG,UACV,CAAC;IAED,OACE,CAAAC,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEY,IAAI,CAAEC,GAAW,IAAK;MAC7B,OAAOA,GAAG,KAAKX,YAAY,CAACH,UAAU;IACxC,CAAC,CAAC,MAAKe,SAAS;EAEpB;EAEOG,0BAA0BA,CAC/BC,QAAyB,EACzBhB,YAA6B,EACpB;IAAA,IAAAiB,qBAAA;IACT;IACA,MAAMC,eAAe,GACnBlB,YAAY,CAACV,WAAW,CAAC6B,IAAI,KAAK,0BAA0B;IAC9D,MAAMC,QAAQ,GAAGpB,YAAY,CAACqB,KAAK,KAAKjC,KAAK,CAACkC,MAAM;IACpD,MAAMC,QAAQ,GAAG,EAAAN,qBAAA,GAAAjB,YAAY,CAACuB,QAAQ,cAAAN,qBAAA,uBAArBA,qBAAA,CAAAO,IAAA,CAAAxB,YAAwB,CAAC,MAAK,IAAI;IAEnD,OAAOkB,eAAe,IAAIE,QAAQ,IAAI,CAACG,QAAQ;EACjD;EAEO3B,8BAA8BA,CAACC,UAAkB,EAAQ;IAC9D,IAAI,CAACK,gBAAgB,CAACuB,MAAM,CAAC5B,UAAU,CAAC;IACxC,IAAI,CAACQ,qBAAqB,CAACoB,MAAM,CAAC5B,UAAU,CAAC;IAC7C,IAAI,CAACU,uBAAuB,CAACkB,MAAM,CAAC5B,UAAU,CAAC;EACjD;EAEO6B,KAAKA,CAAA,EAAG;IACb,IAAI,CAACxB,gBAAgB,CAACyB,KAAK,CAAC,CAAC;IAC7B,IAAI,CAACtB,qBAAqB,CAACsB,KAAK,CAAC,CAAC;IAClC,IAAI,CAACpB,uBAAuB,CAACoB,KAAK,CAAC,CAAC;EACtC;EAEA,WAAkBC,QAAQA,CAAA,EAAuB;IAC/C,IAAI,CAAC,IAAI,CAACC,SAAS,EAAE;MACnB,IAAI,CAACA,SAAS,GAAG,IAAIxC,kBAAkB,CAAC,CAAC;IAC3C;IAEA,OAAO,IAAI,CAACwC,SAAS;EACvB;AACF;AAACC,mBAAA,GAnIoBzC,kBAAkB;AAAAE,eAAA,CAAlBF,kBAAkB","ignoreList":[]}