{"version":3,"names":[],"sources":["PressableProps.tsx"],"sourcesContent":["import {\n  AccessibilityProps,\n  ViewProps,\n  Insets,\n  StyleProp,\n  ViewStyle,\n  PressableStateCallbackType as RNPressableStateCallbackType,\n  PressableAndroidRippleConfig as RNPressableAndroidRippleConfig,\n} from 'react-native';\n\nexport type PressableStateCallbackType = RNPressableStateCallbackType;\nexport type PressableAndroidRippleConfig = RNPressableAndroidRippleConfig;\n\nexport type InnerPressableEvent = {\n  changedTouches: InnerPressableEvent[];\n  identifier: number;\n  locationX: number;\n  locationY: number;\n  pageX: number;\n  pageY: number;\n  target: number;\n  timestamp: number;\n  touches: InnerPressableEvent[];\n  force?: number;\n};\n\nexport type PressableEvent = { nativeEvent: InnerPressableEvent };\n\nexport interface PressableProps\n  extends AccessibilityProps,\n    Omit<ViewProps, 'children' | 'style' | 'hitSlop'> {\n  /**\n   * Called when the hover is activated to provide visual feedback.\n   */\n  onHoverIn?: null | ((event: PressableEvent) => void);\n\n  /**\n   * Called when the hover is deactivated to undo visual feedback.\n   */\n  onHoverOut?: null | ((event: PressableEvent) => void);\n\n  /**\n   * Called when a single tap gesture is detected.\n   */\n  onPress?: null | ((event: PressableEvent) => void);\n\n  /**\n   * Called when a touch is engaged before `onPress`.\n   */\n  onPressIn?: null | ((event: PressableEvent) => void);\n\n  /**\n   * Called when a touch is released before `onPress`.\n   */\n  onPressOut?: null | ((event: PressableEvent) => void);\n\n  /**\n   * Called when a long-tap gesture is detected.\n   */\n  onLongPress?: null | ((event: PressableEvent) => void);\n\n  /**\n   * Either children or a render prop that receives a boolean reflecting whether\n   * the component is currently pressed.\n   */\n  children?:\n    | React.ReactNode\n    | ((state: PressableStateCallbackType) => React.ReactNode);\n\n  /**\n   * Whether a press gesture can be interrupted by a parent gesture such as a\n   * scroll event. Defaults to true.\n   */\n  cancelable?: null | boolean;\n\n  /**\n   * Duration to wait after hover in before calling `onHoverIn`.\n   * @platform web macos\n   *\n   * NOTE: not present in RN docs\n   */\n  delayHoverIn?: number | null;\n\n  /**\n   * Duration to wait after hover out before calling `onHoverOut`.\n   * @platform web macos\n   *\n   * NOTE: not present in RN docs\n   */\n  delayHoverOut?: number | null;\n\n  /**\n   * Duration (in milliseconds) from `onPressIn` before `onLongPress` is called.\n   */\n  delayLongPress?: null | number;\n\n  /**\n   * Whether the press behavior is disabled.\n   */\n  disabled?: null | boolean;\n\n  /**\n   * Additional distance outside of this view in which a press is detected.\n   */\n  hitSlop?: null | Insets | number;\n\n  /**\n   * Additional distance outside of this view in which a touch is considered a\n   * press before `onPressOut` is triggered.\n   */\n  pressRetentionOffset?: null | Insets | number;\n\n  /**\n   * If true, doesn't play system sound on touch.\n   * @platform android\n   */\n  android_disableSound?: null | boolean;\n\n  /**\n   * Enables the Android ripple effect and configures its color.\n   * @platform android\n   */\n  android_ripple?: null | PressableAndroidRippleConfig;\n\n  /**\n   * Used only for documentation or testing (e.g. snapshot testing).\n   */\n  testOnly_pressed?: null | boolean;\n\n  /**\n   * Either view styles or a function that receives a boolean reflecting whether\n   * the component is currently pressed and returns view styles.\n   */\n  style?:\n    | StyleProp<ViewStyle>\n    | ((state: PressableStateCallbackType) => StyleProp<ViewStyle>);\n\n  /**\n   * Duration (in milliseconds) to wait after press down before calling onPressIn.\n   */\n  unstable_pressDelay?: number;\n}\n"],"mappings":"","ignoreList":[]}