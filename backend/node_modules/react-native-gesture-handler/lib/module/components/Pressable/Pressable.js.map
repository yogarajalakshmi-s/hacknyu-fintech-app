{"version":3,"names":["React","useCallback","useMemo","useRef","useState","GestureObjects","Gesture","GestureDetector","Platform","processColor","NativeButton","numberAsInset","gestureToPressableEvent","isTouchWithinInset","gestureTouchToPressableEvent","addInsets","PressabilityDebugView","INT32_MAX","isFabric","isTestEnv","DEFAULT_LONG_PRESS_DURATION","IS_TEST_ENV","IS_FABRIC","Pressable","props","_android_ripple$radiu","testOnly_pressed","hitSlop","pressRetentionOffset","delayHoverIn","onHoverIn","delayHoverOut","onHoverOut","delayLongPress","unstable_pressDelay","onPress","onPressIn","onPressOut","onLongPress","style","children","android_disableSound","android_ripple","disabled","remainingProps","pressedState","setPressedState","pressableRef","isPressCallbackEnabled","hasPassedBoundsChecks","shouldPreventNativeEffects","normalizedHitSlop","normalizedPressRetentionOffset","hoverInTimeout","hoverOutTimeout","hoverGesture","Hover","manualActivation","cancelsTouchesInView","onBegin","event","current","clearTimeout","setTimeout","onFinalize","pressDelayTimeoutRef","isTouchPropagationAllowed","deferredEventPayload","pressInHandler","handlingOnTouchesDown","pressOutHandler","nativeEvent","touches","length","changedTouches","longPressTimeoutRef","onEndHandlingTouchesDown","cancelledMidPress","activateLongPress","longPressMinDuration","pressAndTouchGesture","LongPress","minDuration","maxDistance","onTouchesDown","_pressableRef$current","measure","_x","_y","width","height","_onEndHandlingTouches","at","call","onTouchesUp","onTouchesCancelled","allTouches","buttonGesture","Native","OS","onStart","appliedHitSlop","isPressableEnabled","gestures","gesture","enabled","runOnJS","shouldCancelWhenOutside","Simultaneous","pointerStyle","cursor","styleProp","pressed","childrenProp","rippleColor","_android_ripple$color","defaultRippleColor","undefined","unprocessedRippleColor","color","createElement","_extends","ref","touchSoundDisabled","rippleRadius","radius","testOnly_onPress","testOnly_onPressIn","testOnly_onPressOut","testOnly_onLongPress","__DEV__"],"sources":["Pressable.tsx"],"sourcesContent":["import React, { useCallback, useMemo, useRef, useState } from 'react';\nimport { GestureObjects as Gesture } from '../../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../../handlers/gestures/GestureDetector';\nimport { PressableEvent, PressableProps } from './PressableProps';\nimport {\n  Insets,\n  Platform,\n  StyleProp,\n  View,\n  ViewStyle,\n  processColor,\n} from 'react-native';\nimport NativeButton from '../GestureHandlerButton';\nimport {\n  numberAsInset,\n  gestureToPressableEvent,\n  isTouchWithinInset,\n  gestureTouchToPressableEvent,\n  addInsets,\n} from './utils';\nimport { PressabilityDebugView } from '../../handlers/PressabilityDebugView';\nimport { GestureTouchEvent } from '../../handlers/gestureHandlerCommon';\nimport { INT32_MAX, isFabric, isTestEnv } from '../../utils';\n\nconst DEFAULT_LONG_PRESS_DURATION = 500;\nconst IS_TEST_ENV = isTestEnv();\n\nlet IS_FABRIC: null | boolean = null;\n\nexport default function Pressable(props: PressableProps) {\n  const {\n    testOnly_pressed,\n    hitSlop,\n    pressRetentionOffset,\n    delayHoverIn,\n    onHoverIn,\n    delayHoverOut,\n    onHoverOut,\n    delayLongPress,\n    unstable_pressDelay,\n    onPress,\n    onPressIn,\n    onPressOut,\n    onLongPress,\n    style,\n    children,\n    android_disableSound,\n    android_ripple,\n    disabled,\n    ...remainingProps\n  } = props;\n\n  const [pressedState, setPressedState] = useState(testOnly_pressed ?? false);\n\n  const pressableRef = useRef<View>(null);\n\n  // Disabled when onLongPress has been called\n  const isPressCallbackEnabled = useRef<boolean>(true);\n  const hasPassedBoundsChecks = useRef<boolean>(false);\n  const shouldPreventNativeEffects = useRef<boolean>(false);\n\n  const normalizedHitSlop: Insets = useMemo(\n    () =>\n      typeof hitSlop === 'number' ? numberAsInset(hitSlop) : (hitSlop ?? {}),\n    [hitSlop]\n  );\n\n  const normalizedPressRetentionOffset: Insets = useMemo(\n    () =>\n      typeof pressRetentionOffset === 'number'\n        ? numberAsInset(pressRetentionOffset)\n        : (pressRetentionOffset ?? {}),\n    [pressRetentionOffset]\n  );\n\n  const hoverInTimeout = useRef<number | null>(null);\n  const hoverOutTimeout = useRef<number | null>(null);\n\n  const hoverGesture = useMemo(\n    () =>\n      Gesture.Hover()\n        .manualActivation(true) // Stops Hover from blocking Native gesture activation on web\n        .cancelsTouchesInView(false)\n        .onBegin((event) => {\n          if (hoverOutTimeout.current) {\n            clearTimeout(hoverOutTimeout.current);\n          }\n          if (delayHoverIn) {\n            hoverInTimeout.current = setTimeout(\n              () => onHoverIn?.(gestureToPressableEvent(event)),\n              delayHoverIn\n            );\n            return;\n          }\n          onHoverIn?.(gestureToPressableEvent(event));\n        })\n        .onFinalize((event) => {\n          if (hoverInTimeout.current) {\n            clearTimeout(hoverInTimeout.current);\n          }\n          if (delayHoverOut) {\n            hoverOutTimeout.current = setTimeout(\n              () => onHoverOut?.(gestureToPressableEvent(event)),\n              delayHoverOut\n            );\n            return;\n          }\n          onHoverOut?.(gestureToPressableEvent(event));\n        }),\n    [delayHoverIn, delayHoverOut, onHoverIn, onHoverOut]\n  );\n\n  const pressDelayTimeoutRef = useRef<number | null>(null);\n  const isTouchPropagationAllowed = useRef<boolean>(false);\n\n  // iOS only: due to varying flow of gestures, events sometimes have to be saved for later use\n  const deferredEventPayload = useRef<PressableEvent | null>(null);\n\n  const pressInHandler = useCallback(\n    (event: PressableEvent) => {\n      if (handlingOnTouchesDown.current) {\n        deferredEventPayload.current = event;\n      }\n\n      if (!isTouchPropagationAllowed.current) {\n        return;\n      }\n\n      deferredEventPayload.current = null;\n\n      onPressIn?.(event);\n      isPressCallbackEnabled.current = true;\n      pressDelayTimeoutRef.current = null;\n      setPressedState(true);\n    },\n    [onPressIn]\n  );\n\n  const pressOutHandler = useCallback(\n    (event: PressableEvent) => {\n      if (\n        !hasPassedBoundsChecks.current ||\n        event.nativeEvent.touches.length >\n          event.nativeEvent.changedTouches.length\n      ) {\n        return;\n      }\n\n      if (unstable_pressDelay && pressDelayTimeoutRef.current !== null) {\n        // When delay is preemptively finished by lifting touches,\n        // we want to immediately activate it's effects - pressInHandler,\n        // even though we are located at the pressOutHandler\n        clearTimeout(pressDelayTimeoutRef.current);\n        pressInHandler(event);\n      }\n\n      if (deferredEventPayload.current) {\n        onPressIn?.(deferredEventPayload.current);\n        deferredEventPayload.current = null;\n      }\n\n      onPressOut?.(event);\n\n      if (isPressCallbackEnabled.current) {\n        onPress?.(event);\n      }\n\n      if (longPressTimeoutRef.current) {\n        clearTimeout(longPressTimeoutRef.current);\n        longPressTimeoutRef.current = null;\n      }\n\n      isTouchPropagationAllowed.current = false;\n      hasPassedBoundsChecks.current = false;\n      isPressCallbackEnabled.current = true;\n      setPressedState(false);\n    },\n    [onPress, onPressIn, onPressOut, pressInHandler, unstable_pressDelay]\n  );\n\n  const handlingOnTouchesDown = useRef<boolean>(false);\n  const onEndHandlingTouchesDown = useRef<(() => void) | null>(null);\n  const cancelledMidPress = useRef<boolean>(false);\n\n  const activateLongPress = useCallback(\n    (event: GestureTouchEvent) => {\n      if (!isTouchPropagationAllowed.current) {\n        return;\n      }\n\n      if (hasPassedBoundsChecks.current) {\n        onLongPress?.(gestureTouchToPressableEvent(event));\n        isPressCallbackEnabled.current = false;\n      }\n\n      if (longPressTimeoutRef.current) {\n        clearTimeout(longPressTimeoutRef.current);\n        longPressTimeoutRef.current = null;\n      }\n    },\n    [onLongPress]\n  );\n\n  const longPressTimeoutRef = useRef<number | null>(null);\n  const longPressMinDuration =\n    (delayLongPress ?? DEFAULT_LONG_PRESS_DURATION) +\n    (unstable_pressDelay ?? 0);\n\n  const pressAndTouchGesture = useMemo(\n    () =>\n      Gesture.LongPress()\n        .minDuration(INT32_MAX) // Stops long press from blocking native gesture\n        .maxDistance(INT32_MAX) // Stops long press from cancelling after set distance\n        .cancelsTouchesInView(false)\n        .onTouchesDown((event) => {\n          handlingOnTouchesDown.current = true;\n          pressableRef.current?.measure((_x, _y, width, height) => {\n            if (\n              !isTouchWithinInset(\n                {\n                  width,\n                  height,\n                },\n                normalizedHitSlop,\n                event.changedTouches.at(-1)\n              ) ||\n              hasPassedBoundsChecks.current ||\n              cancelledMidPress.current\n            ) {\n              cancelledMidPress.current = false;\n              onEndHandlingTouchesDown.current = null;\n              handlingOnTouchesDown.current = false;\n              return;\n            }\n\n            hasPassedBoundsChecks.current = true;\n\n            // In case of multiple touches, the first one starts long press gesture\n            if (longPressTimeoutRef.current === null) {\n              // Start long press gesture timer\n              longPressTimeoutRef.current = setTimeout(\n                () => activateLongPress(event),\n                longPressMinDuration\n              );\n            }\n\n            if (unstable_pressDelay) {\n              pressDelayTimeoutRef.current = setTimeout(() => {\n                pressInHandler(gestureTouchToPressableEvent(event));\n              }, unstable_pressDelay);\n            } else {\n              pressInHandler(gestureTouchToPressableEvent(event));\n            }\n\n            onEndHandlingTouchesDown.current?.();\n            onEndHandlingTouchesDown.current = null;\n            handlingOnTouchesDown.current = false;\n          });\n        })\n        .onTouchesUp((event) => {\n          if (handlingOnTouchesDown.current) {\n            onEndHandlingTouchesDown.current = () =>\n              pressOutHandler(gestureTouchToPressableEvent(event));\n            return;\n          }\n          // On iOS, short taps will make LongPress gesture call onTouchesUp before Native gesture calls onStart\n          // This variable ensures that onStart isn't detected as the first gesture since Pressable is pressed.\n          if (deferredEventPayload.current !== null) {\n            shouldPreventNativeEffects.current = true;\n          }\n          pressOutHandler(gestureTouchToPressableEvent(event));\n        })\n        .onTouchesCancelled((event) => {\n          isPressCallbackEnabled.current = false;\n\n          if (handlingOnTouchesDown.current) {\n            cancelledMidPress.current = true;\n            onEndHandlingTouchesDown.current = () =>\n              pressOutHandler(gestureTouchToPressableEvent(event));\n            return;\n          }\n\n          if (\n            !hasPassedBoundsChecks.current ||\n            event.allTouches.length > event.changedTouches.length\n          ) {\n            return;\n          }\n\n          pressOutHandler(gestureTouchToPressableEvent(event));\n        }),\n    [\n      activateLongPress,\n      longPressMinDuration,\n      normalizedHitSlop,\n      pressInHandler,\n      pressOutHandler,\n      unstable_pressDelay,\n    ]\n  );\n\n  // RNButton is placed inside ButtonGesture to enable Android's ripple and to capture non-propagating events\n  const buttonGesture = useMemo(\n    () =>\n      Gesture.Native()\n        .onBegin(() => {\n          // Android sets BEGAN state on press down\n          if (Platform.OS === 'android' || Platform.OS === 'macos') {\n            isTouchPropagationAllowed.current = true;\n          }\n        })\n        .onStart(() => {\n          if (Platform.OS === 'web') {\n            isTouchPropagationAllowed.current = true;\n          }\n\n          // iOS sets ACTIVE state on press down\n          if (Platform.OS !== 'ios') {\n            return;\n          }\n\n          if (deferredEventPayload.current) {\n            isTouchPropagationAllowed.current = true;\n\n            if (hasPassedBoundsChecks.current) {\n              pressInHandler(deferredEventPayload.current);\n              deferredEventPayload.current = null;\n            } else {\n              pressOutHandler(deferredEventPayload.current);\n              isTouchPropagationAllowed.current = false;\n            }\n\n            return;\n          }\n\n          if (hasPassedBoundsChecks.current) {\n            isTouchPropagationAllowed.current = true;\n            return;\n          }\n\n          if (shouldPreventNativeEffects.current) {\n            shouldPreventNativeEffects.current = false;\n            return;\n          }\n\n          isTouchPropagationAllowed.current = true;\n        }),\n    [pressInHandler, pressOutHandler]\n  );\n\n  const appliedHitSlop = addInsets(\n    normalizedHitSlop,\n    normalizedPressRetentionOffset\n  );\n\n  const isPressableEnabled = disabled !== true;\n\n  const gestures = [buttonGesture, pressAndTouchGesture, hoverGesture];\n\n  for (const gesture of gestures) {\n    gesture.enabled(isPressableEnabled);\n    gesture.runOnJS(true);\n    gesture.hitSlop(appliedHitSlop);\n    gesture.shouldCancelWhenOutside(Platform.OS === 'web' ? false : true);\n  }\n\n  // Uses different hitSlop, to activate on hitSlop area instead of pressRetentionOffset area\n  buttonGesture.hitSlop(normalizedHitSlop);\n\n  const gesture = Gesture.Simultaneous(...gestures);\n\n  // `cursor: 'pointer'` on `RNButton` crashes iOS\n  const pointerStyle: StyleProp<ViewStyle> =\n    Platform.OS === 'web' ? { cursor: 'pointer' } : {};\n\n  const styleProp =\n    typeof style === 'function' ? style({ pressed: pressedState }) : style;\n\n  const childrenProp =\n    typeof children === 'function'\n      ? children({ pressed: pressedState })\n      : children;\n\n  const rippleColor = useMemo(() => {\n    if (IS_FABRIC === null) {\n      IS_FABRIC = isFabric();\n    }\n\n    const defaultRippleColor = android_ripple ? undefined : 'transparent';\n    const unprocessedRippleColor = android_ripple?.color ?? defaultRippleColor;\n    return IS_FABRIC\n      ? unprocessedRippleColor\n      : processColor(unprocessedRippleColor);\n  }, [android_ripple]);\n\n  return (\n    <GestureDetector gesture={gesture}>\n      <NativeButton\n        {...remainingProps}\n        ref={pressableRef}\n        hitSlop={appliedHitSlop}\n        enabled={isPressableEnabled}\n        touchSoundDisabled={android_disableSound ?? undefined}\n        rippleColor={rippleColor}\n        rippleRadius={android_ripple?.radius ?? undefined}\n        style={[pointerStyle, styleProp]}\n        testOnly_onPress={IS_TEST_ENV ? onPress : undefined}\n        testOnly_onPressIn={IS_TEST_ENV ? onPressIn : undefined}\n        testOnly_onPressOut={IS_TEST_ENV ? onPressOut : undefined}\n        testOnly_onLongPress={IS_TEST_ENV ? onLongPress : undefined}>\n        {childrenProp}\n        {__DEV__ ? (\n          <PressabilityDebugView color=\"red\" hitSlop={normalizedHitSlop} />\n        ) : null}\n      </NativeButton>\n    </GestureDetector>\n  );\n}\n"],"mappings":"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","ignoreList":[]}