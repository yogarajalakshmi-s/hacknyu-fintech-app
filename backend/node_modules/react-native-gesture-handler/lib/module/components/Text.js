function _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }
import React, { forwardRef, useEffect, useRef } from 'react';
import { Platform, Text as RNText } from 'react-native';
import { GestureObjects as Gesture } from '../handlers/gestures/gestureObjects';
import { GestureDetector } from '../handlers/gestures/GestureDetector';
export const Text = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    onPress,
    onLongPress,
    ...rest
  } = props;
  const textRef = useRef(null);
  const native = Gesture.Native().runOnJS(true);
  const refHandler = node => {
    textRef.current = node;
    if (ref === null) {
      return;
    }
    if (typeof ref === 'function') {
      ref(node);
    } else {
      ref.current = node;
    }
  };
  useEffect(() => {
    if (Platform.OS !== 'web') {
      return;
    }
    const textElement = ref ? ref.current : textRef.current;

    // At this point we are sure that textElement is div in HTML tree
    textElement === null || textElement === void 0 || textElement.setAttribute('rnghtext', 'true');
  }, []);
  return onPress || onLongPress ? /*#__PURE__*/React.createElement(GestureDetector, {
    gesture: native
  }, /*#__PURE__*/React.createElement(RNText, _extends({
    onPress: onPress,
    onLongPress: onLongPress,
    ref: refHandler
  }, rest))) : /*#__PURE__*/React.createElement(RNText, _extends({
    ref: ref
  }, rest));
});
// eslint-disable-next-line @typescript-eslint/no-redeclare
//# sourceMappingURL=Text.js.map