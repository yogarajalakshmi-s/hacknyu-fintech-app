{"version":3,"names":["Platform","React","Component","GenericTouchable","TouchableNativeFeedback","getExtraButtonProps","extraProps","background","props","type","borderless","color","attribute","rippleRadius","useForeground","render","style","rest","createElement","_extends","extraButtonProps","_defineProperty","defaultProps","rippleColor","OS","Version"],"sources":["TouchableNativeFeedback.android.tsx"],"sourcesContent":["import { Platform, ColorValue } from 'react-native';\nimport * as React from 'react';\nimport { Component } from 'react';\nimport GenericTouchable from './GenericTouchable';\nimport {\n  TouchableNativeFeedbackProps,\n  TouchableNativeFeedbackExtraProps,\n} from './TouchableNativeFeedbackProps';\n\n/**\n * @deprecated TouchableNativeFeedback will be removed in the future version of Gesture Handler.\n *\n * TouchableNativeFeedback behaves slightly different than RN's TouchableNativeFeedback.\n * There's small difference with handling long press ripple since RN's implementation calls\n * ripple animation via bridge. This solution leaves all animations' handling for native components so\n * it follows native behaviours.\n */\nexport default class TouchableNativeFeedback extends Component<TouchableNativeFeedbackProps> {\n  static defaultProps = {\n    ...GenericTouchable.defaultProps,\n    useForeground: true,\n    extraButtonProps: {\n      // Disable hiding ripple on Android\n      rippleColor: null,\n    },\n  };\n\n  // Could be taken as RNTouchableNativeFeedback.SelectableBackground etc. but the API may change\n  static SelectableBackground = (rippleRadius?: number) => ({\n    type: 'ThemeAttrAndroid',\n    // I added `attribute` prop to clone the implementation of RN and be able to use only 2 types\n    attribute: 'selectableItemBackground',\n    rippleRadius,\n  });\n  static SelectableBackgroundBorderless = (rippleRadius?: number) => ({\n    type: 'ThemeAttrAndroid',\n    attribute: 'selectableItemBackgroundBorderless',\n    rippleRadius,\n  });\n  static Ripple = (\n    color: ColorValue,\n    borderless: boolean,\n    rippleRadius?: number\n  ) => ({\n    type: 'RippleAndroid',\n    color,\n    borderless,\n    rippleRadius,\n  });\n\n  static canUseNativeForeground = () =>\n    Platform.OS === 'android' && Platform.Version >= 23;\n\n  getExtraButtonProps() {\n    const extraProps: TouchableNativeFeedbackExtraProps = {};\n    const { background } = this.props;\n    if (background) {\n      // I changed type values to match those used in RN\n      // TODO(TS): check if it works the same as previous implementation - looks like it works the same as RN component, so it should be ok\n      if (background.type === 'RippleAndroid') {\n        extraProps['borderless'] = background.borderless;\n        extraProps['rippleColor'] = background.color;\n      } else if (background.type === 'ThemeAttrAndroid') {\n        extraProps['borderless'] =\n          background.attribute === 'selectableItemBackgroundBorderless';\n      }\n      // I moved it from above since it should be available in all options\n      extraProps['rippleRadius'] = background.rippleRadius;\n    }\n    extraProps['foreground'] = this.props.useForeground;\n    return extraProps;\n  }\n  render() {\n    const { style = {}, ...rest } = this.props;\n    return (\n      <GenericTouchable\n        {...rest}\n        style={style}\n        extraButtonProps={this.getExtraButtonProps()}\n      />\n    );\n  }\n}\n"],"mappings":";;;;AAAA,SAASA,QAAQ,QAAoB,cAAc;AACnD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,OAAO;AACjC,OAAOC,gBAAgB,MAAM,oBAAoB;AAMjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAMC,uBAAuB,SAASF,SAAS,CAA+B;EAoC3FG,mBAAmBA,CAAA,EAAG;IACpB,MAAMC,UAA6C,GAAG,CAAC,CAAC;IACxD,MAAM;MAAEC;IAAW,CAAC,GAAG,IAAI,CAACC,KAAK;IACjC,IAAID,UAAU,EAAE;MACd;MACA;MACA,IAAIA,UAAU,CAACE,IAAI,KAAK,eAAe,EAAE;QACvCH,UAAU,CAAC,YAAY,CAAC,GAAGC,UAAU,CAACG,UAAU;QAChDJ,UAAU,CAAC,aAAa,CAAC,GAAGC,UAAU,CAACI,KAAK;MAC9C,CAAC,MAAM,IAAIJ,UAAU,CAACE,IAAI,KAAK,kBAAkB,EAAE;QACjDH,UAAU,CAAC,YAAY,CAAC,GACtBC,UAAU,CAACK,SAAS,KAAK,oCAAoC;MACjE;MACA;MACAN,UAAU,CAAC,cAAc,CAAC,GAAGC,UAAU,CAACM,YAAY;IACtD;IACAP,UAAU,CAAC,YAAY,CAAC,GAAG,IAAI,CAACE,KAAK,CAACM,aAAa;IACnD,OAAOR,UAAU;EACnB;EACAS,MAAMA,CAAA,EAAG;IACP,MAAM;MAAEC,KAAK,GAAG,CAAC,CAAC;MAAE,GAAGC;IAAK,CAAC,GAAG,IAAI,CAACT,KAAK;IAC1C,oBACEP,KAAA,CAAAiB,aAAA,CAACf,gBAAgB,EAAAgB,QAAA,KACXF,IAAI;MACRD,KAAK,EAAEA,KAAM;MACbI,gBAAgB,EAAE,IAAI,CAACf,mBAAmB,CAAC;IAAE,EAC9C,CAAC;EAEN;AACF;AAACgB,eAAA,CAjEoBjB,uBAAuB,kBACpB;EACpB,GAAGD,gBAAgB,CAACmB,YAAY;EAChCR,aAAa,EAAE,IAAI;EACnBM,gBAAgB,EAAE;IAChB;IACAG,WAAW,EAAE;EACf;AACF,CAAC;AAED;AAAAF,eAAA,CAVmBjB,uBAAuB,0BAWXS,YAAqB,KAAM;EACxDJ,IAAI,EAAE,kBAAkB;EACxB;EACAG,SAAS,EAAE,0BAA0B;EACrCC;AACF,CAAC,CAAC;AAAAQ,eAAA,CAhBiBjB,uBAAuB,oCAiBDS,YAAqB,KAAM;EAClEJ,IAAI,EAAE,kBAAkB;EACxBG,SAAS,EAAE,oCAAoC;EAC/CC;AACF,CAAC,CAAC;AAAAQ,eAAA,CArBiBjB,uBAAuB,YAsB1B,CACdO,KAAiB,EACjBD,UAAmB,EACnBG,YAAqB,MACjB;EACJJ,IAAI,EAAE,eAAe;EACrBE,KAAK;EACLD,UAAU;EACVG;AACF,CAAC,CAAC;AAAAQ,eAAA,CA/BiBjB,uBAAuB,4BAiCV,MAC9BJ,QAAQ,CAACwB,EAAE,KAAK,SAAS,IAAIxB,QAAQ,CAACyB,OAAO,IAAI,EAAE","ignoreList":[]}