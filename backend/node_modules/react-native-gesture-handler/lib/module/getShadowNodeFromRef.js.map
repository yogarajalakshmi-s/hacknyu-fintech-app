{"version":3,"names":["findHostInstance_DEPRECATED","getInternalInstanceHandleFromPublicInstance","getShadowNodeFromRef","ref","undefined","_ReactFabric$default","ReactFabric","require","default","e","_ref","_require$getInternalI","_internalInstanceHandle","stateNode","node"],"sources":["getShadowNodeFromRef.ts"],"sourcesContent":["// Used by GestureDetector (unsupported on web at the moment) to check whether the\n// attached view may get flattened on Fabric. This implementation causes errors\n// on web due to the static resolution of `require` statements by webpack breaking\n// the conditional importing. Solved by making .web file.\nlet findHostInstance_DEPRECATED: (ref: unknown) => void;\nlet getInternalInstanceHandleFromPublicInstance: (ref: unknown) => {\n  stateNode: { node: unknown };\n};\n\nexport function getShadowNodeFromRef(ref: unknown) {\n  // Load findHostInstance_DEPRECATED lazily because it may not be available before render\n  if (findHostInstance_DEPRECATED === undefined) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-assignment\n      const ReactFabric = require('react-native/Libraries/Renderer/shims/ReactFabric');\n      // Since RN 0.77 ReactFabric exports findHostInstance_DEPRECATED in default object so we're trying to\n      // access it first, then fallback on named export\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      findHostInstance_DEPRECATED =\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        ReactFabric?.default?.findHostInstance_DEPRECATED ||\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        ReactFabric?.findHostInstance_DEPRECATED;\n    } catch (e) {\n      findHostInstance_DEPRECATED = (_ref: unknown) => null;\n    }\n  }\n\n  // Load findHostInstance_DEPRECATED lazily because it may not be available before render\n  if (getInternalInstanceHandleFromPublicInstance === undefined) {\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      getInternalInstanceHandleFromPublicInstance =\n        // eslint-disable-next-line @typescript-eslint/no-var-requires, @typescript-eslint/no-unsafe-member-access\n        require('react-native/Libraries/ReactNative/ReactFabricPublicInstance/ReactFabricPublicInstance')\n          .getInternalInstanceHandleFromPublicInstance ??\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-return\n        ((ref: any) => ref._internalInstanceHandle);\n    } catch (e) {\n      getInternalInstanceHandleFromPublicInstance = (ref: any) =>\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-return\n        ref._internalInstanceHandle;\n    }\n  }\n\n  // @ts-ignore Fabric\n  return getInternalInstanceHandleFromPublicInstance(\n    findHostInstance_DEPRECATED(ref)\n  ).stateNode.node;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,IAAIA,2BAAmD;AACvD,IAAIC,2CAEH;AAED,OAAO,SAASC,oBAAoBA,CAACC,GAAY,EAAE;EACjD;EACA,IAAIH,2BAA2B,KAAKI,SAAS,EAAE;IAC7C,IAAI;MAAA,IAAAC,oBAAA;MACF;MACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,mDAAmD,CAAC;MAChF;MACA;MACA;MACAP,2BAA2B;MACzB;MACA,CAAAM,WAAW,aAAXA,WAAW,gBAAAD,oBAAA,GAAXC,WAAW,CAAEE,OAAO,cAAAH,oBAAA,uBAApBA,oBAAA,CAAsBL,2BAA2B,MACjD;MACAM,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEN,2BAA2B;IAC5C,CAAC,CAAC,OAAOS,CAAC,EAAE;MACVT,2BAA2B,GAAIU,IAAa,IAAK,IAAI;IACvD;EACF;;EAEA;EACA,IAAIT,2CAA2C,KAAKG,SAAS,EAAE;IAC7D,IAAI;MAAA,IAAAO,qBAAA;MACF;MACAV,2CAA2C,GACzC;MAAA,CAAAU,qBAAA,GACAJ,OAAO,CAAC,wFAAwF,CAAC,CAC9FN,2CAA2C,cAAAU,qBAAA,cAAAA,qBAAA;MAC9C;MACER,GAAQ,IAAKA,GAAG,CAACS,uBAAwB;IAC/C,CAAC,CAAC,OAAOH,CAAC,EAAE;MACVR,2CAA2C,GAAIE,GAAQ;MACrD;MACAA,GAAG,CAACS,uBAAuB;IAC/B;EACF;;EAEA;EACA,OAAOX,2CAA2C,CAChDD,2BAA2B,CAACG,GAAG,CACjC,CAAC,CAACU,SAAS,CAACC,IAAI;AAClB","ignoreList":[]}