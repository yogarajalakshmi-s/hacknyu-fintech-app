function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// eslint-disable-next-line @typescript-eslint/no-extraneous-class
export class MountRegistry {
  static addMountListener(listener) {
    this.mountListeners.add(listener);
    return () => {
      this.mountListeners.delete(listener);
    };
  }
  static addUnmountListener(listener) {
    this.unmountListeners.add(listener);
    return () => {
      this.unmountListeners.delete(listener);
    };
  }
  static gestureHandlerWillMount(handler) {
    this.mountListeners.forEach(listener => listener(handler));
  }
  static gestureHandlerWillUnmount(handler) {
    this.unmountListeners.forEach(listener => listener(handler));
  }
  static gestureWillMount(gesture) {
    this.mountListeners.forEach(listener => listener(gesture));
  }
  static gestureWillUnmount(gesture) {
    this.unmountListeners.forEach(listener => listener(gesture));
  }
}
_defineProperty(MountRegistry, "mountListeners", new Set());
_defineProperty(MountRegistry, "unmountListeners", new Set());
//# sourceMappingURL=mountRegistry.js.map