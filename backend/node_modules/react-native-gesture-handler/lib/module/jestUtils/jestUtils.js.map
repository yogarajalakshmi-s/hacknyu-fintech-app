{"version":3,"names":["invariant","DeviceEventEmitter","flingHandlerName","forceTouchHandlerName","BaseGesture","findHandlerByTestID","longPressHandlerName","nativeViewHandlerName","panHandlerName","pinchHandlerName","rotationHandlerName","tapHandlerName","State","hasProperty","withPrevAndCurrent","fireEvent","_element","_name","_data","require","_e","handlersDefaultEvents","x","y","absoluteX","absoluteY","numberOfPointers","force","duration","pointerInside","translationX","translationY","velocityX","velocityY","stylusData","undefined","focalX","focalY","scale","velocity","anchorX","anchorY","rotation","isGesture","componentOrGesture","wrapWithNativeEvent","event","nativeEvent","fillOldStateChanges","previousEvent","currentEvent","isFirstEvent","oldState","UNDETERMINED","isGestureStateEvent","state","validateStateTransitions","stringify","JSON","errorMsgWithBothEvents","description","errorMsgWithCurrentEvent","BEGAN","fillMissingDefaultsFor","handlerType","handlerTag","isDiscreteHandler","fillMissingStatesTransitions","events","_events2","_events$","_events","lastEvent","length","firstEvent","shouldDuplicateFirstEvent","hasState","duplicated","unshift","shouldDuplicateLastEvent","END","FAILED","CANCELLED","push","isWithoutState","noEventsLeft","trueFn","fillEventsForCurrentState","shouldConsumeEvent","shouldTransitionToNextState","peekCurrentEvent","_events$2","peekNextEvent","_events$3","consumeCurrentEvent","shift","nextEvent","currentRequiredState","REQUIRED_EVENTS","currentStateIdx","eventData","shouldUseEvent","transformedEvents","ACTIVE","hasAllStates","iterations","nextRequiredState","e","getHandlerData","gesture","emitEvent","eventName","args","emit","handlerName","enabled","config","gestureHandlerComponent","props","fireGestureHandler","eventList","_","map","lastSentEvent","hasChangedState","getByGestureTestId","testID","handler","Error"],"sources":["jestUtils.ts"],"sourcesContent":["import invariant from 'invariant';\nimport { DeviceEventEmitter } from 'react-native';\nimport { ReactTestInstance } from 'react-test-renderer';\nimport {\n  FlingGestureHandler,\n  flingHandlerName,\n} from '../handlers/FlingGestureHandler';\nimport {\n  ForceTouchGestureHandler,\n  forceTouchHandlerName,\n} from '../handlers/ForceTouchGestureHandler';\nimport {\n  BaseGestureHandlerProps,\n  GestureEvent,\n  HandlerStateChangeEvent,\n} from '../handlers/gestureHandlerCommon';\nimport { FlingGesture } from '../handlers/gestures/flingGesture';\nimport { ForceTouchGesture } from '../handlers/gestures/forceTouchGesture';\nimport { BaseGesture, GestureType } from '../handlers/gestures/gesture';\nimport { LongPressGesture } from '../handlers/gestures/longPressGesture';\nimport { NativeGesture } from '../handlers/gestures/nativeGesture';\nimport { PanGesture } from '../handlers/gestures/panGesture';\nimport { PinchGesture } from '../handlers/gestures/pinchGesture';\nimport { RotationGesture } from '../handlers/gestures/rotationGesture';\nimport { TapGesture } from '../handlers/gestures/tapGesture';\nimport { findHandlerByTestID } from '../handlers/handlersRegistry';\nimport {\n  LongPressGestureHandler,\n  longPressHandlerName,\n} from '../handlers/LongPressGestureHandler';\nimport type {\n  FlingGestureHandlerEventPayload,\n  ForceTouchGestureHandlerEventPayload,\n  LongPressGestureHandlerEventPayload,\n  NativeViewGestureHandlerPayload,\n  PanGestureHandlerEventPayload,\n  PinchGestureHandlerEventPayload,\n  RotationGestureHandlerEventPayload,\n  TapGestureHandlerEventPayload,\n} from '../handlers/GestureHandlerEventPayload';\nimport {\n  NativeViewGestureHandler,\n  nativeViewHandlerName,\n} from '../handlers/NativeViewGestureHandler';\nimport {\n  PanGestureHandler,\n  panHandlerName,\n} from '../handlers/PanGestureHandler';\nimport {\n  PinchGestureHandler,\n  pinchHandlerName,\n} from '../handlers/PinchGestureHandler';\nimport {\n  RotationGestureHandler,\n  rotationHandlerName,\n} from '../handlers/RotationGestureHandler';\nimport {\n  TapGestureHandler,\n  tapHandlerName,\n} from '../handlers/TapGestureHandler';\nimport { State } from '../State';\nimport { hasProperty, withPrevAndCurrent } from '../utils';\n\n// Load fireEvent conditionally, so RNGH may be used in setups without testing-library\nlet fireEvent = (\n  _element: ReactTestInstance,\n  _name: string,\n  ..._data: any[]\n) => {\n  // NOOP\n};\n\ntry {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  fireEvent = require('@testing-library/react-native').fireEvent;\n} catch (_e) {\n  // Do nothing if not available\n}\n\ntype GestureHandlerTestEvent<\n  TEventPayload extends Record<string, unknown> = Record<string, unknown>,\n> = (\n  | GestureEvent<TEventPayload>\n  | HandlerStateChangeEvent<TEventPayload>\n)['nativeEvent'];\n\ntype HandlerNames = keyof DefaultEventsMapping;\n\ntype WithNumberOfPointers<T> = {\n  [P in keyof T]: T[P] & { numberOfPointers: number };\n};\ntype DefaultEventsMapping = WithNumberOfPointers<{\n  [flingHandlerName]: FlingGestureHandlerEventPayload;\n  [forceTouchHandlerName]: ForceTouchGestureHandlerEventPayload;\n  [longPressHandlerName]: LongPressGestureHandlerEventPayload;\n  [nativeViewHandlerName]: NativeViewGestureHandlerPayload;\n  [panHandlerName]: PanGestureHandlerEventPayload;\n  [pinchHandlerName]: PinchGestureHandlerEventPayload;\n  [rotationHandlerName]: RotationGestureHandlerEventPayload;\n  [tapHandlerName]: TapGestureHandlerEventPayload;\n}>;\n\nconst handlersDefaultEvents: DefaultEventsMapping = {\n  [flingHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    numberOfPointers: 1,\n  },\n  [forceTouchHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    force: 1,\n    numberOfPointers: 1,\n  },\n  [longPressHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    duration: 100,\n    numberOfPointers: 1,\n  },\n  [nativeViewHandlerName]: {\n    pointerInside: true,\n    numberOfPointers: 1,\n  },\n  [panHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    translationX: 100,\n    translationY: 0,\n    velocityX: 3,\n    velocityY: 0,\n    numberOfPointers: 1,\n    stylusData: undefined,\n  },\n  [pinchHandlerName]: {\n    focalX: 0,\n    focalY: 0,\n    scale: 2,\n    velocity: 1,\n    numberOfPointers: 2,\n  },\n  [rotationHandlerName]: {\n    anchorX: 0,\n    anchorY: 0,\n    rotation: 3.14,\n    velocity: 2,\n    numberOfPointers: 2,\n  },\n  [tapHandlerName]: {\n    x: 0,\n    y: 0,\n    absoluteX: 0,\n    absoluteY: 0,\n    numberOfPointers: 1,\n  },\n};\n\nfunction isGesture(\n  componentOrGesture: ReactTestInstance | GestureType\n): componentOrGesture is GestureType {\n  return componentOrGesture instanceof BaseGesture;\n}\n\ninterface WrappedGestureHandlerTestEvent {\n  nativeEvent: GestureHandlerTestEvent;\n}\nfunction wrapWithNativeEvent(\n  event: GestureHandlerTestEvent\n): WrappedGestureHandlerTestEvent {\n  return { nativeEvent: event };\n}\n\nfunction fillOldStateChanges(\n  previousEvent: GestureHandlerTestEvent | null,\n  currentEvent: Omit<GestureHandlerTestEvent, 'oldState'>\n): GestureHandlerTestEvent {\n  const isFirstEvent = previousEvent === null;\n  if (isFirstEvent) {\n    return {\n      oldState: State.UNDETERMINED,\n      ...currentEvent,\n    } as GestureHandlerTestEvent;\n  }\n\n  const isGestureStateEvent = previousEvent.state !== currentEvent.state;\n  if (isGestureStateEvent) {\n    return {\n      oldState: previousEvent?.state,\n      ...currentEvent,\n    } as GestureHandlerTestEvent;\n  } else {\n    return currentEvent as GestureHandlerTestEvent;\n  }\n}\n\ntype EventWithStates = Partial<\n  Pick<GestureHandlerTestEvent, 'oldState' | 'state'>\n>;\nfunction validateStateTransitions(\n  previousEvent: EventWithStates | null,\n  currentEvent: EventWithStates\n) {\n  function stringify(event: Record<string, unknown> | null) {\n    return JSON.stringify(event, null, 2);\n  }\n  function errorMsgWithBothEvents(description: string) {\n    return `${description}, invalid event: ${stringify(\n      currentEvent\n    )}, previous event: ${stringify(previousEvent)}`;\n  }\n\n  function errorMsgWithCurrentEvent(description: string) {\n    return `${description}, invalid event: ${stringify(currentEvent)}`;\n  }\n\n  invariant(\n    hasProperty(currentEvent, 'state'),\n    errorMsgWithCurrentEvent('every event must have state')\n  );\n\n  const isFirstEvent = previousEvent === null;\n  if (isFirstEvent) {\n    invariant(\n      currentEvent.state === State.BEGAN,\n      errorMsgWithCurrentEvent('first event must have BEGAN state')\n    );\n  }\n\n  if (previousEvent !== null) {\n    if (previousEvent.state !== currentEvent.state) {\n      invariant(\n        hasProperty(currentEvent, 'oldState'),\n        errorMsgWithCurrentEvent(\n          'when state changes, oldState field should be present'\n        )\n      );\n      invariant(\n        currentEvent.oldState === previousEvent.state,\n        errorMsgWithBothEvents(\n          \"when state changes, oldState should be the same as previous event' state\"\n        )\n      );\n    }\n  }\n\n  return currentEvent;\n}\n\ntype EventWithoutStates = Omit<GestureHandlerTestEvent, 'oldState' | 'state'>;\ninterface HandlerInfo {\n  handlerType: HandlerNames;\n  handlerTag: number;\n}\nfunction fillMissingDefaultsFor({\n  handlerType,\n  handlerTag,\n}: HandlerInfo): (\n  event: Partial<GestureHandlerTestEvent>\n) => EventWithoutStates {\n  return (event) => {\n    return {\n      ...handlersDefaultEvents[handlerType],\n      ...event,\n      handlerTag,\n    };\n  };\n}\n\nfunction isDiscreteHandler(handlerType: HandlerNames) {\n  return (\n    handlerType === 'TapGestureHandler' ||\n    handlerType === 'LongPressGestureHandler'\n  );\n}\n\nfunction fillMissingStatesTransitions(\n  events: EventWithoutStates[],\n  isDiscreteHandler: boolean\n): EventWithoutStates[] {\n  type Event = EventWithoutStates | null;\n  const _events = [...events];\n  const lastEvent = _events[_events.length - 1] ?? null;\n  const firstEvent = _events[0] ?? null;\n\n  const shouldDuplicateFirstEvent =\n    !isDiscreteHandler && !hasState(State.BEGAN)(firstEvent);\n  if (shouldDuplicateFirstEvent) {\n    const duplicated = { ...firstEvent, state: State.BEGAN };\n    // @ts-ignore badly typed, property may exist and we don't want to copy it\n    delete duplicated.oldState;\n    _events.unshift(duplicated);\n  }\n\n  const shouldDuplicateLastEvent =\n    !hasState(State.END)(lastEvent) ||\n    !hasState(State.FAILED)(lastEvent) ||\n    !hasState(State.CANCELLED)(lastEvent);\n\n  if (shouldDuplicateLastEvent) {\n    const duplicated = { ...lastEvent, state: State.END };\n    // @ts-ignore badly typed, property may exist and we don't want to copy it\n    delete duplicated.oldState;\n    _events.push(duplicated);\n  }\n\n  function isWithoutState(event: Event) {\n    return event !== null && !hasProperty(event, 'state');\n  }\n  function hasState(state: State) {\n    return (event: Event) => event !== null && event.state === state;\n  }\n  function noEventsLeft(event: Event) {\n    return event === null;\n  }\n\n  function trueFn() {\n    return true;\n  }\n  interface Args {\n    shouldConsumeEvent?: (event: Event) => boolean;\n    shouldTransitionToNextState?: (nextEvent: Event) => boolean;\n  }\n  function fillEventsForCurrentState({\n    shouldConsumeEvent = trueFn,\n    shouldTransitionToNextState = trueFn,\n  }: Args) {\n    function peekCurrentEvent(): Event {\n      return _events[0] ?? null;\n    }\n    function peekNextEvent(): Event {\n      return _events[1] ?? null;\n    }\n    function consumeCurrentEvent() {\n      _events.shift();\n    }\n    const currentEvent = peekCurrentEvent();\n    const nextEvent = peekNextEvent();\n    const currentRequiredState = REQUIRED_EVENTS[currentStateIdx];\n\n    let eventData = {};\n    const shouldUseEvent = shouldConsumeEvent(currentEvent);\n    if (shouldUseEvent) {\n      eventData = currentEvent!;\n      consumeCurrentEvent();\n    }\n    transformedEvents.push({ state: currentRequiredState, ...eventData });\n    if (shouldTransitionToNextState(nextEvent)) {\n      currentStateIdx++;\n    }\n  }\n\n  const REQUIRED_EVENTS = [State.BEGAN, State.ACTIVE, State.END];\n\n  let currentStateIdx = 0;\n  const transformedEvents: EventWithoutStates[] = [];\n  let hasAllStates;\n  let iterations = 0;\n  do {\n    const nextRequiredState = REQUIRED_EVENTS[currentStateIdx];\n    if (nextRequiredState === State.BEGAN) {\n      fillEventsForCurrentState({\n        shouldConsumeEvent: (e: Event) =>\n          isWithoutState(e) || hasState(State.BEGAN)(e),\n      });\n    } else if (nextRequiredState === State.ACTIVE) {\n      const shouldConsumeEvent = (e: Event) =>\n        isWithoutState(e) || hasState(State.ACTIVE)(e);\n      const shouldTransitionToNextState = (nextEvent: Event) =>\n        noEventsLeft(nextEvent) ||\n        hasState(State.END)(nextEvent) ||\n        hasState(State.FAILED)(nextEvent) ||\n        hasState(State.CANCELLED)(nextEvent);\n\n      fillEventsForCurrentState({\n        shouldConsumeEvent,\n        shouldTransitionToNextState,\n      });\n    } else if (nextRequiredState === State.END) {\n      fillEventsForCurrentState({});\n    }\n    hasAllStates = currentStateIdx === REQUIRED_EVENTS.length;\n\n    invariant(\n      iterations++ <= 500,\n      'exceeded max number of iterations, please report a bug in RNGH repository with your test case'\n    );\n  } while (!hasAllStates);\n\n  return transformedEvents;\n}\n\ntype EventEmitter = (\n  eventName: string,\n  args: { nativeEvent: GestureHandlerTestEvent }\n) => void;\ninterface HandlerData {\n  emitEvent: EventEmitter;\n  handlerType: HandlerNames;\n  handlerTag: number;\n  enabled: boolean | undefined;\n}\nfunction getHandlerData(\n  componentOrGesture: ReactTestInstance | GestureType\n): HandlerData {\n  if (isGesture(componentOrGesture)) {\n    const gesture = componentOrGesture;\n    return {\n      emitEvent: (eventName, args) => {\n        DeviceEventEmitter.emit(eventName, args.nativeEvent);\n      },\n      handlerType: gesture.handlerName as HandlerNames,\n      handlerTag: gesture.handlerTag,\n      enabled: gesture.config.enabled,\n    };\n  }\n  const gestureHandlerComponent = componentOrGesture;\n  return {\n    emitEvent: (eventName, args) => {\n      fireEvent(gestureHandlerComponent, eventName, args);\n    },\n    handlerType: gestureHandlerComponent.props.handlerType as HandlerNames,\n    handlerTag: gestureHandlerComponent.props.handlerTag as number,\n    enabled: gestureHandlerComponent.props.enabled,\n  };\n}\ntype AllGestures =\n  | TapGesture\n  | PanGesture\n  | LongPressGesture\n  | RotationGesture\n  | PinchGesture\n  | FlingGesture\n  | ForceTouchGesture\n  | NativeGesture;\n\ntype AllHandlers =\n  | TapGestureHandler\n  | PanGestureHandler\n  | LongPressGestureHandler\n  | RotationGestureHandler\n  | PinchGestureHandler\n  | FlingGestureHandler\n  | ForceTouchGestureHandler\n  | NativeViewGestureHandler;\n\n// prettier-ignore\ntype ClassComponentConstructor<P> = new (props: P) => React.Component<P, any, any>;\n\ntype ExtractPayloadFromProps<T> =\n  T extends BaseGestureHandlerProps<infer TPayload> ? TPayload : never;\n\ntype ExtractConfig<T> =\n  T extends BaseGesture<infer TGesturePayload>\n    ? TGesturePayload\n    : T extends ClassComponentConstructor<infer THandlerProps>\n      ? ExtractPayloadFromProps<THandlerProps>\n      : Record<string, unknown>;\n\nexport function fireGestureHandler<THandler extends AllGestures | AllHandlers>(\n  componentOrGesture: ReactTestInstance | GestureType,\n  eventList: Partial<GestureHandlerTestEvent<ExtractConfig<THandler>>>[] = []\n): void {\n  const { emitEvent, handlerType, handlerTag, enabled } =\n    getHandlerData(componentOrGesture);\n\n  if (enabled === false) {\n    return;\n  }\n\n  let _ = fillMissingStatesTransitions(\n    eventList,\n    isDiscreteHandler(handlerType)\n  );\n  _ = _.map(fillMissingDefaultsFor({ handlerTag, handlerType }));\n  _ = withPrevAndCurrent(_, fillOldStateChanges);\n  _ = withPrevAndCurrent(_, validateStateTransitions);\n  // @ts-ignore TODO\n  _ = _.map(wrapWithNativeEvent);\n\n  const events = _ as unknown as WrappedGestureHandlerTestEvent[];\n\n  const firstEvent = events.shift()!;\n\n  emitEvent('onGestureHandlerStateChange', firstEvent);\n  let lastSentEvent = firstEvent;\n  for (const event of events) {\n    const hasChangedState =\n      lastSentEvent.nativeEvent.state !== event.nativeEvent.state;\n\n    if (hasChangedState) {\n      emitEvent('onGestureHandlerStateChange', event);\n    } else {\n      emitEvent('onGestureHandlerEvent', event);\n    }\n    lastSentEvent = event;\n  }\n}\n\nexport function getByGestureTestId(testID: string) {\n  const handler = findHandlerByTestID(testID);\n  if (handler === null) {\n    throw new Error(`Handler with id: '${testID}' cannot be found`);\n  }\n  return handler;\n}\n"],"mappings":"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","ignoreList":[]}